legend.key.width = unit(3,"line"))
plot
plot <- RAW %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot
RAW <- read.csv("Data/CompareReflectance/Compare_ref_raw.csv")%>%
mutate(Low = Low /10000,
High = High/10000)
plot <- RAW %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot
RMSE_raw <- sqrt(mean((RAW$Low - RAW$High)^2))
RMSE_raw
STD <- read.csv("Data/CompareReflectance/Compare_ref_std.csv")
plot <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot
STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
RMSE_STD <- sqrt(mean((STD$Low - STD$High)^2))
RMSE_STD
RMSE_raw
STD
RAW <- read.csv("Data/CompareReflectance/Compare_ref_raw.csv")%>%
mutate(Low = Low /10000,
High = High/10000)
RMSE_raw <- sqrt(mean((RAW$Low - RAW$High)^2))
STD <- read.csv("Data/CompareReflectance/Compare_ref_std.csv")
RMSE_STD <- sqrt(mean((STD$Low - STD$High)^2))
RMSE_raw
RMSE_STD <- sqrt(mean((STD$Low - STD$High)^2))
RMSE_STD
plot_RAW <- RAW %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot_RAW
plot_STD <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot_STD
lm_STD <- lm(STD$High ~ STD$Low)
lm_STD
lm_raw <- lm(RAW$High ~ RAW$Low)
lm_raw
plot_STD <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "None",
legend.key.width = unit(3,"line"))
plot_STD
plot_STD <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
RMSE_raw
RMSE_STD
lm_STD
lm_raw
plot_STD <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
# geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot_STD
plot_RAW <- RAW %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
# geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot_RAW
RAW <- read.csv("Data/CompareReflectance/Compare_ref_raw.csv")%>%
mutate(Low = Low /10000,
High = High/10000)
RMSE_raw <- sqrt(mean((RAW$Low - RAW$High)^2))
lm_raw <- lm(RAW$High ~ RAW$Low)
STD <- read.csv("Data/CompareReflectance/Compare_ref_std.csv")
RMSE_STD <- sqrt(mean((STD$Low - STD$High)^2))
lm_STD <- lm(STD$High ~ STD$Low)
plot_RAW <- RAW %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(0,6000),
breaks = c(0,2000,4000,6000),
labels = c("1","2000","4000","6000"))+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
# geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,0.6))+
xlim(c(0.05,0.6))+
ylab("Reflectance of the 120m flight")+
xlab("Reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
plot_STD <- STD %>%
ggplot(aes(x=Low, y=High))+
# geom_point(aes(color = as.factor(pred)))
ggpointdensity::geom_pointdensity(adjust = .03)+
viridis::scale_color_viridis(limits = c(1,2000),
breaks = c(1,1000,2000),
labels = c("1","1000","2000"))+
# scale_color_gradient(na.value = 1)+
# geom_smooth(method = "loess")+
geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
# geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
theme_Bede()+
ylim(c(0.05,1))+
xlim(c(0.05,1))+
ylab("Standardised reflectance of the 120m flight")+
xlab("Standardised reflectance of the 12m flight")+
labs(color = "Pixel density")+
theme(
legend.position = "top",
legend.key.width = unit(3,"line"))
ggsave("./Figures/High_res/Compare_reflectance.png",plot_RAW, width= 472*4, height=402*4, units = "px")
ggsave("./Figures/High_res/Compare_reflectance_std.png",plot_STD, width= 472*4, height=402*4, units = "px")
RAW <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "A") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
RAW
STD <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance_std.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "B") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
RAW+STD
RAW <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "A") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
STD <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/Hiphgh_res/Compare_reflectance_std.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "B") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
RAW+STD
STD <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/Hiphgh_res/Compare_reflectance_std.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "B") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
STD <- ggplot()+
geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance_std.png"))+
coord_equal()+
geom_label(aes(x = 300,y= 1200, label = "B") ,size = 10)+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
RAW+STD
df<-data.frame(
Country = c(
rep("France",5),
rep("Portugal",4)
),
Site = c(
rep("Gulf of Morbihan",3),
rep("Bourgneuf Bay",2),
rep("Aveiro Lagoon",4)
),
Name = c(
"Arz Island",
"Duer",
"Duer",
"Barbâtre",
"L'Epine",
"Marinha Lanzarote",
"Mataducos",
"Gafanha",
"Gafanha"
),
Altitude = c(
"12m",
"12m",
"120m",
"120m",
"120m",
"120m",
"120m",
"120m",
"12m"
),
Utility = c(
"Training",
"Training",
"Validation",
"Validation",
"Validation",
"Validation",
"Validation",
"Validation",
"Training"
)
)
brdr1 <- fp_border_default(color = "black", width = 1.5)
brdr2 <- fp_border_default(color = "grey", width = 1.5)
brdr3 <- fp_border_default(color = "grey40", width = 1.5)
#| cache: false
#| echo: false
#| warning: false
#| eval: true
library(flextable)
library(tidyverse)
library(tidyterra)
library(tidymodels)
library(Utilities.Package)
library(patchwork)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
library(ggforce)
library(patchwork)
library(terra)
library(gt)
library(scales)
library(magick)
library(grid)
library(ggforce)
library(statebins)
library(ggridges)
library(ggspatial)
library(terrainr)
# library(ggpmisc)
library(broom)
library(stars)
library(gmodels)
library(caret)
options(scipen = 100000000)
#| cache: false
#| echo: false
#| eval: false
#| warning: false
df<-data.frame(
Country = c(
rep("France",5),
rep("Portugal",4)
),
Site = c(
rep("Gulf of Morbihan",3),
rep("Bourgneuf Bay",2),
rep("Aveiro Lagoon",4)
),
Name = c(
"Arz Island",
"Duer",
"Duer",
"Barbâtre",
"L'Epine",
"Marinha Lanzarote",
"Mataducos",
"Gafanha",
"Gafanha"
),
Altitude = c(
"12m",
"12m",
"120m",
"120m",
"120m",
"120m",
"120m",
"120m",
"12m"
),
Utility = c(
"Training",
"Training",
"Validation",
"Validation",
"Validation",
"Validation",
"Validation",
"Validation",
"Training"
)
)
brdr1 <- fp_border_default(color = "black", width = 1.5)
brdr2 <- fp_border_default(color = "grey", width = 1.5)
brdr3 <- fp_border_default(color = "grey40", width = 1.5)
i = 16.5 # width of the side borders in the word_document output (in centimeters)
w = i*0.3937 # width of the side borders in the word_document output (in inches)
flx1<-flextable(df)  %>%
flextable::width(width = (w/(ncol(df)))) %>%
merge_v(j = 1) %>%
merge_v(j = 2) %>%
border_remove() %>%
hline_top(border=brdr1) %>%
hline(i=5, border=brdr1) %>%
hline(i=1,j = 3:5, border=brdr2) %>%
hline(i=2, border=brdr2) %>%
hline(i=3, j = 2:5, border=brdr3) %>%
hline(i=4, j = 3:5, border=brdr2) %>%
hline(i=6, border=brdr2) %>%
hline(i=6, j = 1:2, border=brdr1) %>%
hline(i=7, border=brdr2) %>%
hline(i=8, border=brdr2) %>%
hline(i=9, border=brdr1) %>%
vline(j=2, border = brdr1) %>%
flextable::align(align = "center",part = "all") %>%
flextable::align(align = "center",part = "header") %>%
# set_caption(caption = "Table 1 List of drone Flight, summarising the date, the altitude and the purpose of each flight.") %>%
set_table_properties(layout = "autofit")
save_as_image(flx1, "Figures/table_flights.png", res = 300)
flx1
