# fill = "#ffffff99",
size = 8
)+
geom_text(
data = other_table_y_axis,
aes(x = x, y = y, label = label),
size = 8,
hjust = 1,
size = 8
)+
geom_text(
data = other_table_values,
aes(x = x, y = y, label = label),
# fill = "#ffffff99",
size = 8
)+
geom_text(
data = global_accuracy_coord,
aes(x = x, y = y, label = label),
# fill = "#ffffff99",
size = 12,
color = "firebrick4"
)+
geom_label(
data = df_Label_Sites,
aes(x = x, y = y, label = lab),
fill = "#ffffff99",
size = 6.8
)+
geom_text(
data = x_axis_text,
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
# vjust = 1,
hjust = 0,
size = 9,
angle = 40
)+
geom_text(
data = y_axis_text,
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
hjust = 1,
size = 9,
# angle = 20
)+
# geom_text(
#   aes(x = 13.8, y = 12.72, label = "Producer's Accuracy"),
#   # fill = "#ffffff99",
#   size = 9,
#   angle = 20
#   )+
# geom_text(
#   aes(x = 0, y = 0, label = "User's Accuracy"),
#   # fill = "#ffffff99",
#   size = 9
#   )+
xlab("References")+
ylab("Prediction")+
# ggplot2::annotation_custom(ggplotGrob(small_validation_matrices), xmin = 12, ymin = 0)+
theme_Bede()+
theme(
# axis.title.x = element_text(size = 35),
# axis.title.y = element_text(size = 35),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.text.x = element_text(size = 30),
axis.text.x = element_blank(),
# axis.text.y = element_text(size = 25),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.border = element_blank(),
axis.line=element_blank(),
# legend.position = "top",
legend.position = c(0.73, 0.8),
legend.direction="horizontal",
legend.key.width = unit(2,"cm"),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20, vjust = 2),
legend.title.align = 0.5,
legend.justification = "center")+
geom_text(aes(x = 7, y = 16, label = "Truth"), size = 14)+
geom_text(aes(x = -5, y = 6, label = "Prediction"), angle = 90, size = 14)
plot_matrix_global
ggsave("Figures/High_res/Validation/ConfusionMatrixGlobal.png",plot_matrix_global , width = 1920*4, height = 1032*4, units = "px")
#| cache: false
#| echo: false
#| warning: false
#| eval: true
library(flextable)
library(tidyverse)
library(tidyterra)
library(tidymodels)
library(Utilities.Package)
library(patchwork)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
library(ggforce)
library(patchwork)
library(terra)
library(gt)
library(scales)
library(magick)
library(grid)
library(ggforce)
library(statebins)
library(ggridges)
library(ggspatial)
library(terrainr)
# library(ggpmisc)
library(broom)
library(stars)
library(gmodels)
library(caret)
options(scipen = 100000000)
micasense<-list.files(pattern = "Wavelength_Micasense_DualMX.csv",recursive = T) %>%
read.delim(sep = ";")
gaf_low_multi<- "./Data/BiCOME_Flights/Aveiro/Aveiro_MULTI_12m_ortho_1801.tif" %>%
rast()
names(gaf_low_multi)<-c(paste0("B",c(1:10)))
Gafanha_low_pred<-"./Data/image/prediction/AveiroLowPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif" %>%
rast()
names(Gafanha_low_pred)<-"pred"
gaf<-rast(list(gaf_low_multi,Gafanha_low_pred)) %>%
as.data.frame(xy = F) %>%
dtplyr::lazy_dt() %>%
dplyr::filter(B1 != 65535,
pred != 0) %>%
as_tibble() %>%
rename(Class = "pred") %>%
mutate(pxl_ID = c(1:nrow(.))) %>%
pivot_longer(-c(Class,pxl_ID), names_to = "band",values_to = "value") %>%
left_join(micasense, by = c("band" = "Band_ID")) %>%
group_by(Class, Wavelength) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value),
max = max(value),
min = min(value),
median = median(value)) %>%
mutate(Class = case_when(Class == 1 ~ "Bare Sediment",
Class == 2 ~ "D - Chloropyceae",
Class == 3 ~ "Bare Sediment",
Class == 4 ~ "A - MagnoliopsidaL",
Class == 5 ~ "E - Microphytobenthos",
Class == 6 ~ "A - Magnoliopsida",
Class == 7 ~ "B - Phaeophyceae",
Class == 8 ~ "C - Rhodophyceae",
Class == 9 ~ "Sun Glint",
Class == 10 ~ "Water",
Class == 11 ~ "Xanthophyceae",
TRUE ~ "NA"))
gaf<-rast(list(gaf_low_multi,Gafanha_low_pred)) %>%
as.data.frame(xy = F) %>%
dtplyr::lazy_dt() %>%
dplyr::filter(B1 != 65535,
pred != 0) %>%
as_tibble() %>%
rename(Class = "pred") %>%
mutate(pxl_ID = c(1:nrow(.))) %>%
pivot_longer(-c(Class,pxl_ID), names_to = "band",values_to = "value") %>%
left_join(micasense, by = c("band" = "Band_ID")) %>%
group_by(Class, Wavelength) %>%
dplyr::summarise(mean = mean(value),
sd = sd(value),
max = max(value),
min = min(value),
median = median(value)) %>%
mutate(Class = case_when(Class == 1 ~ "Bare Sediment",
Class == 2 ~ "D - Chlorophyceae",
Class == 3 ~ "Bare Sediment",
Class == 4 ~ "A - MagnoliopsidaL",
Class == 5 ~ "E - Microphytobenthos",
Class == 6 ~ "A - Magnoliopsida",
Class == 7 ~ "B - Phaeophyceae",
Class == 8 ~ "C - Rhodophyceae",
Class == 9 ~ "Sun Glint",
Class == 10 ~ "Water",
Class == 11 ~ "Xanthophyceae",
TRUE ~ "NA"))
spectra<-gaf %>%
dplyr::filter(Class != "Bare Sediment",
Class != "Sun Glint",
Class != "Water",
Class != "Xanthophyceae",
Class != "A - MagnoliopsidaL") %>%
ggplot(aes(x=Wavelength, y = mean/10000, color = Class))+
geom_line(linewidth = 0.5)+
scale_color_manual(values=c("#389318", "#873e23", "#b3002d", "#b3ff1a", "#DAA520"))+
ylab("Reflectance")+
xlab("Wavelength (nm)")+
theme_Bede()+
theme(axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
legend.position = c(0.2, 0.7),
plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),
legend.title=element_blank(),
legend.text = element_text(size = 5),
legend.key.size = unit(0.25, "cm"),
legend.text.align = 0,
panel.border = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color="black"))
ggsave("Figures/High_res/Figure2/Spectral_shapes.png",spectra, bg = "transparent",  height = 2, width = 3, dpi = 2000)
sp <- image_ggplot(magick::image_read("Figures/High_res/Figure2/Spectral_shapes.png"), interpolate = T)
sp
spectra
Magno<-ggplot()+
geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Magnoliopsida_cropped2.png"))+
coord_equal()+
geom_label(aes(x = 50,y= 950, label = "A"))+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
Brown<-ggplot()+
geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Pheophyceae_cropped.png"))+
coord_equal()+
geom_label(aes(x = 50,y=450, label = "B"))+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
Red <- ggplot()+
geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Rodophyceae_cropped.png"))+
coord_equal()+
geom_label(aes(x = 50,y=450, label = "C"))+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
green <- ggplot()+
geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Chlorophyceae_cropped.png"))+
coord_equal()+
geom_label(aes(x = 50,y=450, label = "D"))+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
MPB <- ggplot()+
geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Bacillariophyceae_cropped.png"))+
coord_equal()+
geom_label(aes(x = 50,y=450, label = "E"))+
theme_void()+
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "pt"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.margin = margin(0, 0, 0, 0, "pt"))
layout <- c(
patchwork::area(t = 10, l = 0, b = 30, r = 10),
patchwork::area(t = 0, l = 0, b = 10, r = 10),
patchwork::area(t = 0, l = 10, b = 10, r = 20),
patchwork::area(t = 0, l = 20, b = 10, r = 30),
patchwork::area(t = 0, l = 30, b = 10, r = 40),
patchwork::area(t = 10, l = 10, b = 30, r = 40)
)
layout1 <- c(
patchwork::area(t = 1, l = 1, b = 20, r = 10),
patchwork::area(t = 20, l = 1, b = 29, r = 10),
patchwork::area(t = 20, l = 9, b = 29, r = 18),
patchwork::area(t = 20, l = 17, b = 29, r = 26),
patchwork::area(t = 20, l = 25, b = 29, r = 34),
patchwork::area(t = 1, l = 9, b = 20, r = 34)
)
plot<-Magno+
Brown+
Red+
green+
MPB+
sp+
patchwork::plot_layout(design=layout1)
ggsave("Figures/High_res/Figure2/Spectral_shapes_total.png",plot, height = 7, width = 10, dpi = 800)
#| cache: true
#| echo: false
#| eval: false
#| warning: false
df_pigment<-
data.frame(
Classes=c("Magnoliopsida",
"Chlorophyceae",
"Bacillariophyceae",
"Phaeophyceae",
"Rhodophyceae"),
chlb=c(1,1,0,0,0),
chlc=c(0,0,1,1,0),
fuco=c(0,0,1,1,0),
zea=c(1,1,0,1,0),
diad=c(0,0,1,0,0),
lutein=c(1,1,0,0,0),
Neox=c(1,1,0,0,0),
PE=c(0,0,0,0,1),
PC=c(0,0,0,0,1))%>%
select(-Classes) %>%
as.matrix() %>%
as.array() %>%
rast()
ext(df_pigment)<-c(0,9,0,5)
y_axis_text_pigment<-data.frame(x = rep(-0.05,5),
y = c(0.5,1.5,2.5,3.5,4.5),
lab = c("Rhodophyceae",
"Phaeophyceae",
"Bacillariophy.",
"Chlorophyceae",
"Magnoliopsida")
)
x_axis_text_pigment<-data.frame(y = rep(5.5,9),
x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),
lab = c("Chl-b","Chl-c","Fuco","Zea","Diad","Lut","Neo","PE","PC")
)
min_x_line = -1.5
max_y_line = 6
line_grid<-data.frame(xmin=NA,
xmax=NA,
ymin=NA,
ymax=NA,
group=NA)
for(i in 0:max_y_line){
line_grid[i+1,1]=min_x_line
line_grid[i+1,2]=9
line_grid[i+1,3]=i
line_grid[i+1,4]=i
line_grid[i+1,5]=i+1
}
nrowgrid=nrow(line_grid)
for(i in 0:9){
line_grid[i+1+nrowgrid,1]=i
line_grid[i+1+nrowgrid,2]=i
line_grid[i+1+nrowgrid,3]=0
line_grid[i+1+nrowgrid,4]=max_y_line
line_grid[i+1+nrowgrid,5]=i+1+nrowgrid
}
line_grid[nrow(line_grid)+1,1] = min_x_line
line_grid[nrow(line_grid),2] = min_x_line
line_grid[nrow(line_grid),3] = 0
line_grid[nrow(line_grid),4] = max_y_line
line_grid[nrow(line_grid),5] = nrow(line_grid)
line_grid<- line_grid %>%
rbind(c(-1.5,9,-0.6,-0.6,19))%>%
rbind(c(-1.5,-1.5,-0.6,0,20))%>%
rbind(c(0,0,-0.6,0,21))%>%
rbind(c(1,1,-0.6,0,22))%>%
rbind(c(2,2,-0.6,0,23))%>%
rbind(c(3,3,-0.6,0,24))%>%
rbind(c(4,4,-0.6,0,25))%>%
rbind(c(5,5,-0.6,0,26))%>%
rbind(c(6,6,-0.6,0,27))%>%
rbind(c(7,7,-0.6,0,28))%>%
rbind(c(8,8,-0.6,0,29))%>%
rbind(c(9,9,-0.6,0,30))
Absorption_wv<- data.frame(x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),
y = rep(-0.3,9),
lab = c("650","636","550","489","496","490","450","566","615"))
rast_pigment<-ggplot()+
geom_spatraster(data = (df_pigment),
# show.legend = F,
na.rm = TRUE
)+
coord_fixed(ratio = 0.7)+
scale_fill_gradientn(
# colours = c("black","firebrick4","goldenrod","yellow","chartreuse3"),
# colours = c("khaki1","goldenrod","firebrick3","chartreuse4"),
colours = c("firebrick4","orange","#007d00"),
# colours = c("#7d0000","#00b300","#00b300","#00b300","#007d00"),
na.value = "white",
labels = c("Absence","no se","Presence"),
breaks = c(0,0.5,1))+
geom_text(
data = y_axis_text_pigment,
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
hjust = 1,
size = 6,
# angle = 20
)+
geom_text(
data = data.frame(x = -0.05, y = -0.3, lab = "Absorption (nm)"),
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
hjust = 1,
size = 5,
# angle = 20
)+
geom_text(
data = Absorption_wv,
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
hjust = 0.5,
size = 6,
# angle = 20
)+
geom_text(
data = x_axis_text_pigment,
aes(x = x, y = y, label = lab),
# fill = "#ffffff99",
hjust = 0.5,
size = 7,
# angle = 20
)+
geom_segment(data = line_grid,
aes(x = xmin, xend = xmax, y = ymin, yend = ymax, group = group),
linewidth = 1)+
xlim(c(-2,9))+
ylim(c(-1,6.1))+
theme_Bede()+
theme(
# axis.title.x = element_text(size = 35),
# axis.title.y = element_text(size = 35),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.text.x = element_text(size = 30),
axis.text.x = element_blank(),
# axis.text.y = element_text(size = 25),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.border = element_blank(),
axis.line=element_blank(),
# legend.position = "top",
legend.position = "none",
legend.direction="horizontal",
legend.key.width = unit(2,"cm"),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20, vjust = 2),
legend.title.align = 0.5,
legend.justification = "center")
# rast_pigment
ggsave("./Figures/Disc_Pigment_Table.png",rast_pigment, width= 1066*4, height=516*4, units = "px")
ggsave("./Figures/High_res/Disc_Pigment_Table.png",rast_pigment, width= 1066*4, height=516*4, units = "px")
#| cache: false
#| echo: false
#| eval: false
#| warning: false
df_validation<-read.csv("Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv")
i = 16.5 # width of the side borders in the word_document output (in centimeters)
w = i*0.3937 # width of the side borders in the word_document output (in inches)
df_flx2<-df_training %>%
left_join(df_validation, by = "True") %>%
rename(`Validation Pixels` = "n",
Class = "True",
`Training Pixels` = "Training_Pixels")
#| echo: false
#| warning: false
#| cache: true
#| eval: false
df_validation<-"Data/accuracy_assesment_low&high_flights.csv" %>%
read_delim(delim = ",", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::filter(True != "Sediment",
True != "Sun Glint",
True != "Water",
True != "Xanthophyceae") %>%
mutate(True = case_when(True == "Green Algae" ~ "Chlorophyceae",
True == "Microphytobenthos" ~ "Bacillariophyceae",
True == "Rodophyceae" ~ "Rhodophyceae",
True == "Pheophyceae" ~ "Phaeophyceae",
TRUE ~ True)) %>%
group_by(True) %>%
summarise(n = n())
#| cache: true
#| echo: false
#| warning: false
#| eval: true
df_training<-read.csv("Data/training/TrainandValid_NewStanRawMetrics_Processed.csv")
#| cache: false
#| echo: false
#| eval: false
#| warning: false
df_validation<-read.csv("Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv")
i = 16.5 # width of the side borders in the word_document output (in centimeters)
w = i*0.3937 # width of the side borders in the word_document output (in inches)
df_flx2<-df_training %>%
left_join(df_validation, by = "True") %>%
rename(`Validation Pixels` = "n",
Class = "True",
`Training Pixels` = "Training_Pixels")
flx2 <- df_flx2 %>%
flextable() %>%
flextable::width(width = (w/(ncol(df_flx2)))) %>%
# border_remove() %>%
flextable::align(align = "center",part = "all") %>%
flextable::align(align = "center",part = "header") %>%
set_table_properties(layout = "autofit")
save_as_image(flx2, "Figures/High_res/table_validation_px.png", res = 300)
4969976-955589
4969976-4955589
14387/.84291
14387/384291
*100
143/384291
0.0003721138*100
