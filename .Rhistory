scale_fill_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water")) +
scale_color_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water"))+
theme_Bede()+
xlab("Resolution (m)") +
ylab("Agreement")+
theme(axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"))
# scale_x_log10()
)
# glm_res_true <- glm(prop ~ area * true_fct , data = total, familly = mgcv::betar(link="logit"))
glm_res_true <- mgcv::gam(prop ~ area * true_fct , data = total, familly = mgcv::betar(link="logit"))
summary(glm_res_true)
Utilities.Package::Model_Check(glm_res_true)
NewData<-expand_grid(res=unique(total$res),
true_fct=unique(total$true_fct),
area = res*res)
pred <- predict(glm_res_true, NewData, se.fit = T, type = "link")
NewData <- NewData %>%
mutate(fit = pred$fit*100,
se = pred$se.fit*100,
true_fct=as.factor(true_fct))
cols_fill <- c("1" = "#DAA520",
"2" = "#b3ff1a",
"3" = "#389318",
"4" = "#873e23",
"5" = "#b3002d",
"6" = "#70543e",
"7" = 'grey',
"8" = "#42c9bc")
(plot <- ggplot(NewData)+
geom_ribbon(aes(x = res, y = fit, ymax = fit+se, ymin = fit-se,
color = true_fct, group = true_fct, fill = true_fct
), alpha = 0.2)+
geom_line(aes(x = res, y = fit,
color = true_fct, group = true_fct
))+
# ylim(0,1)+
scale_fill_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water")) +
scale_color_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water"))+
theme_Bede()+
xlab("Resolution (m)") +
ylab("Agreement")+
theme(axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"))
# scale_x_log10()
)
(plot <- ggplot(NewData)+
geom_ribbon(aes(x = area, y = fit, ymax = fit+se, ymin = fit-se,
color = true_fct, group = true_fct, fill = true_fct
), alpha = 0.2)+
geom_line(aes(x = area, y = fit,
color = true_fct, group = true_fct
))+
# ylim(0,1)+
scale_fill_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water")) +
scale_color_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water"))+
theme_Bede()+
xlab("Resolution (m)") +
ylab("Agreement")+
theme(axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"))
# scale_x_log10()
)
NewData
ggplot(NewData)+
geom_ribbon(aes(x = res, y = fit, ymax = fit+se, ymin = fit-se,
color = true_fct, group = true_fct, fill = true_fct
), alpha = 0.2)
(plot <- ggplot(NewData)+
geom_ribbon(aes(x = sqrt(area), y = fit, ymax = fit+se, ymin = fit-se,
color = true_fct, group = true_fct, fill = true_fct
), alpha = 0.2)+
geom_line(aes(x = sqrt(area), y = fit,
color = true_fct, group = true_fct
))+
# ylim(0,1)+
scale_fill_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water")) +
scale_color_manual(name = NULL,
values = cols_fill,
labels = c("Green algae", "Seagrass", "Brown algae", "Red algae", "Sediment", "Sunglint","Water"))+
theme_Bede()+
xlab("Resolution (m)") +
ylab("Agreement")+
theme(axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size = 15),
legend.key.size = unit(1, "cm"))
# scale_x_log10()
)
install.packages("mapview")
layout<-"Data/Figure2_Workflow" %>%
list.files("V4.txt",full.names = T, recursive = T) %>%
read_delim(delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>%
dplyr::filter(Evaluate == T)
#| cache: false
#| echo: false
#| warning: false
#| eval: true
library(flextable)
library(tidyverse)
library(tidyterra)
# library(tidymodels)
library(Utilities.Package)
library(patchwork)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggforce)
library(patchwork)
library(terra)
library(gt)
library(scales)
library(magick)
library(grid)
library(ggforce)
library(statebins)
library(ggridges)
library(ggspatial)
library(terrainr)
# library(ggpmisc)
library(broom)
library(stars)
library(gmodels)
library(caret)
library(rstudioapi)
library(terra)
library(MapRs)
options(scipen = 100000000)
# terraOptions(cores = 12)
layout<-"Data/Figure2_Workflow" %>%
list.files("V4.txt",full.names = T, recursive = T) %>%
read_delim(delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>%
dplyr::filter(Evaluate == T)
"Data/Figure2_Workflow" %>%
list.files("V4.txt",full.names = T, recursive = T) %>%
read_delim(delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
layout<-"Data/Figure2_Workflow" %>%
list.files("V4.txt",full.names = T, recursive = T) %>%
read_delim(delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>%
dplyr::filter(Evaluate == T)
layout$Text<- gsub("alaligne","\n", layout$Text)
boxes<- layout %>%
dplyr::filter(Type == "Box",
shape == "square")
text<- layout %>%
dplyr::filter(Type == "Box")
diamonds<- layout %>%
dplyr::filter(Type == "Box",
shape == "diamond")
diff = 0.1
for (i in 1:nrow(diamonds)) {
diam_a<-diamonds[i,]
df<-data.frame(
x = c(diam_a$xmin - diff, diam_a$xmin + diff, diam_a$xmax + diff, diam_a$xmax - diff),
y = c(diam_a$ymin, diam_a$ymax, diam_a$ymax, diam_a$ymin),
Type = rep(diam_a$Type,4),
Text = rep(diam_a$Text,4),
Color = rep(diam_a$color,4),
Evaluate = rep(diam_a$Evaluate,4),
Resolution =  rep(diam_a$Resolution,4),
Evaluate_bigbox = rep(diam_a$Evaluate_bigbox,4),
alpha = rep(diam_a$alpha,4),
shape =  rep(diam_a$shape,4)
)
if(i == 1){
diamond_list<-list(df)
}else{
diamond_list[[i]]<-df
}
}
Arrows<- layout %>%
dplyr::filter(Type == "Arrow",
Evaluate == T)
Group_box<-layout %>%
dplyr::filter(Type == "Box",
Evaluate_bigbox == T) %>%
group_by(Group) %>%
dplyr::summarise(xmin = min(xmin)-0.1,
xmax = max(xmax)+0.1,
ymin = min(ymin)-0.1,
ymax = max(ymax)+0.1,
alpha = 0.1,
color = color)
resolution_box<-layout %>%
dplyr::filter(Type == "Box",
Resolution != "NA") %>%
group_by(Resolution) %>%
dplyr::summarise(xmin = min(xmin)-0.1,
xmax = max(xmax)+0.1,
ymin = min(ymin)-0.1,
ymax = max(ymax)+0.1,
alpha = 0.1,
color = color)
legend = data.frame(color = unique(layout$color)) %>%
dplyr::filter(!is.na(color)) %>%
mutate(label = case_when(color == "#EA6155" ~ "Input Data",
color == "#DC9614" ~ "Pre-processing",
color == "#52A4DA" ~ "Model Building",
color == "#79DA52" ~ "Validation",
color == "#DA9652" ~ "Output Data",
color == "darkcyan" ~ "Final Product",
color == "#DA5273"  ~ "Prediction",
TRUE ~ "NA")) %>%
arrange
segment<-layout %>%
dplyr::filter(Type == "Segment")
building <- F
if(building == T){
text_size = 6 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =1 ####arrow_size 0.3 to export  1 to for R plotting
legend_size = 1 #### 0.3 to export, 1 for R ploting
legend_text = 10 #### 4 to export, 10 for R ploting
}else{
text_size = 1.85 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =0.3 ####arrow_size 0.3 to export  1 to for R plotting
legend_size = 0.3 #### 0.3 to export, 1 for R ploting
legend_text = 5 #### 5 to export, 10 for R ploting
}
a<-ggplot()+
statebins:::geom_rrect(data = Group_box,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax),
alpha = 0.05,
size = 0.2,
show.legend = F,
fill = Group_box$color,
color = "black")+
statebins:::geom_rrect(data = resolution_box,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax,
alpha = rep(c("Input Data", "Pre-processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),2)),
fill = "NA",
linetype = 2,
size = 0.4,
color = "black")+
scale_alpha_manual(name = "",
values = c(1,1,1,1,1,1,1),
labels = c("Input Data", "Pre-Processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),
guide = guide_legend(ncol = 1, override.aes = list(fill = c("#f94144", "#f3722c", "#f8961e", "#f9c74f", "#90be6d", "#43aa8b", "#577590"),
shape = c(22),
linetype = c(1),
alpha = c(0.5)
)
)
)+
statebins:::geom_rrect(data = boxes,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax
),
size = 0.2,
alpha = as.numeric(boxes$alpha),
fill = boxes$color,
color = "black")
for(i in 1:length(diamond_list)){
poly_i<-diamond_list[[i]]
a<-a+
geom_polygon(data = poly_i,
mapping = aes(x = x,
y = y
),
size = 0.2,
alpha = poly_i$alpha,
fill = poly_i$Color,
color = "black")
}
if(building == T){
a<-a+
geom_text(data = text,
mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (ID)), size = text_size)
}else{
a<-a+
geom_text(data = text,
mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (Text)), size = text_size)
}
a<-a+
geom_segment(data = Arrows, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
size=line_size, linejoin = "mitre", lineend = "butt",
arrow = arrow(length = unit(1, "mm"), type= "closed")
)+
geom_segment(data = segment, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
size=line_size, linejoin = "mitre", lineend = "square"
)+
geom_text(aes(x = -5.4, y = -2, label = "Flight height: 12 m \n Pixel size : 8 mm", angle = 90), size = text_size+1)+
geom_text(aes(x = -5.4, y = -6.8, label = "Flight height: 120 m \n Pixel size : 80 mm", angle = 90), size = text_size+1)+
geom_text(aes(x = 4, y = 1.75, label = "Pre Processing"), size = text_size)
if(building == F){
a<- a+ theme_void()
}
a<-a+
theme(legend.position = c(0.88,0.3),
legend.text = element_text(size = legend_text),
legend.key.size = unit(legend_size, 'cm')
)+
scale_x_continuous(breaks = scales::breaks_width(0.5))+
scale_y_continuous(breaks = scales::breaks_width(0.5))
if(building == T){
a
}else{
ggsave("Figures/Figure3_workflow.png",a, width = 1920, height = 1129, units = "px")
}
a
layout<-"Data/Figure2_Workflow" %>%
list.files("V5.txt",full.names = T, recursive = T) %>%
read_delim(delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>%
dplyr::filter(Evaluate == T)
layout$Text<- gsub("alaligne","\n", layout$Text)
boxes<- layout %>%
dplyr::filter(Type == "Box",
shape == "square")
text<- layout %>%
dplyr::filter(Type == "Box")
diamonds<- layout %>%
dplyr::filter(Type == "Box",
shape == "diamond")
diff = 0.1
for (i in 1:nrow(diamonds)) {
diam_a<-diamonds[i,]
df<-data.frame(
x = c(diam_a$xmin - diff, diam_a$xmin + diff, diam_a$xmax + diff, diam_a$xmax - diff),
y = c(diam_a$ymin, diam_a$ymax, diam_a$ymax, diam_a$ymin),
Type = rep(diam_a$Type,4),
Text = rep(diam_a$Text,4),
Color = rep(diam_a$color,4),
Evaluate = rep(diam_a$Evaluate,4),
Resolution =  rep(diam_a$Resolution,4),
Evaluate_bigbox = rep(diam_a$Evaluate_bigbox,4),
alpha = rep(diam_a$alpha,4),
shape =  rep(diam_a$shape,4)
)
if(i == 1){
diamond_list<-list(df)
}else{
diamond_list[[i]]<-df
}
}
Arrows<- layout %>%
dplyr::filter(Type == "Arrow",
Evaluate == T)
Group_box<-layout %>%
dplyr::filter(Type == "Box",
Evaluate_bigbox == T) %>%
group_by(Group) %>%
dplyr::summarise(xmin = min(xmin)-0.1,
xmax = max(xmax)+0.1,
ymin = min(ymin)-0.1,
ymax = max(ymax)+0.1,
alpha = 0.1,
color = color)
resolution_box<-layout %>%
dplyr::filter(Type == "Box",
Resolution != "NA") %>%
group_by(Resolution) %>%
dplyr::summarise(xmin = min(xmin)-0.1,
xmax = max(xmax)+0.1,
ymin = min(ymin)-0.1,
ymax = max(ymax)+0.1,
alpha = 0.1,
color = color)
legend = data.frame(color = unique(layout$color)) %>%
dplyr::filter(!is.na(color)) %>%
mutate(label = case_when(color == "#EA6155" ~ "Input Data",
color == "#DC9614" ~ "Pre-processing",
color == "#52A4DA" ~ "Model Building",
color == "#79DA52" ~ "Validation",
color == "#DA9652" ~ "Output Data",
color == "darkcyan" ~ "Final Product",
color == "#DA5273"  ~ "Prediction",
TRUE ~ "NA")) %>%
arrange
segment<-layout %>%
dplyr::filter(Type == "Segment")
#| cache: true
#| echo: false
#| warning: false
#| eval: false
building <- F
if(building == T){
text_size = 6 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =1 ####arrow_size 0.3 to export  1 to for R plotting
legend_size = 1 #### 0.3 to export, 1 for R ploting
legend_text = 10 #### 4 to export, 10 for R ploting
}else{
text_size = 1.85 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =0.3 ####arrow_size 0.3 to export  1 to for R plotting
legend_size = 0.3 #### 0.3 to export, 1 for R ploting
legend_text = 5 #### 5 to export, 10 for R ploting
}
a<-ggplot()+
statebins:::geom_rrect(data = Group_box,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax),
alpha = 0.05,
size = 0.2,
show.legend = F,
fill = Group_box$color,
color = "black")+
statebins:::geom_rrect(data = resolution_box,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax,
alpha = rep(c("Input Data", "Pre-processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),2)),
fill = "NA",
linetype = 2,
size = 0.4,
color = "black")+
scale_alpha_manual(name = "",
values = c(1,1,1,1,1,1,1),
labels = c("Input Data", "Pre-Processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),
guide = guide_legend(ncol = 1, override.aes = list(fill = c("#f94144", "#f3722c", "#f8961e", "#f9c74f", "#90be6d", "#43aa8b", "#577590"),
shape = c(22),
linetype = c(1),
alpha = c(0.5)
)
)
)+
statebins:::geom_rrect(data = boxes,
mapping = aes(xmin = xmin,
xmax= xmax,
ymin = ymin,
ymax = ymax
),
size = 0.2,
alpha = as.numeric(boxes$alpha),
fill = boxes$color,
color = "black")
for(i in 1:length(diamond_list)){
poly_i<-diamond_list[[i]]
a<-a+
geom_polygon(data = poly_i,
mapping = aes(x = x,
y = y
),
size = 0.2,
alpha = poly_i$alpha,
fill = poly_i$Color,
color = "black")
}
if(building == T){
a<-a+
geom_text(data = text,
mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (ID)), size = text_size)
}else{
a<-a+
geom_text(data = text,
mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (Text)), size = text_size)
}
a<-a+
geom_segment(data = Arrows, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
size=line_size, linejoin = "mitre", lineend = "butt",
arrow = arrow(length = unit(1, "mm"), type= "closed")
)+
geom_segment(data = segment, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
size=line_size, linejoin = "mitre", lineend = "square"
)+
geom_text(aes(x = -5.4, y = -2, label = "Flight height: 12 m \n Pixel size : 8 mm", angle = 90), size = text_size+1)+
geom_text(aes(x = -5.4, y = -6.8, label = "Flight height: 120 m \n Pixel size : 80 mm", angle = 90), size = text_size+1)+
geom_text(aes(x = 4, y = 1.75, label = "Pre Processing"), size = text_size)
if(building == F){
a<- a+ theme_void()
}
a<-a+
theme(legend.position = c(0.88,0.3),
legend.text = element_text(size = legend_text),
legend.key.size = unit(legend_size, 'cm')
)+
scale_x_continuous(breaks = scales::breaks_width(0.5))+
scale_y_continuous(breaks = scales::breaks_width(0.5))
if(building == T){
a
}else{
ggsave("Figures/Figure3_workflow.png",a, width = 1920, height = 1129, units = "px")
}
a
knitr::include_graphics("./Figures/Figure3_workflow.png")
