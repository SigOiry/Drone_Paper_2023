{
  "hash": "f37d302e84bf72dd03ffd326d5e8df53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Discriminating Seagrasses From Green Macroalgae in European Intertidal areas using high resolution multispectral drone imagery.\nauthor:\n  - name: Simon Oiry\n    orcid: 0000-0001-7161-5246\n    corresponding: true\n    email: oirysimon@gmail.com\n    roles:\n      - Investigation\n      - Writing\n      - Data acquisition\n    affiliations:\n      - Nantes University\n  - name: Bede Ffinian Rowe Davies\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Nantes University\n  - name: Pierre Gernez\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Nantes University\n  - name: Ana I. Sousa\n    corresponding: false\n    roles:\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Aveiro University\n  - name: Philippe Rosa\n    corresponding: false\n    roles: \n      - Data acquisition\n      - Revision\n    affiliations:\n      - Nantes University\n  - name: Maria Laura Zoffoli\n    corresponding: false\n    roles: \n      - Data acquisition\n      - Revision\n    affiliations:\n      - CNR ISMAR\n  - name: Guillaume Brunier\n    corresponding: false\n    roles: \n      - Data acquisition\n      - Revision\n    affiliations:\n      - JeSaisPas\n  - name: Laurent Barillé\n    corresponding: false\n    roles: \n      - Investigation\n      - Data acquisition\n      - Revision\n    affiliations:\n      - Nantes University\nkeywords:\n  - Drone\n  - Remote Sensing\nabstract: |\n  Coastal areas host seagrass meadows, which offer crucial ecosystem services including erosion control and carbon sequestration. However, these areas are increasingly impacted by human activities, leading to seagrass decline and habitat fragmentation. In situ surveys, traditionally performed to monitor these ecosystems face limitations on temporal and spatial coverage, particularly in intertidal zones, prompting the use of satellite data within monitoring programs. Yet, satellite remote sensing struggles with spatial and spectral resolution, making it difficult to discriminate seagrass from other macrophytes in highly heterogenous meadows. To address these challenges, drone images acquired with multi-spectral sensors offer a promising solution. This study focuses on using drones acquisitions for mapping intertidal macrophytes, effectively discriminating between seagrass and green macroalgae. Ten drone flights were conducted at two different altitudes (12m and 120m) across diverse European habitats in France and Portugal. Low altitude flights were used to train a Deep Learning classifier based on Neural Networks to discrimintate among 5 intertidal vegetation classes. Drone mapping demonstrated an overall accuracy of 94% across all the sites and images, covering a total area of 467 000 m². The model exhibited an accuracy of 96.4% in identifying seagrass.\nplain-language-summary: |\n  This study demonstrates the efficacy of using drones equipped with multi-spectral sensors for mapping intertidal macrophytes, particularly seagrass, overcoming limitations of traditional in situ surveys and satellite remote sensing, with a Deep Learning classifier achieving 94% overall accuracy across diverse European habitats, and 96.4% accuracy specifically in identifying seagrass.\n  \nkey-points:\n  - An intertidal vegetation classifier has been built to be used across different study sites without losing classification accuracy. \n  - Neural Network made to accuratly discriminates intertidal seagrasses from green algae (chlorophyceae)\ndate: last-modified\ncitation:\n  container-title: Earth and Space Science\nnumber-sections: true\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(flextable)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'flextable' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'ggplot2' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'purrr' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'dplyr' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'lubridate' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::compose() masks flextable::compose()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidyterra)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'tidyterra' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'tidyterra'\n\nL'objet suivant est masqué depuis 'package:stats':\n\n    filter\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'tidymodels' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.2.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.8     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'broom' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'dials' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'infer' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'modeldata' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'parsnip' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'recipes' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'rsample' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'tune' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'workflows' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'workflowsets' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'yardstick' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::compose()    masks flextable::compose()\n✖ scales::discard()   masks purrr::discard()\n✖ tidyterra::filter() masks dplyr::filter(), stats::filter()\n✖ recipes::fixed()    masks stringr::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ yardstick::spec()   masks readr::spec()\n✖ recipes::step()     masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(Utilities.Package) \n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLe chargement a nécessité le package : cowplot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'cowplot' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'cowplot'\n\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    stamp\n\nLe chargement a nécessité le package : patchwork\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'patchwork' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'patchwork'\n\nL'objet suivant est masqué depuis 'package:cowplot':\n\n    align_plots\n\nLe chargement a nécessité le package : magrittr\n\nAttachement du package : 'magrittr'\n\nL'objet suivant est masqué depuis 'package:purrr':\n\n    set_names\n\nL'objet suivant est masqué depuis 'package:tidyr':\n\n    extract\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(patchwork)\nlibrary(sf) \n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'sf' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(rnaturalearth) \n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'rnaturalearth' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSupport for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(rnaturalearthdata) \n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'rnaturalearthdata' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'rnaturalearthdata'\n\nL'objet suivant est masqué depuis 'package:rnaturalearth':\n\n    countries110\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(rnaturalearthhires)\nlibrary(ggforce) \nlibrary(patchwork)\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'terra' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nterra 1.7.55\n\nAttachement du package : 'terra'\n\nLes objets suivants sont masqués depuis 'package:magrittr':\n\n    extract, inset\n\nL'objet suivant est masqué depuis 'package:patchwork':\n\n    area\n\nL'objet suivant est masqué depuis 'package:scales':\n\n    rescale\n\nL'objet suivant est masqué depuis 'package:tidyr':\n\n    extract\n\nLes objets suivants sont masqués depuis 'package:flextable':\n\n    align, colorize, rotate, width\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(gt)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'gt' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(scales)\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLinking to ImageMagick 6.9.12.3\nEnabled features: cairo, freetype, fftw, ghostscript, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fontconfig, x11\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(grid)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'grid'\n\nL'objet suivant est masqué depuis 'package:terra':\n\n    depth\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggforce)\nlibrary(statebins)\nlibrary(ggridges)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'ggridges' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggspatial)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'ggspatial' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(terrainr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'terrainr' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# library(ggpmisc)\nlibrary(broom)\nlibrary(stars)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'stars' a été compilé avec la version R 4.3.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLe chargement a nécessité le package : abind\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(gmodels)\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLe chargement a nécessité le package : lattice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: le package 'lattice' a été compilé avec la version R 4.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttachement du package : 'caret'\n\nLes objets suivants sont masqués depuis 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\nL'objet suivant est masqué depuis 'package:purrr':\n\n    lift\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\noptions(scipen = 100000000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmy_comma<-scales::label_comma(accuracy = NULL, big.mark = \",\",decimal.mark = \".\")\n```\n:::\n\n\n\n\n# Introduction\n\nCoastal areas are vital hotshots for marine biodiversity, with intertidal seagrass meadows playing a crucial role at the interface between land and ocean [@unsworth2022]. These meadows offer a myriad of ecosystem services to humanity, including limitation of coastline erosion, reducing the risk of eutrophication, carbon sequestration, and oxygen production. They serve as vital habitats for a diverse array of marine and terrestrial species, providing living, breeding, and feeding grounds [@gardner2018 ; @Zoffoli2022 ; @jankowska2019]. Due to their proximity to human activities, seagrass meadows are directly exposed to and impacted by anthropogenic pressures. Global regression and fragmentation are currently observed due to diseases, disasters, coastal urbanization, sea reclamation, as well as fishing activities, dredging, sea level rise, coastal erosion, competition with alien species, and reduction in water quality [@nguyen2021 ; @soissons2018 ; @orth2006 ; @lin2018 ; @duffy2019]. While improvements in water quality have been recently reported in European sites, allowing an overall recovery of seagrass ecosystems at the local scale, many other coastal waters worldwide are still subjected to strong eutrophication processes [@deSantos2019 ; @Zoffoli2021]. Coastal eutrophication has been associated to anomalous accumulation of green macroalgae, the so-called green tides. Green tides produce shade and suffication over seagrass individuals, thus threatening the health of seagrass ecosystems [@Duarte2002 ; @wang2022].\n\nThe importance of seagrass meadows and the variety of ecosystem services they provide have led to the enhancement of global and regional monitoring programs for systematically surveying different Essential Oceanic Variable [@Miloslavich2018] as seagrass coverage and composition; as well as Essential Biodiversity Variable [@Pereira2013] such as seagrass taxonomic diversity; species distribution, population abundance, and phenology. Monitoring programs also prioritize the identification of threats to these ecosystems, particularly during early stages, to facilitate effective mitigation actions. Traditionally, these ecological parameters have been quantified through in situ measurements, although this approach faces several constraints over intertidal zones. Intertidal meadows are only partially exposed during low tide and can be situated in difficult-to-reach mudflats, potentially leading to inaccurate and limited estimations with conventional sampling techniques [@nijland2019]. However, satellite data have been proven effective in complenmenting in situ surveys, allowing for the rapid and consitent retrieval of EOV's over extensive seagrass meadows. [@Zoffoli2021 ; @xu2021 ; @Traganos2018 ; @coffer2023]\n\nSatellite remote sensing offers the advantage of acquiring large-scale data in real-time but presents its inherent challenges. Free access satellite data (e.g., Sentinel-2 and Landsat8/9) provide relatively low spatial resolution data (10 - 30 m) across a limited number of spectral bands. These characteristics can be a limitation to accurately discriminating seagrass from others co-existing macrophytes over the meadow. Chlorophyceae (Green Algae) and marine Magnoliopsida (Seagrass) share the same pigment composition [@ralph2002 ; @Douay2022]. As a result, their respective spectral signatures can be considered similar by a non-expert observer [@Davies2023 ; @bannari2022]. Recently, using a hyperspectral library, @Davies2023 demonstrated that the spectral resolution of Sentinel-2, might be enough for the discrimination between Magnoliopsida and Chlorophyceae. However, green tide events occur at small spatial scales that are not observable using satellite imagery [@tuya2013], especially during the initial stage of the event.\n\nRemote sensing drone acquisitions are presented as a tool that can potentially fill gaps left by satellite and in situ data. Drone can cover large expanses while recording imagery at significantly higher spatial resolutions than satellite (pixel size from cm to mm) and still capturing data at multi-spectral resolution [@fairley2022drone ; @oh2017use]. The versatility of drones allows for their application across a diverse thematic range , from coastal zone management [@adade2021 ; @casella2020 ; @angnuureng2022] to mapping the spatial distribution of species [@joyce2023 ; @tallam2023 ; @Roca2022 ; @Roman2021 ; @Brunier2022Topographic]. However, when applied to coastal habitat mapping, many studies showcase their findings with study case limited to a single flight, restricting the generalizability of their application to other sites [@Roman2021 ; @collin2019improving ; @rossiter2020uav ; @Brunier2022Topographic]. This study aimed to analyze the potential of a drone equipped with a multispectral sensor for maping intertidal macrophytes, with a particular focus on discriminating Magnoliopsida and Chlorophyceae. Ten drone flights were performed over soft-bottom intertidal areas along two European countries (France and Portugal), covering a wide range of habitats, from monospecific seagrass meadows to meadows mixed with green or red algae. A deep learning algorithm was trained and validated for macrophyte discrimination, emphasizing applicability across diverse sites without a loss of accuracy in predictions.\n\n# Material & Methods\n\n## Study sites\n\nSeven study sites distributed between France and Portugal were selected for their relatively extensive intertidal seagrass beds. Two sites are located in Gulf of Morbihan (@fig-map A), France (47.5791°N, 2.8018°W). This gulf covers an area of 115 km² and is only connect to the sea through a 900m wide channel. A total of 53 small islands are scattered across the gulf leading to 250 km of shorelines. Patchy seagrass meadows can be found on a lot of these islands. Within the Gulf of Morbihan we have chosen two sites : One is located in one of these island (Arz island). The other one is located in the sourthern part of the Gulf (Duer). Two others sites are located in Bourgneuf Bay, France (46.9849°N, 2.1488°W). This bay is a semi-enclosed macrotidal bay, protected from waves by Noirmoutier Island. With up to 6m in tidal range during spring tide, a 6 km² seagrass meadow can uncover at low tide. The sites we surveyed (L'Epine and Barbatre, @fig-map B) are located in the southernmost part of the bay, along the Noirmoutier Island, and host a monospecific *Zostera noltei* seagrass bed with very little mixing with other macrophytes. Three sites have been survey in the Ria de Aveiro Lagoon in Portugal (40.6887°N, 8.6810°W). The extent of this lagoon is about 80 km² with many narrow channels, large salt marshes and many mudflats that uncovers at low tide. It is connected to the open sea through a single channel, with a tidal lag between the North and the South of the lagoon. The southernmost site (Gafanha) is a mudflat located in an affluent of the lagoon whereas the two other sites are situated in the middle of the lagoon and are only accessible by boat (@fig-map C). These Portuguese sites were characterized by a more diverse intertidal area, where the seagrass meadow could intermingle with red algae (Rhodophyceae), brown algae (Phaeophyceae), or green algae (Chlorophyceae).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nworld_map <- sovereignty10 %>% \n  st_as_sf() %>% \n  dplyr::filter(SOVEREIGNT%in%c(\"Spain\",\"France\",\"Portugal\",\n                                \"Italy\",\"Andorra\",\n                                \"United Kingdom\",\n                                \"Switzerland\",\"Belgium\",\n                                \"Germany\",\"Luxembourg\") ) \n\nbbox_europe <- st_bbox(c(xmin = -20, ymin = 34,\n                         xmax = 20, ymax = 55) ,\n                       crs = st_crs(world_map) ) \n\nworld_map<-st_make_valid(world_map) \n\neuropean_union_map_cropped <- st_crop(world_map, bbox_europe)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  \n\n\nUnitedKingdom<-sovereignty10 %>% \n  st_as_sf() %>% \n  dplyr::filter(SOVEREIGNT%in%c(\"United Kingdom\") ) %>% \n  st_cast(\"POLYGON\") \n\nbbox_UK <- st_bbox(c(xmin = -20, ymin = 45,\n                         xmax = 20, ymax = 55) ,\n                       crs = st_crs(UnitedKingdom) ) \n\nUnitedKingdom<-st_make_valid(UnitedKingdom) \n\nUK_map_cropped <- st_crop(UnitedKingdom, bbox_UK)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \") \n\nEurope_sf<-european_union_map_cropped %>% \n  dplyr::bind_rows(UK_map_cropped) \n\nProjects<-data.frame(\n  Name=c(\n  \"Portugal - Aveiro Lagoon Flights\\nLower-Resolution: 4\\nHigher-Resolution: 1\",\n  \"France - Morbihan Gulf Flights\\nLower-Resolution: 3\\nHigher-Resolution: 3\",\n  \"France - Bourgneuf Bay Flights\\nLower-Resolution: 4\\nHigher-Resolution: 0\"\n  ) ,\n  Long=c(-8.745730,\n         -2.840592, \n         -2.111868) ,\n  Lat=c(40.617610, \n        47.578736,\n        47.024719) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  \n\nProjects_df<-Projects %>%\n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)  %>% \n  separate(Name, into=c(\"Country\",\"Bay\") ,sep=\" - \")  %>% \n  dplyr::mutate(Country=as.factor(Country) ,\n                Bay=as.factor(Bay) ) \n\nMiniworld_map <- sovereignty10 %>% \n  st_as_sf()\n\nsf_use_s2(FALSE)\n\nbbox_EU <- st_bbox(c(xmin = -30, ymin = 20,\n                         xmax = 50, ymax = 70) ,\n                       crs = st_crs(Miniworld_map) ) \n\n  MiniEU_map<-st_crop(Miniworld_map, bbox_EU)  %>% \n  st_transform(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \")  \n\n  df_P1<-Projects_df %>% \n    mutate(ID = c(1:nrow(.))) %>% \n    mutate(Site = case_when(ID == 1 ~ \"Aveiro Lagoon\",\n                            ID == 2 ~ \"Morbihan Gulf\",\n                            ID == 3 ~ \"Bourgneuf Bay\",\n                            TRUE ~ \"NA\"),\n           ID = case_when(ID == 1 ~ \"C\",\n                          ID == 2 ~ \"A\",\n                          TRUE ~ \"B\")) %>% \n    dplyr::select(c(lon,lat,ID,Site))\n    \n    scaleFUN <- function(x) paste0(sprintf(\"%.2f\", x),\"°N\")\n  \n\np1  <-\n  ggplot(MiniEU_map) +\n  geom_sf(linewidth=0.5,alpha=0.93,\n          fill=\"#CFCFCF\",colour=\"grey30\")+\n    ggforce::geom_mark_ellipse(data=df_P1,\n                 aes(x=lon,\n                     y=lat,\n                     label = ID,\n                     description=Site) ,\n                 linewidth=0.3,\n                 fill=\"goldenrod\",\n                 show.legend=F,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 con.colour = \"goldenrod4\",\n                 label.fontsize = c(25,20),\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") , \n  label.buffer = unit(5, \"mm\") ,\n  label.fill = \"grey90\")+\n  coord_sf(xlim=c(2600000,4100000) ,\n          ylim=c(1600000,3100000))+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  scale_y_continuous(labels=scaleFUN)+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\"),\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20) )\n\n\n\nggsave(\"Figures/Figure1/Map_Drone_Sites.png\",p1,width= 10, height=10)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_aveiro <- filelist[str_detect(filelist,\"mask_land_intertidal_Aveiro\")] %>% \n  read_sf()\n\nFlight_aveiro<-data.frame(\n  Name=c(\n  \"Gafanha\",\n  \"Mataducos\",\n  \"Marinha Lanzarote\"\n  ) ,\n  Description = c(\"12m and 120m Flights\",\n                  \"120m Flight\",\n                  \"120m Flight\"),\n  Long=c(-8.742485,\n         -8.646980, \n         -8.690677) ,\n  Lat=c(40.597599, \n        40.666634,\n        40.665120) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_aveiro))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\naveiro_plot <-\nggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land area\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\"))+\n  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour=\"grey30\")+\n      coord_sf(xlim=c(519749,535233) ,\n          ylim=c(4493310,4508794) )+\n  ggforce::geom_mark_ellipse(data=Flight_aveiro,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 label.fontsize = 25,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n    # theme_void()+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  geom_label(aes(x = 521000, y = 4507794, label = \"C\"), size = 20)+\n  scale_x_continuous(breaks = seq(-8.70, -8.60, by = 0.10))+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))\n\n\nggsave(\"Figures/Figure1/Map_Aveiro.png\",aveiro_plot,width= 10, height=10)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_BB <- filelist[str_detect(filelist,\"mask_land_intertidal_BB\")] %>% \n  read_sf()\n\nFlight_BB<-data.frame(\n  Name=c(\n  \"Barbâtre\",\n  \"L'Epine\"\n  ) ,\n  Description = c(\"120m Flight\",\n                  \"120m Flight\"),\n  Long=c(-2.166313,\n         -2.228239) ,\n  Lat=c(46.956420, \n        46.989515) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_BB))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\nBB_plot <- ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land area\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\"))+\n  geom_sf(data = mask_BB, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour=\"grey30\")+\n      coord_sf(xlim=c(550609,579539) ,\n          ylim=c(5189447,5218377) )+\n  ggforce::geom_mark_ellipse(data=Flight_BB,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 con.size = 2,\n                 label.fontsize = 25,\n                 label.hjust = 0.5,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  geom_label(aes(x = 553460, y = 5216442, label = \"B\"), size = 20)+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = c(0.95,0.2),\n        legend.key.size =  unit(1, \"cm\"),\n        legend.text = element_text(size = 20),\n        legend.title=element_blank(),\n        legend.background = element_rect(linewidth = 0.5, \n                                         fill = \"white\",\n                                         linetype=\"solid\", \n                                  colour =\"black\"),\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))\n\n\nggsave(\"Figures/Figure1/Map_BB.png\",width= 10, height=10)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_Morb <- filelist[str_detect(filelist,\"mask_land_intertidal_Morbihan\")] %>% \n  read_sf()\n\nFlight_Morbihan<-data.frame(\n  Name=c(\n  \"Arz\",\n  \"Duer\"\n  ) ,\n  Description = c(\"12m Flight\",\n                  \"12m and 120m Flight\"),\n  Long=c(-2.795961,\n         -2.746186) ,\n  Lat=c(47.603260, \n        47.543877) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_Morb))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\nMorbihan_plot<-ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land mask\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\"))+\n  geom_sf(data = mask_Morb, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour=\"grey30\")+\n      coord_sf(xlim=c(503019,526177) ,\n          ylim=c(5257824,5280982))+\n  ggforce::geom_mark_ellipse(data=Flight_Morbihan,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 con.size = 2,\n                 label.hjust = 0.5,\n                 label.fontsize = 25,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  geom_label(aes(x = 505000, y = 5280982-1981, label = \"A\"), size = 20)+\n  scale_x_continuous(breaks = seq(-3, -2.6, by = 0.1))+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\"),\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))\n\n\n  ggsave(\"Figures/Figure1/Map_Morbihan.png\",width= 10, height=10)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlayout <- c(\n  patchwork::area(t = 1, l = 1, b = 10, r = 10),\n  patchwork::area(t = 1, l = 11, b = 10, r = 20),\n  patchwork::area(t = 11, l = 1, b = 20, r = 10),\n  patchwork::area(t = 11, l = 11, b = 20, r = 20)\n)\n# plot(layout)\n\nTot <- magick::image_ggplot(magick::image_read(\"Figures/Figure1/Map_Drone_Sites.png\"), interpolate = T)\nBB <- magick::image_ggplot(magick::image_read(\"Figures/Figure1/Map_BB.png\"), interpolate = T)\nMor <- magick::image_ggplot(magick::image_read(\"Figures/Figure1/Map_Morbihan.png\"), interpolate = T)\nAv <- magick::image_ggplot(magick::image_read(\"Figures/Figure1/Map_Aveiro.png\"), interpolate = T)\n\n\na<-Tot+Mor+BB+Av+patchwork::plot_layout(design=layout)\n\nggsave(\"./Figures/Fig1_Map_Drone_Sites.png\",a, width= 10, height=10, dpi = 800)\n```\n:::\n\n::: {#cell-fig-map .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Fig1_Map_Drone_Sites.png\")\n```\n\n::: {.cell-output-display}\n![Sites where the different drone flights were made. A: Gulf of Morbihan, B: Bourngeuf Bay, C: Ria de Aveiro Lagoon. Light green represent terrestrial areas whereas darkgreen represent intertidal areas.\n](./Figures/Fig1_Map_Drone_Sites.png){#fig-map}\n:::\n:::\n\n\n\n\n## Drone Data\n\nAt each location, a DJI Matrice 200 quadcopter drone equipped with a Micasense RedEdge Dual MX multispectral camera was flown to take 1.2 million pixel reflectance photographs in 10 spectral bands, from blue (444 nm) to near infrared (840 nm). An angle of 90° has been maintained between the sun and the drone's route to guarantee uniform lighting conditions between flight lines. A side overlap of 70% and a front overlap of 80% between each image has been set. Images have been calibrated in reflectance using a calibration panel reflective at \\~50% provided by the camera's manufaturer and a Downwelling Light Sensor (DLS2) that was utilized to acquire irradiance data during the flight. A Structure-from-Motion photogrammetry software (Agisoft Metashape) has been used to process images to obtain multispectral orthomosaics of each flight. The workflow for orthomosaicking has remained consistent for every flight. First, tying key points were detected inside of each image and between overlapping images in order to obtain a sparse point cloud. This cloud was cleaned using reprojection accuracy metric in order to remove noisy points. A dense point cloud has been then produced using a structure from motion algorithm. A surface interpolation of this dense point cloud has been made to obtain a Digital Surface Model (DSM), used to reconstruct the multispectral ortho-image. Across all the sites, flights were made at two different altitudes : 12 m or/and 120 m. Low altitude drone flights produce ortho-images with a very high spatial resolution (8 mm per pixel), making it simple to visually distinguish between the various types of vegetation. High altitude fights on the other hand allow to cover large areas and produced images with a pixel size of 80 mm (Table 1).\n\n\n\n\n::: {.cell tbl-cap='List of drone Flight, summarising the date, the altitude and the purpose of each flight.'}\n\n```{.r .cell-code .hidden}\ndf<-data.frame(\n  Country = c(\n    rep(\"France\",5),\n    rep(\"Portugal\",4)\n  ),\n  Site = c(\n    rep(\"Morbihan\",3),\n    rep(\"Bourgneuf Bay\",2),\n    rep(\"Aveiro Lagoon\",4)\n  ),\n  Name = c(\n    \"Arz Island\",\n    \"Duer\",\n    \"Duer\",\n    \"Barbâtre\",\n    \"L'Epine\",\n    \"Inner Lagoon\",\n    \"Mataducos\",\n    \"Gafanha\",\n    \"Gafanha\"\n  ),\n  Altitude = c(\n    \"12m\",\n    \"12m\",\n    \"120m\",\n    \"120m\",\n    \"120m\",\n    \"120m\",\n    \"120m\",\n    \"120m\",\n    \"12m\"\n  ),\n  Utility = c(\n    \"Training\",\n    \"Training\",\n    \"Validation\",\n    \"Validation\",\n    \"Validation\",\n    \"Validation\",\n    \"Validation\",\n    \"Validation\",\n    \"Training\"\n  )\n)\n\nbrdr1 <- fp_border_default(color = \"black\", width = 1.5)\nbrdr2 <- fp_border_default(color = \"grey\", width = 1.5)\nbrdr3 <- fp_border_default(color = \"grey40\", width = 1.5)\n\n\nflextable(df)  %>%\n  merge_v(j = 1) %>%\n  merge_v(j = 2) %>%\n    border_remove() %>%\n    hline_top(border=brdr1) %>%\n    hline(i=5, border=brdr1) %>%\n    hline(i=1,j = 3:5, border=brdr2) %>%\n    hline(i=2, border=brdr2) %>%\n    hline(i=3, j = 2:5, border=brdr3) %>%\n    hline(i=4, j = 3:5, border=brdr2) %>%\n    hline(i=6, border=brdr2) %>%\n    hline(i=6, j = 1:2, border=brdr1) %>%\n    hline(i=7, border=brdr2) %>%\n    hline(i=8, border=brdr2) %>%\n    hline(i=9, border=brdr1) %>%\n    vline(j=2, border = brdr1) %>%\n    flextable::align(align = \"center\",part = \"all\") %>%\n    flextable::align(align = \"center\",part = \"header\") %>%\n  # set_caption(caption = \"Table 1 List of drone Flight, summarising the date, the altitude and the purpose of each flight.\") %>%\n  set_table_properties(layout = \"autofit\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Table1-1.png)\n:::\n:::\n\n\n\n\n## Field sampling\n\nBefore each flight, targets used as Ground Control Points (GCPs) were dispersed and georeferenced with a Trimble © Geo XH 6000 differential GPS (dGPS). GCPs were used to correct georeferencing imprecision of orthomosaics with an horizontal and vertical accuracy of 10cm. dGPS was also used to georeference quardrats of 0.25cm² used to assess the presence or absence of 5 key classes of vegetation : Bacillariophyceae (Diatoms forming large biofilm over the sediment during low tide), Phaeophyceae (Brown algae), Magnoliopsida (Seagrass), Chlorophyceae (Green algae) and Rhodophyceae (Red algae) (@fig-vegetation). Picture of each quadrat were taken and uploaded on the online on the Global Biodiversity Information Facility (GBIF) platform [@BedeGbif]. Each photograph was also processed to estimate the percent cover of each type of vegetation. Georeferenced hyperspectral reflectance signatures of each vegetation class were also sampled using an ASD FieldSpec HandHeld 2 spectroradiomete, which acquires reflectance between 325 and 1075 nm, with 1 nm of spectral resolution. The methodological scheme followed in this study is presented in @fig-workflow.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmicasense<-list.files(pattern = \"Wavelength_Micasense_DualMX.csv\",recursive = T) %>% \n  read.delim(sep = \";\")\n\nimglist<-\n  data.frame(path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         str_detect(path, \"High\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          str_detect(path, \"Arz\") ~ \"Arz\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          str_detect(path, \"Pred\") ~ \"Pred\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".xml\"),\n                !str_detect(path,\".enp\"))\n\ngaf_low_multi<- imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"ortho\",\n         resampled == \"FALSE\",\n         folder == \"Input\") %>%\n  slice(1) %>% \n  pull(path) %>%\n  rast() \n names(gaf_low_multi)<-c(paste0(\"B\",c(1:10)))\n\n Gafanha_low_pred<-\"./Data/image/prediction/NewPreds/AveiroLowPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif\" %>% \n     rast()\n names(Gafanha_low_pred)<-\"pred\"\n\n\n# arz_multi<- imglist %>% \n#   filter(site == \"Arz\", \n#          type == \"ortho\") %>% \n#   slice(1) %>% \n#   pull(path) %>% \n#   rast()\n#  names(arz_multi)<-c(paste0(\"B\",c(1:10)))\n# \n# arz_pred<- imglist %>% \n#   filter(site == \"Arz\", \n#          type == \"Pred\",\n#          str_detect(path, \"7by7\")) %>% \n#   slice(1) %>% \n#   pull(path) %>% \n#   rast()\n#  names(arz_pred)<-\"pred\"\n \n \n \ngaf<-rast(list(gaf_low_multi,Gafanha_low_pred)) %>% \n  as.data.frame(xy = F) %>% \n  dtplyr::lazy_dt() %>% \n  dplyr::filter(B1 != 65535,\n                pred != 0) %>%\n  as_tibble() %>% \n  rename(Class = \"pred\") %>%\n  mutate(pxl_ID = c(1:nrow(.))) %>% \n  pivot_longer(-c(Class,pxl_ID), names_to = \"band\",values_to = \"value\") %>% \n  left_join(micasense, by = c(\"band\" = \"Band_ID\")) %>% \n  group_by(Class, Wavelength) %>% \n  dplyr::summarise(mean = mean(value),\n                   sd = sd(value),\n                   max = max(value),\n                   min = min(value),\n                   median = median(value)) %>%  \n  mutate(Class = case_when(Class == 1 ~ \"Bare Sediment\",\n                              Class == 2 ~ \"D - Chloropyceae\",\n                              Class == 3 ~ \"Bare Sediment\",\n                              Class == 4 ~ \"A - MagnoliopsidaL\",\n                              Class == 5 ~ \"E - Microphytobenthos\",\n                              Class == 6 ~ \"A - Magnoliopsida\",\n                              Class == 7 ~ \"B - Phaeophyceae\",\n                              Class == 8 ~ \"C - Rhodophyceae\",\n                              Class == 9 ~ \"Sun Glint\",\n                              Class == 10 ~ \"Water\",\n                              Class == 11 ~ \"Xanthophyceae\",\n                              TRUE ~ \"NA\"))\n\nspectra<-gaf %>% \n  dplyr::filter(Class != \"Bare Sediment\",\n                Class != \"Sun Glint\",\n                Class != \"Water\",\n                Class != \"Xanthophyceae\",\n                Class != \"A - MagnoliopsidaL\") %>% \n  ggplot(aes(x=Wavelength, y = mean/10000, color = Class))+\n  geom_line(linewidth = 0.5)+\n  scale_color_manual(values=c(\"#389318\", \"#873e23\", \"#b3002d\", \"#b3ff1a\", \"#DAA520\"))+\n  ylab(\"Reflectance\")+\n  xlab(\"Wavelength (nm)\")+\n  theme_Bede()+\n  theme(axis.text.x = element_text(size = 5),\n        axis.text.y = element_text(size = 5),\n        axis.title.x = element_text(size = 7),\n        axis.title.y = element_text(size = 7),\n        legend.position = c(0.2, 0.7),\n        plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),\n        legend.title=element_blank(),\n        legend.text = element_text(size = 5),\n        legend.key.size = unit(0.25, \"cm\"),\n        legend.text.align = 0,\n        panel.border = element_blank(), \n        panel.background = element_blank(),\n        axis.line = element_line(color=\"black\"))\n\nggsave(\"Figures/Spectral_shapes.png\",spectra, bg = \"transparent\",  height = 2, width = 3, dpi = 2000)\n\nsp <- image_ggplot(magick::image_read(\"Figures/Spectral_shapes.png\"), interpolate = T)\n\n# sp<-ggplot()+\n#   geom_spatraster_rgb(data = rast(\"Figures/Spectral_shapes.png\"),maxcell = 4009008)+\n#   coord_equal()+\n#     theme_void()+\n#   theme(axis.text = element_blank(), \n#         axis.title = element_blank(), \n#         axis.ticks = element_blank(),\n#         panel.background = element_rect(fill='transparent'),\n#         plot.background = element_rect(fill='transparent', color=NA),\n#         axis.ticks.length = unit(0, \"pt\"),\n#         panel.grid.major=element_blank(), \n#         panel.grid.minor=element_blank(), \n#         plot.margin = margin(0, 0, 0, 0, \"pt\"))\n# \n# \n# Magno <- magick::image_read(\"Data/Pictures/Figure2/Magnoliopsida_cropped2.png\")%>%\n#   # magick::image_rotate(90)%>%\n#   grid::rasterGrob()\n# \n# Brown <- magick::image_read(\"Data/Pictures/Figure2/Phaeophyceae_cropped.png\")%>%\n#   grid::rasterGrob()\n# \n# Red <- magick::image_read(\"Data/Pictures/Figure2/Rhodophyceae_cropped.png\")%>% \n#   grid::rasterGrob()\n# \n# green <- magick::image_read(\"Data/Pictures/Figure2/Chlorophyceae_cropped.png\")%>% \n#   grid::rasterGrob()\n# \n# MPB <- magick::image_read(\"Data/Pictures/Figure2/Bacillariophyceae_cropped.png\")%>% \n#   grid::rasterGrob()\n# \n# Lines<-data.frame(x=c(10,20,10),\n#                   y=c(-0.1,-0.1,10),\n#                   xend=c(10,20,30),\n#                   yend=c(20,20,10))\n# labels<-data.frame(name = c(\"A\",\"B\",\"C\",\"D\",\"E\"),\n#                    x= c(1,11,21,11,21),\n#                    y=c(19,19,19,1,1))\n# \n# a<-ggplot(expand_grid(x = 0:30,y=0:20),aes(x = x, y = y) ) +\n#   geom_point(alpha=0) +\n#   coord_fixed()+\n#   ggplot2::annotation_custom(Magno, 0,10, 0, 20) +\n#   ggplot2::annotation_custom(green, 10,20, 10, 20)+\n#   ggplot2::annotation_custom(Red, 10,20, 0, 10)+\n#   ggplot2::annotation_custom(Brown, 20,30, 10, 20)+\n#   ggplot2::annotation_custom(MPB, 20,30, 0,10)+\n#   geom_segment(data=Lines,aes(x=x,y=y,xend=xend,yend=yend),\n#                colour=\"white\",linewidth=2)+\n#   ggplot2::annotation_custom(ggplotGrob(spectra), 5,25, 5,15)+\n#   geom_label(data=labels,aes(x=x,y=y,label=name), size = 10)+\n#   theme_void()+\n#   theme(axis.title.x = element_blank(),\n#         axis.title.y = element_blank(),\n#         axis.text.x = element_blank(),\n#         axis.text.y = element_blank(),\n#         axis.ticks.x = element_blank(),\n#         axis.ticks.y = element_blank(),\n#         plot.margin = grid::unit(c(0.01,0.01,0.01,0.01), \"mm\"),\n#         # rect = element_blank(),\n#         panel.margin = grid::unit(c(0.01, 0.01, 0.01, 0.01), \"mm\"))\n# \n# Lines1<-data.frame(x=c(0,10,20,30),\n#                   y=c(10,0,0,0),\n#                   xend=c(40.1,10,20,30),\n#                   yend=c(10,10,10,10))\n# \n# labels1<-data.frame(name = c(\"A\",\"B\",\"C\",\"D\",\"E\"),\n#                    x= c(1,1,11,21,31),\n#                    y=c(29,9,9,9,9))\n# \n# ggplot(expand_grid(x = 0:40,y=0:30),aes(x = x, y = y) ) +\n#   geom_point(alpha=0) +\n#   coord_fixed()+\n#   ggplot2::annotation_custom(Magno, 0,10, 10, 30) +\n#   ggplot2::annotation_custom(Brown, 0,10, 0, 10)+\n#   ggplot2::annotation_custom(Red, 10,20, 0, 10)+\n#   ggplot2::annotation_custom(green, 20,30, 0, 10)+\n#   ggplot2::annotation_custom(MPB, 30,40, 0,10)+\n#   geom_segment(data=Lines1,aes(x=x,y=y,xend=xend,yend=yend),\n#                colour=\"white\",linewidth=2)+\n#   ggplot2::annotation_custom(ggplotGrob(spectra), 10,40, 10,30)+\n#   geom_label(data=labels1,aes(x=x,y=y,label=name), size = 10)+\n#   theme_void()+\n#   theme(axis.title.x = element_blank(),\n#         axis.title.y = element_blank(),\n#         axis.text.x = element_blank(),\n#         axis.text.y = element_blank(),\n#         axis.ticks.x = element_blank(),\n#         axis.ticks.y = element_blank(),\n#         plot.margin = grid::unit(c(0.01,0.01,0.01,0.01), \"mm\"),\n#         # rect = element_blank(),\n#         panel.margin = grid::unit(c(0.01, 0.01, 0.01, 0.01), \"mm\"),\n#         legend.text.align = 0)\n\nMagno<-ggplot()+\n  geom_spatraster_rgb(data = rast(\"Data/Pictures/Figure2/Magnoliopsida_cropped2.png\"))+\n  coord_equal()+\n  geom_label(aes(x = 50,y= 950, label = \"A\"))+\n    theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nBrown<-ggplot()+\n  geom_spatraster_rgb(data = rast(\"Data/Pictures/Figure2/Pheophyceae_cropped.png\"))+\n  coord_equal()+\n  geom_label(aes(x = 50,y=450, label = \"B\"))+\n    theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(),\n        panel.grid.minor=element_blank(),\n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nRed <- ggplot()+\n  geom_spatraster_rgb(data = rast(\"Data/Pictures/Figure2/Rodophyceae_cropped.png\"))+\n  coord_equal()+\n  geom_label(aes(x = 50,y=450, label = \"C\"))+\n    theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\n\ngreen <- ggplot()+\n  geom_spatraster_rgb(data = rast(\"Data/Pictures/Figure2/Chlorophyceae_cropped.png\"))+\n  coord_equal()+\n  geom_label(aes(x = 50,y=450, label = \"D\"))+\n    theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n  \n  \n\nMPB <- ggplot()+\n  geom_spatraster_rgb(data = rast(\"Data/Pictures/Figure2/Bacillariophyceae_cropped.png\"))+\n  coord_equal()+\n  geom_label(aes(x = 50,y=450, label = \"E\"))+\n  theme_void()+\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank(), \n        axis.ticks.length = unit(0, \"pt\"),\n        panel.grid.major=element_blank(), \n        panel.grid.minor=element_blank(), \n        plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nlayout <- c(\n  patchwork::area(t = 10, l = 0, b = 30, r = 10),\n    patchwork::area(t = 0, l = 0, b = 10, r = 10),\n    patchwork::area(t = 0, l = 10, b = 10, r = 20),\n    patchwork::area(t = 0, l = 20, b = 10, r = 30),\n    patchwork::area(t = 0, l = 30, b = 10, r = 40),\n    patchwork::area(t = 10, l = 10, b = 30, r = 40)\n)\n\nlayout1 <- c(\n  patchwork::area(t = 1, l = 1, b = 20, r = 10),\n    patchwork::area(t = 20, l = 1, b = 29, r = 10),\n    patchwork::area(t = 20, l = 9, b = 29, r = 18),\n    patchwork::area(t = 20, l = 17, b = 29, r = 26),\n    patchwork::area(t = 20, l = 25, b = 29, r = 34),\n    patchwork::area(t = 1, l = 9, b = 20, r = 34)\n)\n\n# plot(layout1)\n\nplot<-Magno+\n  Brown+\n  Red+\n  green+\n  MPB+\n  sp+\n  patchwork::plot_layout(design=layout1)\n\nggsave(\"Figures/Spectral_shapes_total.png\",plot, height = 7, width = 10, dpi = 800)\n```\n:::\n\n::: {#cell-fig-vegetation .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figures/Spectral_shapes_total.png\")\n```\n\n::: {.cell-output-display}\n![Class of vegetation used to train the CNN model and their standardised spectral signature](Figures/Spectral_shapes_total.png){#fig-vegetation width=100%}\n:::\n:::\n\n\n\n\n## Intertidal vegetation mapping\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlayout<-\"Data/Figure2_Workflow\" %>%\n  list.files(\"V4.txt\",full.names = T, recursive = T) %>%\n  read_delim(delim = \"\\t\", escape_double = FALSE,\n    trim_ws = TRUE) %>%\n  dplyr::filter(Evaluate == T)\n\n\nlayout$Text<- gsub(\"alaligne\",\"\\n\", layout$Text)\n\nboxes<- layout %>% \n  dplyr::filter(Type == \"Box\",\n                shape == \"square\")\n\n\ntext<- layout %>% \n  dplyr::filter(Type == \"Box\")\n\ndiamonds<- layout %>% \n  dplyr::filter(Type == \"Box\",\n                shape == \"diamond\")\ndiff = 0.1\nfor (i in 1:nrow(diamonds)) {\n  diam_a<-diamonds[i,]\n  \ndf<-data.frame(  \n  x = c(diam_a$xmin - diff, diam_a$xmin + diff, diam_a$xmax + diff, diam_a$xmax - diff),\n  y = c(diam_a$ymin, diam_a$ymax, diam_a$ymax, diam_a$ymin),\n  Type = rep(diam_a$Type,4),\n  Text = rep(diam_a$Text,4),\n  Color = rep(diam_a$color,4),\n  Evaluate = rep(diam_a$Evaluate,4),\n  Resolution =  rep(diam_a$Resolution,4),\n  Evaluate_bigbox = rep(diam_a$Evaluate_bigbox,4),\n  alpha = rep(diam_a$alpha,4),\n  shape =  rep(diam_a$shape,4)\n)\n  if(i == 1){\n    diamond_list<-list(df)\n  }else{\n    diamond_list[[i]]<-df\n  }\n}\n\n\n\nArrows<- layout %>% \n  dplyr::filter(Type == \"Arrow\",\n                Evaluate == T)\n\nGroup_box<-layout %>% \n  dplyr::filter(Type == \"Box\",\n                Evaluate_bigbox == T) %>% \n  group_by(Group) %>% \n  dplyr::summarise(xmin = min(xmin)-0.1,\n                   xmax = max(xmax)+0.1,\n                   ymin = min(ymin)-0.1,\n                   ymax = max(ymax)+0.1,\n                   alpha = 0.1,\n                   color = color)\n\nresolution_box<-layout %>% \n  dplyr::filter(Type == \"Box\",\n                Resolution != \"NA\") %>% \n  group_by(Resolution) %>% \n  dplyr::summarise(xmin = min(xmin)-0.1,\n                   xmax = max(xmax)+0.1,\n                   ymin = min(ymin)-0.1,\n                   ymax = max(ymax)+0.1,\n                   alpha = 0.1,\n                   color = color)\n\nlegend = data.frame(color = unique(layout$color)) %>% \n  dplyr::filter(!is.na(color)) %>% \n  mutate(label = case_when(color == \"#EA6155\" ~ \"Input Data\",\n                           color == \"#DC9614\" ~ \"Pre-processing\",\n                           color == \"#52A4DA\" ~ \"Model Building\",\n                           color == \"#79DA52\" ~ \"Validation\",\n                           color == \"#DA9652\" ~ \"Output Data\",\n                           color == \"darkcyan\" ~ \"Final Product\",\n                           color == \"#DA5273\"  ~ \"Prediction\",\n                           TRUE ~ \"NA\")) %>% \n  arrange\n\nsegment<-layout %>% \n  dplyr::filter(Type == \"Segment\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nbuilding <- F\n\nif(building == T){\n  \ntext_size = 6 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave\nline_size =1 ####arrow_size 0.3 to export  1 to for R plotting\n\nlegend_size = 1 #### 0.3 to export, 1 for R ploting\nlegend_text = 10 #### 4 to export, 10 for R ploting\n}else{\n  \ntext_size = 1.85 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave\nline_size =0.3 ####arrow_size 0.3 to export  1 to for R plotting\n\nlegend_size = 0.3 #### 0.3 to export, 1 for R ploting\nlegend_text = 5 #### 5 to export, 10 for R ploting\n  \n}\n\n\na<-ggplot()+\n  \n  statebins:::geom_rrect(data = Group_box,\n            mapping = aes(xmin = xmin,\n                          xmax= xmax,\n                          ymin = ymin,\n                          ymax = ymax),\n            alpha = 0.05,\n            size = 0.2,\n            show.legend = F,\n            fill = Group_box$color,\n            color = \"black\")+\n  \n    statebins:::geom_rrect(data = resolution_box,\n            mapping = aes(xmin = xmin,\n                          xmax= xmax,\n                          ymin = ymin,\n                          ymax = ymax,\n                          alpha = rep(c(\"Input Data\", \"Pre-processing\", \"Model Building\", \"Prediction\", \"Validation\", \"Output Data\", \"Final Product\"),2)),\n            fill = \"NA\",\n            linetype = 2,\n            size = 0.4,\n            color = \"black\")+\n  \n  scale_alpha_manual(name = \"\", \n                     values = c(1,1,1,1,1,1,1),\n                     labels = c(\"Input Data\", \"Pre-Processing\", \"Model Building\", \"Prediction\", \"Validation\", \"Output Data\", \"Final Product\"),\n                     guide = guide_legend(ncol = 1, override.aes = list(fill = c(\"#f94144\", \"#f3722c\", \"#f8961e\", \"#f9c74f\", \"#90be6d\", \"#43aa8b\", \"#577590\"),\n                                                                        shape = c(22),\n                                                                        linetype = c(1),\n                                                                        alpha = c(0.5)\n                                                                        )\n                                          )\n                     )+\n  \n  statebins:::geom_rrect(data = boxes,\n            mapping = aes(xmin = xmin,\n                          xmax= xmax,\n                          ymin = ymin,\n                          ymax = ymax\n                          ),\n            size = 0.2,\n            alpha = as.numeric(boxes$alpha),\n            fill = boxes$color,\n            color = \"black\")\n  \n  for(i in 1:length(diamond_list)){\n    poly_i<-diamond_list[[i]]\n    a<-a+\n      geom_polygon(data = poly_i, \n                   mapping = aes(x = x, \n                                 y = y\n                                 ),\n                  size = 0.2,\n                   alpha = poly_i$alpha,\n                   fill = poly_i$Color,\n                   color = \"black\")\n    \n  }\n\nif(building == T){\n    a<-a+\n    geom_text(data = text,\n            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (ID)), size = text_size)\n  \n}else{\n    a<-a+\n    geom_text(data = text,\n            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (Text)), size = text_size)\n}\n\n\n  a<-a+\n    geom_segment(data = Arrows, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),\n    size=line_size, linejoin = \"mitre\", lineend = \"butt\",\n    arrow = arrow(length = unit(1, \"mm\"), type= \"closed\")\n    )+\n    geom_segment(data = segment, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),\n    size=line_size, linejoin = \"mitre\", lineend = \"square\"\n    )+\n  \n  geom_text(aes(x = -5.4, y = -2, label = \"Flight height: 12 m \\n Pixel size : 8 mm\", angle = 90), size = text_size+1)+\n  \n  geom_text(aes(x = -5.4, y = -6.8, label = \"Flight height: 120 m \\n Pixel size : 80 mm\", angle = 90), size = text_size+1)+\n  \n  geom_text(aes(x = 4, y = 1.75, label = \"Pre Processing\"), size = text_size)\n    \n  if(building == F){\n  a<- a+ theme_void()\n  }\n  \n  a<-a+\n  theme(legend.position = c(0.88,0.3),\n        legend.text = element_text(size = legend_text),\n        legend.key.size = unit(legend_size, 'cm')\n        )+\n  scale_x_continuous(breaks = scales::breaks_width(0.5))+\n  scale_y_continuous(breaks = scales::breaks_width(0.5))\n  \nif(building == T){\na\n}else{\n  ggsave(\"Figures/Figure3_workflow.png\",a, width = 1920, height = 1129, units = \"px\")\n}\n```\n:::\n\n::: {#cell-fig-workflow .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Figure3_workflow.png\")\n```\n\n::: {.cell-output-display}\n![Schematic representation of the workflow. Diamonds represent input or output data, and rectangles represent Python processing algorithms. The overall workflow of this study is divided into two distinct parts based on the spatial resolution of the drone flights: high-resolution flights were utilized for training and prediction of the CNN model, whereas low-resolution flights were solely employed for prediction purposes.](./Figures/Figure3_workflow.png){#fig-workflow width=100%}\n:::\n:::\n\n\n\n\nThe spectral similarities of reflectance signatures between intertidal green macrophytes (Magnoliopsida and Chlorophyceae) make their discrimination challenging using simple classification algorithms (@fig-vegetation F). To overcome this challenge, a deep learning classification method was developed, trained, validated, and applied to each drone flight (@fig-workflow).\n\n### Neural Network model building\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf_training<-\"Data/training/TrainandValid_NewStanRawMetrics.csv\" %>% \n  read_delim(delim = \";\", escape_double = FALSE, trim_ws = TRUE) %>% \n  dplyr::filter(True_Class != \"Xanthophyceae\",\n                True_Class != \"Deep_Sediment\",\n                True_Class != \"Water\",\n                True_Class != \"SunGlint\",\n                True_Class != \"Bare_Sediment\") %>% \n  mutate(True_Class = case_when(True_Class == \"Clorophyta\" ~ \"Chlorophyceae\",\n                               True_Class == \"Rhodphyta\" ~ \"Rhodophyceae\",\n                               True_Class == \"MPB\" ~ \"Bacillariophyceae\",\n                               True_Class == \"Magnoliosida\" ~ \"Magnoliopsida\",\n                               True_Class == \"Phaeophyta\" ~ \"Phaeophyceae\",\n                               True_Class == \"Low_SPC\" ~ \"Magnoliopsida\",\n                               TRUE ~ \"NA\"\n                               )) %>% \n  group_by(True_Class) %>% \n  summarise(n = n()) %>% \n  rename(True = \"True_Class\", \n         Training_Pixels = \"n\")\n\nwrite.csv(df_training,\"Data/training/TrainandValid_NewStanRawMetrics_Processed.csv\",row.names = F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf_training<-read.csv(\"Data/training/TrainandValid_NewStanRawMetrics_Processed.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf_validation<-\"Data/accuracy_assesment_low&high_flights.csv\" %>% \n  read_delim(delim = \",\", escape_double = FALSE, trim_ws = TRUE) %>% \n  dplyr::filter(True != \"Sediment\",\n                True != \"Sun Glint\",\n                True != \"Water\",\n                True != \"Xanthophyceae\") %>% \n  mutate(True = case_when(True == \"Green Algae\" ~ \"Chlorophyceae\",\n                          True == \"Microphytobenthos\" ~ \"Bacillariophyceae\",\n                          True == \"Rhodophyceae\" ~ \"Rhodophyceae\",\n                          True == \"Pheophyceae\" ~ \"Phaeophyceae\",\n                          TRUE ~ True)) %>% \n  group_by(True) %>% \n  summarise(n = n()) \n\nwrite.csv(df_validation,\"Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv\",row.names = F)\n```\n:::\n\n::: {.cell tbl-cap='Vegetation Classes of the model and the number of pixels used to train and validate each class'}\n\n```{.r .cell-code .hidden}\ndf_validation<-read.csv(\"Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv\")\n\ndf_training %>% \n  left_join(df_validation, by = \"True\") %>% \n  rename(`Validation Pixels` = \"n\",\n         Class = \"True\",\n         `Training Pixels` = \"Training_Pixels\") %>% \n  flextable() %>% \n  # border_remove() %>%\n  flextable::align(align = \"center\",part = \"all\") %>%\n  flextable::align(align = \"center\",part = \"header\") %>% \n  set_table_properties(layout = \"autofit\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-jats/Table2-1.png)\n:::\n:::\n\n\n\n\n\nA dataset containing photo-interpreted drone reflectance pixels was built to train a Convolutional Neural Network (CNN) model with 2 hidden layers. The training pixels were categorized into 7 different classes, representing the various habitats encountered at the different study sites: Sediment, Water, Chlorophyceae, Magnoliopsida, Bacillariophyceae, Phaeophyceae and Rhodophyceae. Only low-altitude flights (Table 1) were used for training purposes because of their 8 mm spatial resolution allowing to avoid spectral sub-pixel mixing and to accurately visually differentiate various vegetation classes. More than 418,000 pixels at 8 mm resolution from the 3 training flights have been used to train the model (Table 2). Twenty one variables were used by the model as predictors: 10 raw spectral bands of the Micasense RedEdge Dual MX multispectral camera (ranging from 444 nm to 840 nm), the same 10 spectral bands standardized using a min/max transformation ([@eq-std] ; @cao2017) and the NDVI (@eq-ndvi). Standardisation of spectral bands is used to eliminate the scaling differences between spectra and to limit the effect of biomass on the shape of the spectra [@Douay2022 ; @Davies2023].\n\n$$\nR_{i}^{*}(\\lambda) = \\frac{R_{i}(\\lambda) - min(R_{i})}{max(R_{i})- min(R_{i})}\n$$ {#eq-std}\n\nwhere $R_{i}(\\lambda)$ is the reflectance at the wavelength $(\\lambda)$ of each individual spectra $(i)$, $min(R_{i})$, and $max(R_{i})$ are the minimum and maximum value of the spectra $(i)$\n\n$$\nNDVI = \\frac{R(840nm)-R(668nm)}{R(840nm)+R(668nm)}\n$$ {#eq-ndvi}\n\nwhere $R(840nm)$ is the reflectance at 840 nm and $R(668nm)$ is the reflectance at 668 nm.\n\n### Validation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf<-\"Output/Validation_data\" %>% \n  list.files(\"ResultsNewNN_NoXanthowithNDVIWithOldandBoat.csv\",recursive = T, full.names = T) %>% \n  read.csv() %>% \n  as_tibble() %>% \n  rename(Truth_ID = \"Truth\") %>% \n  mutate(Truth =  case_when(Truth_ID == 1 ~ \"Bare_Sediment\",\n                          Truth_ID == 2 ~ \"Chlorophyta\",\n                          Truth_ID == 3 ~ \"Bare_Sediment\",\n                          Truth_ID == 4 ~ \"Magnoliosida\",\n                          Truth_ID == 5 ~ \"Bare_Sediment\",\n                          Truth_ID == 6 ~ \"Magnoliosida\",\n                          Truth_ID == 7 ~ \"Phaeophyta\",\n                          Truth_ID == 8 ~ \"Rhodphyta\",\n                          Truth_ID == 9 ~ \"SunGlint\",\n                          Truth_ID == 10 ~ \"Water\",\n                          Truth_ID == 11 ~ \"Xanthophyceae\",\n                          Truth_ID == 12 ~ \"Spartina\",\n                          Truth_ID == 41 ~ \"Bleached seagrasses\",\n                          TRUE ~ \"NA\"),\n         Pred_Class = case_when(Pred_Class == \"Clorophyta\" ~ \"Chlorophyta\",\n                                Pred_Class == \"Rhodphyta\" ~ \"Rhodphyta\",\n                                Pred_Class == \"Deep_Sediment\" ~ \"Bare_Sediment\",\n                                Pred_Class == \"MPB\" ~ \"Bare_Sediment\",\n                                (Pred_Class == \"Low_SPC\" & NDVI > 0.2) ~ \"Magnoliosida\",\n                                (Pred_Class == \"Low_SPC\" & NDVI <= 0.2 )~ \"Bare_Sediment\",\n                          TRUE ~ Pred_Class)) %>% \n  dplyr::filter(Truth != \"Water\",\n                Truth  != \"Spartina\",\n                Truth != \"SunGlint\",\n                Truth != \"Bleached seagrasses\",\n                Truth != \"Xanthophyceae\",\n                # Pred_Class != \"Low_SPC\",\n                Pred_Class != \"Xanthophyceae\",\n                 Pred_Class != \"Water\",\n                 Pred_Class != \"SunGlint\",\n                !Flight == \"Handfisher_1_old\",\n                !Flight == \"Handfisher_2_old\",\n                !Flight == \"Handfisher_2\") %>%\n  dplyr::select(-NDVI)\n\n\n\ncount_validation_pixel<-nrow(df)\nwrite.csv(count_validation_pixel,\"Output/count_validation_pixel.csv\", row.names = F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ncount_validation_pixel<-read.csv(\"Output/count_validation_pixel.csv\") %>% \n  pull(x)\n```\n:::\n\n\n\n\n\nThe CNN model was applied to all the 9 flights at both 12 and 120 m of altitude. In situ information on georeferenced class type and percent cover collected during each flight has been used to assess the CNN accuracy. These images were used to construct a validation dataset indicating the presence or absence of each class. Additionally to the quadrat-based validation dataset, polygons of each class were photo interpreted in order to increase the number of pixels of the validation dataset. A confusion matrix, along with precision metrics such as the global accuracy, the sensitivity, the specificity, and the Kappa coefficient, was generated for each of the study sites. Finally each validation matrix has been merge to create a unique matrix of the model. A total of 536,000 pixels has been used to globally validate the CNN model.\n\n# Results\n\n## Classification\n\nA total of 9 prediction maps corresponding to the 9 drone flights were obtained. Each prediction map is associated with a probability map, indicating the probability of the selected class for every pixel. The low-altitude flight conducted in Gafanaha, Portugal, represents the site with the highest complexity (@fig-GafLow). Among the 5 vegetation classes on which the CNN model was trained, 4 were present on this site. On this site, there is a mixture of Chlorophyceae and Rhodophyceae over the seagrass meadow. This is also where Bacillariophyceae is most abundant. Although the seagrass bed is solely composed of *Zostera noltei*, various colors can be observed: dark green (indicating healthy beds with 100% coverage) and whitish/brown (indicating beds where leaves are dying). Regardless of the color, the meadow is predicted as Magnoliopsida by the CNN model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimglist<-\n  data.frame(path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         new = case_when(str_detect(path, \"no_Xantho\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         col = case_when(str_detect(path, \"colored\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".aux.xml\"))\n\nshp_roi<-\"Data/reflectance_calibration_low_&_high_flights/\" %>%\n  list.files(pattern = \".shp\", recursive = T, full.names = T) %>%\n  read_sf() %>%\n  mutate(ID = case_when(name == \"Microphytobenthos\" ~ 1,\n                        name == \"ZOS\" ~ 2,\n                        name == \"BL\" ~ 3,\n                        name == \"SED\" ~ 4,\n                        name == \"GRE\" ~ 5,\n                        name == \"RED\" ~ 6,\n                        name == \"Xanthophyceae\" ~ 7)) %>% \n  as(\"Spatial\") %>% \n  vect()\n\n\nzoom_extent<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Gafanha_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\nbackground_GafHigh<-\"Data/shp/Aveiro\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"background_Gafanha_high\")) %>% \n  pull(path) %>% \n  read_sf()\n###### Preview ###########\n\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_aveiro <- filelist[str_detect(filelist,\"mask_land_intertidal_Aveiro\")] %>% \n  read_sf()\n\nFlight_aveiro<-data.frame(\n  Name=c(\n  \"Gafanha\"\n  ) ,\n  Description = c(\"12m and 120m Flights\"),\n  Long=c(-8.742485) ,\n  Lat=c(40.597599) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_aveiro))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\n\np1_background<- read_sf(\"Data/shp/Aveiro/Background_p1_aveiro.shp\")\n\np1<-ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land area\"),\n                    values = c(\"#7DC27D\", \"#BDBDBD\"))+\n  geom_sf(data = p1_background, fill = \"white\",show.legend = F, linewidth=0.05,alpha=0.93,colour=\"transparent\")+\n  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),show.legend = F, linewidth=0.05,alpha=0.93,colour=\"grey30\")+\n\n      coord_sf(xlim=c(519749,535233) ,\n          ylim=c(4493310,4508794) )+\n  ggforce::geom_mark_ellipse(data=Flight_aveiro,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 label.fontsize = 18,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n    # theme_void()+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  # geom_label(aes(x = 521000, y = 4507794, label = \"C\"), size = 20)+\n  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))+\n  theme_void()\n######### RGB #########\n Gafanha_low_ortho<-imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"ortho\",\n         resampled == \"TRUE\",\n         col == \"TRUE\") %>%\n  pull(path) %>% \n  rast() \n names(Gafanha_low_ortho)<-c(\"B1\", \"B3\", \"B5\",\"alpha\")\n\n values(Gafanha_low_ortho)[values(Gafanha_low_ortho$alpha) == 0] = NA\n  \n Gafanha_low_ortho_zoomed<-Gafanha_low_ortho %>% \n   crop(zoom_extent)\n \n \n map_extent_full<- st_as_sf(as.polygons(ext(Gafanha_low_ortho)))\n sf::st_crs(map_extent_full)<-st_crs(Gafanha_low_ortho)\n \n\n  map_extent_zommed<- st_as_sf(as.polygons(ext(Gafanha_low_ortho_zoomed)))\n sf::st_crs(map_extent_zommed)<-st_crs(Gafanha_low_ortho_zoomed)\n \n \n rgb_Gafanha_low_zoomed<-ggplot()+\n   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho_zoomed, \n                                  r = 3,\n                                  g = 2,\n                                  b = 1)+\n   theme_Bede_Map()+\n   geom_sf(data = zoom_extent, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 1)+\n   coord_sf(crs = 4326)+\n     theme_void()\n\n\n\n scale_labels<-data.frame(x = c(-8.74368, -8.743565,-8.74342),\n                          y = c(rep(40.59792,3)),\n                          text = c(\"0\",\"10\",\"20 m\"))\n \n \n \n  rgb_Gafanha_low<- ggplot()+\n  scale_fill_manual(\"\", \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  geom_sf(data = background_GafHigh,\n          fill = \"white\",\n          show.legend = F,\n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"white\")+\n  geom_sf(data = background_GafHigh,\n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"grey30\")+\n   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho,\n         r = 1,\n         g = 2,\n         b = 3,\n         maxcell = 4010533\n         )+\n    ggspatial::annotation_scale(location = \"tl\",\n                                text_cex=2)+\n      annotation_custom(ggplotGrob(p1),\n                        xmin = -8.7430,\n                        xmax = -8.742702,\n                        ymin = 40.5970515, \n                        ymax = 40.5974) +\n   theme_Bede_Map()+\n   geom_sf(data = zoom_extent, \n           fill = \"transparent\",\n           colour = \"black\",\n           linetype = \"dashed\", \n           linewidth = 1)+\n   coord_sf(crs = 4326)+\n  annotation_custom(ggplotGrob(rgb_Gafanha_low_zoomed),\n                    xmin = -8.7430,\n                    xmax=-8.7427,\n                    ymin = 40.5977) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),\n                              y=c(40.5976275,40.5979,40.5975373,40.59771),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  theme(axis.title = element_blank(),\n        axis.text.y = element_text(size = 20),\n        axis.text.x = element_text(size = 20, angle = 20, hjust = 1))+\n    scale_x_continuous(limits = c(-8.7437, -8.74275), breaks = -8.743)+\n    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)\n\n \n \n  \n  \n\nggsave(\"Figures/Gaf_Low_RGB.png\",rgb_Gafanha_low , width = 1920*4, height = 1129*4, units = \"px\")\n\nzoom_extent<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Gafanha_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\n####### Zoomed map ########\n\n\nGafanha_low_pred_zoomed<-imglist %>% \nfilter(site == \"Gafanha\",\n       alt == \"low\",\n       type == \"Pred\",\n       resampled == \"FALSE\",\n       folder == \"Input\",\n       new == \"TRUE\") %>% \n  pull(path) %>% \n  rast()\nnames(Gafanha_low_pred_zoomed)<-\"layer\"\n\nGafanha_low_pred_zoomed<-Gafanha_low_pred_zoomed %>% \n  crop(zoom_extent)\nGafanha_low_pred_zoomed<-as.factor(Gafanha_low_pred_zoomed)\n\nGafanha_low_pred_map_zoomed<-ggplot()+\n  tidyterra::geom_spatraster(data = Gafanha_low_pred_zoomed, mapping = aes(fill = layer))+\n  geom_sf(data = zoom_extent, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 1)+\n  coord_sf(crs = 4326)+\n  scale_fill_manual(values=c(\"#70543e\", \"#b3ff1a\",\"#70543e\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", NA, \"#42c9bc\"), na.value = NA)+\n  theme_void()+\n  # coord_equal()+\n  theme(axis.text.x = element_blank(),\n      axis.text.y = element_blank(),\n      axis.title = element_blank())+\n  theme(legend.position = \"none\")\n # Gafanha_low_pred_map_zoomed\n\n####  Overall map\nGafanha_low_pred<-imglist %>% \nfilter(site == \"Gafanha\",\n       alt == \"low\",\n       type == \"Pred\",\n       # resampled == \"TRUE\",\n       new == \"TRUE\") %>% \n  pull(path) %>% \n  rast()\nnames(Gafanha_low_pred)<-\"layer\"\n\n\nvalues(Gafanha_low_pred)[values(Gafanha_low_pred) == 0] = NA\n\nGafanha_low_pred<-Gafanha_low_pred %>% \n  as.factor()\n\n####### Pred ######\n\n\nGafanha_low_pred_map <-\n  ggplot()+\n  scale_fill_manual(\"\", \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  geom_sf(data = background_GafHigh,\n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"grey30\")+\n  # geom_sf(data = background_GafHigh,\n  #         fill = \"white\",\n  #         show.legend = F, \n  #         linewidth=0.05,\n  #         alpha=1,\n  #         colour=\"white\")+\n   ggnewscale::new_scale(\"fill\")+\n    tidyterra::geom_spatraster(data = Gafanha_low_pred, \n                               mapping = aes(fill = layer),\n                               maxcell = 500832*8)+\n  geom_sf(data = zoom_extent, \n          fill = \"transparent\", \n          colour = \"black\",\n          linetype = \"dashed\", \n          linewidth = 1)+\n  coord_sf(crs = 4326)+\n  annotation_custom(ggplotGrob(Gafanha_low_pred_map_zoomed), \n                    xmin = -8.7430,\n                    xmax=-8.7427, \n                    ymin = 40.5977) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),\n                              y=c(40.5976275,40.5979,40.5975373,40.59771),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA,NA,NA),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorophyceae\",\n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n  theme_Bede_Map()+\n  # coord_equal()+\n   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),\n         # axis.text.y = element_text(size = 20),\n         axis.text.y = element_blank(),\n         axis.title = element_blank(),\n         legend.background = element_blank(),\n         legend.position = c(0.98,0.3),\n         legend.text = element_text(size = 20),\n         legend.key.size = unit(1,\"cm\"))+\n    scale_x_continuous(limits = c(-8.7437, -8.74275), breaks = -8.743)+\n    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)\n\n\nggsave(\"Figures/Gaf_Low_Pred.png\",Gafanha_low_pred_map , width = 1920*4, height = 1129*4, units = \"px\")\n\n################# PLOT AND SAVING ###########\n\nplot_Gaf_Low<-rgb_Gafanha_low+\n  Gafanha_low_pred_map\n \n\n\n\nggsave(\"Figures/Maps Pred/FigX-Gaf_Low_Pred.png\",plot_Gaf_Low , width = 1920*4, height = 1009*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-GafLow .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Maps Pred/FigX-Gaf_Low_Pred.png\")\n```\n\n::: {.cell-output-display}\n![RGB orthomosaic (Left) and Prediction (Right) of the low altitude flight of Gafanaha, Portugal. The total extent of this flight is 3000m² with a resolution of 8 mm per pixel. Background colors means intertidal area (Light Green) and land area (Light Grey). The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.](./Figures/Maps Pred/FigX-Gaf_Low_Pred.png){#fig-GafLow width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimglist<-\n  data.frame(\"Data\",\n             path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         str_detect(path, \"High\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          str_detect(path,\"AveiroHigh\")~\"Gafanha\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         new = case_when(str_detect(path, \"no_Xantho\") ~ \"TRUE\",\n                         str_detect(path, \"NewPreds\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         col = case_when(str_detect(path, \"colored\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".aux.xml\"))\n\n########## ZOOM #############\n\nzoom_extent<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom\")) %>% \n  pull(path) %>% \n  read_sf()\n\nmask_low<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"mask_Gafanha_low\")) %>% \n  pull(path) %>% \n  read_sf()\n\nGafanha_low_ortho_zoomed<-imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"ortho\",\n         resampled == \"TRUE\",\n         col == \"TRUE\") %>%\n  pull(path) %>% \n  rast() %>% \n  crop(zoom_extent)\n\nnames(Gafanha_low_ortho_zoomed)<-c(\"B1\", \"B3\", \"B5\",\"alpha\")\n\n Gafanha_low_pred_zoomed<-imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"Pred\",\n         # resampled == \"TRUE\",\n         new == \"TRUE\") %>% \n  pull(path) %>% \n  rast() %>% \n  crop(zoom_extent) %>% \n  mask(mask_low, inverse = T) %>% \n   as.factor()\n   \nnames(Gafanha_low_pred_zoomed)<-\"layer\"\n\nzoomed_low_map<-ggplot()+\n  tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho_zoomed,\n                                 r = 1,\n                                 g = 2,\n                                 b = 3)+\n  tidyterra::geom_spatraster(data = Gafanha_low_pred_zoomed, mapping = aes(fill = layer), show.legend = F)+\n  \n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA), \n                    na.value = NA,\n                    name = \"\", \n                    labels = c(\"Sediment\", \n                               \"Chlorophyceae\", \n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n  geom_sf(data = zoom_extent, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 2)+\n  theme(legend.position = \"none\")+\n  theme_void()\n\n\n\n#############\n\n Gafanha_low_ortho<-imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"ortho\",\n         resampled == \"TRUE\",\n         col == \"TRUE\") %>%\n  pull(path) %>% \n  rast() \n names(Gafanha_low_ortho)<-c(\"B1\", \"B3\", \"B5\",\"alpha\")\nvalues(Gafanha_low_ortho)[values(Gafanha_low_ortho$alpha) == 0] = NA\n\n \n Gafanha_low_pred<-imglist %>% \n  filter(site == \"Gafanha\",\n         alt == \"low\",\n         type == \"Pred\",\n         # resampled == \"TRUE\",\n         new == \"TRUE\") %>% \n  pull(path) %>% \n  rast()\nnames(Gafanha_low_pred)<-\"layer\"\n\nGafanha_low_pred_masked<-Gafanha_low_pred %>% \n  # crop(mask_low) %>% \n  mask(mask_low, inverse = T)\n\nvalues(Gafanha_low_pred_masked)[values(Gafanha_low_pred_masked) == 0] = NA\n\nGafanha_low_pred_masked<-Gafanha_low_pred_masked %>% \n  as.factor()\n\nrgb_Gafanha_low <- ggplot()+\n  tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho,\n                                 r = 1,\n                                 g = 2,\n                                 b = 3)+\n  tidyterra::geom_spatraster(data = Gafanha_low_pred_masked, mapping = aes(fill = layer))+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA), \n                    na.value = NA,\n                    name = \"\", \n                    labels = c(\"Sediment\", \n                               \"Chlorophyceae\", \n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n  ggspatial::annotation_scale(location = \"bl\",text_cex=2)+\n  geom_sf(data = zoom_extent, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 1)+\n\n  geom_segment(aes(x = -8.7434247325, y=40.5977530006, xend = -8.7430558162, yend = 40.5972152706), linetype =\"dashed\" ,linewidth=2)+\n  annotation_custom(ggplotGrob(zoomed_low_map), xmin = -8.743725, xmax = -8.7434057328, ymin = 40.5977200450, ymax = 40.59798) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.74336194,-8.74371,-8.743243794,-8.7434057328), y=c(40.59762751,40.5977400850,40.59762725,40.5977200450),grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  theme_Bede_Map()+\n  coord_sf(crs = 4326)+\n  theme(axis.title = element_blank(),\n        axis.text.y = element_text(size = 20),\n        axis.text.x = element_text(size = 20, angle = 20,hjust = 1),\n        legend.position=c(0.3, 0.3))+\n  # ggtitle(\"a \")+\n  scale_x_continuous(breaks=seq(-8.7437, -8.7430, 0.0002))\nrgb_Gafanha_low\n\nggsave(\"Figures/Gaf_Low_RGB_Pred_V2.png\",rgb_Gafanha_low , width = 890*4, height = 1120*4, units = \"px\")\n```\n:::\n\n\n\n\nThe high-altitude flight over Gafanha covered nearly 1 km² in total (@fig-GafHigh). A channel delineating a small island was present in the flight, but it has been masked in the prediction map due to glinting and misclassification caused by the turbid shallow water. Most of the intertidal area has been classified as Magnoliopsida by the model, even though there is discoloration of seagrass blades. Only a few pixels have been classified as Chlorophyceae at this scale. Furthermore, the area that was classified as Bacillariophyceae in the low-altitude flight remains mostly classified as such in the high-altitude flight, but some pixels of it are now classified as Magnoliopsida. The patches of Rhodophyceae are still well classified. *Spartina sp.* was present in the northern part of the flight, near the land, and has been classified either as Magnoliopsida or as Phaeophyceae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimglist<-\n  data.frame(path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         str_detect(path, \"High\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          str_detect(path, \"AveiroHigh\") ~ \"Gafanha\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"Preds\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         new = case_when(str_detect(path, \"no_Xantho\") ~ \"TRUE\",\n                         str_detect(path, \"NewPreds\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         col = case_when(str_detect(path, \"colored\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".aux.xml\"))\n\n#### Preview ####\n\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_aveiro <- filelist[str_detect(filelist,\"mask_land_intertidal_Aveiro\")] %>% \n  read_sf()\n\nFlight_aveiro<-data.frame(\n  Name=c(\n  \"Gafanha\"\n  ) ,\n  Description = c(\"12m and 120m Flights\"),\n  Long=c(-8.742485) ,\n  Lat=c(40.597599) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_aveiro))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\np1_background<- read_sf(\"Data/shp/Aveiro/Background_p1_aveiro.shp\")\n\np1<-ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land area\"),\n                    values = c(\"#7DC27D\", \"#BDBDBD\"))+\n  geom_sf(data = p1_background, fill = \"white\",show.legend = F, linewidth=0.05,alpha=0.93,colour=\"transparent\")+\n  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),show.legend = F, linewidth=0.05,alpha=0.93,colour=\"grey30\")+\n      coord_sf(xlim=c(519749,535233) ,\n          ylim=c(4493310,4508794) )+\n  ggforce::geom_mark_ellipse(data=Flight_aveiro,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 label.fontsize = 20,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n    # theme_void()+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  # geom_label(aes(x = 521000, y = 4507794, label = \"C\"), size = 20)+\n  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))+\n  theme_void()\n\n#####\n\nland_mask_GafHigh<-\"Data/shp/Aveiro\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"mask_Gafanha_high1\")) %>% \n  pull(path) %>% \n  read_sf()\n\nbackground_GafHigh<-\"Data/shp/Aveiro\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"background_Gafanha_high\")) %>% \n  pull(path) %>% \n  read_sf()\n\nGafHigh_ortho<-imglist %>% \n  dplyr::filter(site == \"Gafanha\",\n                type == \"ortho\",\n                alt==\"high\",\n                col == \"TRUE\") %>%\n  pull(path) %>% \n  rast()\nnames(GafHigh_ortho)<-c(\"B1\",\"B3\", \"B5\", \"alpha\")\n\n# values(GafHigh_ortho)[values(GafHigh_ortho$B1) == 0] = NA\n\nGafHigh_ortho_masked<-GafHigh_ortho %>% \n  mask(land_mask_GafHigh, inverse = F) %>% \n  crop(land_mask_GafHigh)\n\nGafHigh_ortho_masked<-na.omit(GafHigh_ortho_masked, field=NA, geom=FALSE)\n\n\n###### RGB ########\nzoom_gaf_high_sf<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Gafanha_High_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\nGaflow_extent<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"GafLow_extent.shp\")) %>% \n  pull(path) %>% \n  read_sf()\n\nrgb_Gafanha_High_zoomed<-GafHigh_ortho_masked %>% \n  crop(zoom_gaf_high_sf)\n\nrgb_Gafanha_High_zoomed<-\n  ggplot()+\n  tidyterra::geom_spatraster_rgb(data = rgb_Gafanha_High_zoomed,\n         r = 1,\n         g = 2,\n         b = 3)+\n     geom_sf(data = zoom_gaf_high_sf, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 1)+\n  theme_void()\n\n  \n  \n\nrgb_Gafanha_High <- ggplot()+\n  scale_fill_manual(\"\",  \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  geom_sf(data = background_GafHigh,\n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"grey30\")+\n  geom_sf(data = background_GafHigh,\n          fill = \"white\",\n          show.legend = F,\n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"white\")+\n   tidyterra::geom_spatraster_rgb(data = GafHigh_ortho_masked,\n         r = 1,\n         g = 2,\n         b = 3,\n         maxcell = 5007120)+\n    ggspatial::annotation_scale(location = \"bl\",\n                                text_cex=2)+\n    annotation_custom(ggplotGrob(p1), \n                      xmin = -8.744, \n                      xmax = -8.7412,\n                      ymin = 40.5923,\n                      ymax = 40.595) +\n    geom_sf(data = zoom_gaf_high_sf,\n            fill = \"transparent\", \n            colour = \"black\",\n            linetype = \"dashed\", \n            linewidth = 1)+\n    geom_sf(data = Gaflow_extent,\n            fill = \"transparent\", \n            colour = \"red\",\n            linetype = \"dashed\", \n            linewidth = 2)+\n    geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.74363778,-8.74757,-8.74351982,-8.7453), \n                              y=c(40.5983781677,40.5995,40.598377893,40.5995),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", \n            linewidth = 1)+\n  annotation_custom(ggplotGrob(rgb_Gafanha_High_zoomed),\n                    xmin = -8.7479, \n                    xmax = -8.7452, \n                    ymin = 40.5979,\n                    ymax = 40.603) +\n   theme_Bede_Map()+\n   coord_sf(crs = 4326)+\n   # xlim(c(-8.748, -8.741))+\n  # ylim(c(40.593,40.601))+\n  theme(axis.title = element_blank(),\n         axis.text.x = element_text(size = 20, angle = 20, hjust = 1),\n         axis.text.y = element_text(size = 20))+\n  scale_x_continuous(limits = c(-8.747576, -8.741465),breaks =  -8.745)+\n  scale_y_continuous(limits = c(40.59297,40.60109),breaks =  40.595)\n# rgb_Gafanha_High\n\nggsave(\"Figures/Gaf_High_RGB.png\",rgb_Gafanha_High , width = 712*4, height = 1120*4, units = \"px\")\n\n\n\n\n######### Pred #######\nGafanha_high_pred<-imglist %>% \nfilter(site == \"Gafanha\",\n       alt == \"high\",\n       type == \"Pred\",\n       new == \"TRUE\",\n       !str_detect(path, \"Probs\")) %>% \n  pull(path) %>% \n  rast()\nnames(Gafanha_high_pred)<-\"layer\"\n\nGafHigh_pred_masked<-Gafanha_high_pred %>% \n  mask(land_mask_GafHigh, inverse = F) %>% \n  crop(land_mask_GafHigh)\n\nGafHigh_pred_masked<-na.omit(GafHigh_pred_masked, field=NA, geom=FALSE) \n\nvalues(GafHigh_pred_masked)[values(GafHigh_pred_masked) == 0] = NA\nvalues(GafHigh_pred_masked)[values(GafHigh_pred_masked) == 3] = 1\n\nGafHigh_pred_masked<-GafHigh_pred_masked %>% \n  as.factor()\n\nGafanha_High_zoomed_pred<-GafHigh_pred_masked %>% \n  crop(zoom_gaf_high_sf)\n\nGafanha_High_zoomed_pred<-\n  ggplot()+\n   tidyterra::geom_spatraster(data = Gafanha_High_zoomed_pred, mapping = aes(fill = layer),\n                            show.legend = F,\n                             maxcell = 5007120)+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorophyceae\",\n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n     geom_sf(data = zoom_gaf_high_sf, fill = \"transparent\", colour = \"black\",linetype = \"dashed\", linewidth = 1)+\n  theme_void()\n\nGafanha_high_pred_map<-ggplot()+\n  geom_sf(data = background_GafHigh, \n          mapping = aes(fill = Type),\n          show.legend = F,\n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"grey30\")+\n  geom_sf(data = background_GafHigh,\n          fill = \"white\",\n          show.legend = F,\n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"white\")+\n    scale_fill_manual(\"\", \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  ggnewscale::new_scale(\"fill\")+\n  tidyterra::geom_spatraster(data = GafHigh_pred_masked, \n                             # show.legend = F,\n                             mapping = aes(fill = layer),\n                             maxcell = 5010420)+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorophyceae\",\n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n       geom_sf(data = zoom_gaf_high_sf, \n               fill = \"transparent\", \n               colour = \"black\",\n               linetype = \"dashed\", \n               linewidth = 1)+\n    geom_sf(data = Gaflow_extent,\n            fill = \"transparent\", \n            colour = \"red\",\n            linetype = \"dashed\", \n            linewidth = 2)+\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.74363778,-8.74757,-8.74351982,-8.7453), \n                              y=c(40.5983781677,40.5995,40.598377893,40.5995),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  annotation_custom(ggplotGrob(Gafanha_High_zoomed_pred), \n                    xmin = -8.7479, \n                    xmax = -8.7452, \n                    ymin = 40.5979,\n                    ymax = 40.603) +\n  coord_sf(crs = 4326)+\n  theme_Bede_Map()+\n   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),\n         axis.title = element_blank(),\n        # axis.text.y = element_text(size = 20),\n        axis.text.y = element_blank(),\n         legend.background = element_blank(),\n         legend.position = c(0.96,0.23),\n         legend.text = element_text(size = 23),\n         legend.key.size = unit(1.2,\"cm\"))+\n  scale_x_continuous(limits = c(-8.747576, -8.741465),breaks =  -8.745)+\n  scale_y_continuous(limits = c(40.59297,40.60109),breaks =  40.595)\n# Gafanha_high_pred_map\n\nggsave(\"Figures/Gaf_High_Pred.png\",Gafanha_high_pred_map , width = 712*4, height = 1120*4, units = \"px\")\n\n################# PLOT AND SAVING ###########\nplot_GafHigh<-rgb_Gafanha_High+\n  Gafanha_high_pred_map\n\nggsave(\"Figures/Maps Pred/FigX-Gaf_High_Pred.png\",plot_GafHigh , width = 2105*4, height = 1363*4, units = \"px\")\n\n\n#########\n```\n:::\n\n::: {#cell-fig-GafHigh .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Maps Pred/FigX-Gaf_High_Pred.png\")\n```\n\n::: {.cell-output-display}\n![RGB orthomosaic (Left) and Prediction (Right) of the high altitude flight of Gafanaha, Portugal. The total extent of this flight is about 1 km² with a resolution of 80 mm per pixel. Background colors means intertidal area (Light Green), land area (Light Grey) and water (Light Blue). The red triangle shows the extent of the low altitude flight of Gafanha. The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.](./Figures/Maps Pred/FigX-Gaf_High_Pred.png){#fig-GafHigh width=100%}\n:::\n:::\n\n\n\n\nThe High altitude flight made in the inner lagoon of the Ria de Aveiro is the largest of all flights, covering almost 1.5 km² (@fig-Boat). On this site, only seagrass and red algae where seen on the field. The classification follows the same pattern, with a patchy Magnoliopsida meadow mixed on the eastern part of the flight with Rhodophyceae. As shown in the zoom (@fig-Boat), the edges of the meadow can be colonised by Chlorophyceae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimglist<-\n  data.frame(path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         str_detect(path, \"High\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          str_detect(path, \"AveiroHigh\") ~ \"Gafanha\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"Preds\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         new = case_when(str_detect(path, \"no_Xantho\") ~ \"TRUE\",\n                         str_detect(path, \"NewPreds\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         col = case_when(str_detect(path, \"colored\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".aux.xml\"))\n########### PREVIEW #############\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_aveiro <- filelist[str_detect(filelist,\"mask_land_intertidal_Aveiro\")] %>% \n  read_sf()\n\nFlight_aveiro<-data.frame(\n  Name=c(\n  \"Marinha Lanzarote\"\n  ) ,\n  Description = c(\n                  \"120m Flight\"),\n  Long=c( \n         -8.690677) ,\n  Lat=c(\n        40.665120) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_aveiro))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\n\np1_background<- read_sf(\"Data/shp/Aveiro/Background_p1_aveiro.shp\")\n\np1<-ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land area\"),\n                    values = c(\"#7DC27D\", \"#BDBDBD\"))+\n  geom_sf(data = p1_background, fill = \"white\",show.legend = F, linewidth=0.05,alpha=0.93,colour=\"transparent\")+\n  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,show.legend = F,colour=\"grey30\")+\n      coord_sf(xlim=c(519749,535233) ,\n          ylim=c(4493310,4508794) )+\n  ggforce::geom_mark_ellipse(data=Flight_aveiro,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 label.fontsize = 10,\n                 label.hjust = 0.5,\n                 con.size = 2,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n    # theme_void()+\n  theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  # geom_label(aes(x = 521000, y = 4507794, label = \"C\"), size = 20)+\n  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20))+\n  theme_void()\n##### ZOOM and masking #####\n\nBoat_rgb<-imglist %>% \n  filter(str_detect(path,\"Boat_high_RGB_merged.tif\")) %>% \n  pull(path) %>% \n  rast()\nnames(Boat_rgb)<-c(\"B1\",\"B3\",\"B5\")\nvalues(Boat_rgb)[values(Boat_rgb) == 0] = NA\n\nmask_boat<-\"Data/shp/Aveiro\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"boat\")) %>% \n  pull(path) %>% \n  read_sf()\n\nbackground_Boat<-\"Data/shp/Aveiro\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"background_Boat\")) %>% \n  pull(path) %>% \n  read_sf()\n\nzoom_boat_high_sf<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Boat_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\nzoom_boat_high_sf_2<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Boat_2_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\nrgb_Boat_zoomed<-Boat_rgb %>% \n  crop(zoom_boat_high_sf)\n\nrgb_Boat_zoomed_2<-Boat_rgb %>% \n  crop(zoom_boat_high_sf_2)\n\nBoat_rgb_mask<-Boat_rgb %>% \n  mask(mask_boat, inverse = T)\n\n \nrgb_Boat_zoomed_map<- ggplot()+\n  geom_spatraster_rgb(data = rgb_Boat_zoomed,\n                      r = 3,\n                      g = 2,\n                      b = 1,\n                      max_col_value = 4000)+\n  geom_sf(data = zoom_boat_high_sf, fill = \"transparent\", linetype = \"dashed\",colour = \"black\", linewidth = 1)+\n\n  theme_void()\n\nrgb_Boat_zoomed_map_2\nggplot()+\n  geom_spatraster_rgb(data = rgb_Boat_zoomed_2,\n                      r = 3,\n                      g = 2,\n                      b = 1,\n                      interpolate = F,\n                      max_col_value = 4000)+\n  geom_sf(data = zoom_boat_high_sf_2, fill = \"transparent\", linetype = \"dashed\",colour = \"black\", linewidth = 1)+\n\n  theme_void()\n\n####### RGB ############\n\nRGB_Boat_map<-\nggplot()+\n  scale_fill_manual(\"\",  \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  geom_sf(data = background_Boat,\n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"transparent\")+\n  geom_sf(data = background_Boat,\n          fill = \"white\",\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"transparent\")+\n  tidyterra::geom_spatraster_rgb(data = Boat_rgb_mask,\n                      r = 3,\n                      g = 2,\n                      b = 1,\n                      # maxcell = 5000,\n                      maxcell = 500832*8,\n                      max_col_value = 5000)+\n  geom_sf(data = zoom_boat_high_sf,\n          fill = \"transparent\",\n          colour = \"black\", \n          linewidth = 1)+\n  geom_sf(data = zoom_boat_high_sf_2,\n          fill = \"transparent\",\n          colour = \"black\", \n          linewidth = 1)+\n  annotation_custom(ggplotGrob(rgb_Boat_zoomed_map),\n                    xmin = -8.6975,\n                    xmax = -8.69,\n                    ymin = 40.6666,\n                    ymax = 40.6711) +\n  annotation_custom(ggplotGrob(rgb_Boat_zoomed_map_2),\n                    xmin = -8.6975+0.007,\n                    xmax = -8.69+0.007,\n                    ymin = 40.6666,\n                    ymax = 40.6711) +\n  annotation_custom(ggplotGrob(p1),\n                    xmin = -8.6795,\n                    xmax = -8.6736,\n                    ymin = 40.6585,\n                    ymax = 40.6625) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.69452127,-8.6965,-8.69440039,-8.69105), \n                              y=c(40.66244282,40.66673,40.66244282,40.66673),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", \n            linewidth = 1)+\n    geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.6819877,-8.69645+0.007,-8.6818696,-8.6911+0.007), \n                              y=c(40.6652874,40.66675,40.6652874,40.66673),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", \n            linewidth = 1)+\n  ggspatial::annotation_scale(location = \"bl\",\n                              text_cex=2)+\n  scale_x_continuous(limits = c(-8.6965,-8.675),\n                     breaks =  -8.685)+\n  scale_y_continuous(limits = c(40.659,40.6704),\n                     breaks =  40.664)+\n  theme_Bede_Map()+\n  theme(axis.title = element_blank(),\n        # axis.text.x = element_text(size = 20, angle = 20 , hjust = 1),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size = 20))+\n   coord_sf(crs = 4326)\n\n\n####### Pred ######## \nBoat1_pred<-imglist %>% \n  filter(str_detect(path,\"AveiroBoat1_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif\")) %>% \n  pull(path) %>% \n  rast()\nnames(Boat1_pred)<-\"layer\"\n\nBoat2_pred<-imglist %>% \n  filter(str_detect(path,\"AveiroBoat2_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif\")) %>% \n  pull(path) %>% \n  rast()\nnames(Boat2_pred)<-\"layer\"\n\nvalues(Boat1_pred)[values(Boat1_pred) == 0] = NA\nvalues(Boat2_pred)[values(Boat2_pred) == 0] = NA\n\n\nB1_overextent<-ext(Boat1_pred)\nB1_overextent[2]<-ext(Boat2_pred)[2]\nB1_overextent[4]<-ext(Boat2_pred)[4]\nB1_overextent <- rast(B1_overextent)\nres(B1_overextent)<-res(Boat1_pred)\n# terra::writeRaster(B1$B1,\"B1.tif\")\n# terra::writeRaster(B2$B2,\"B2.tif\")\n\nB2_resampled <- terra::resample(Boat2_pred,B1_overextent, method = \"near\",threads = T)\n# terra::writeRaster(B2_resampled$B1,\"B2_resampled.tif\", overwrite = T)\n\nBoat_pred<-merge(Boat1_pred,B2_resampled)\n\nBoat_pred_aggregate<-terra::aggregate(Boat_pred,fact = 6, fun =\"modal\") \n\nmasked_pred<-Boat_pred_aggregate %>% \n  mask(mask_boat,inverse=TRUE)%>% \n  as.factor()\n\nBoat_pred_zoom<-Boat1_pred %>% \n  crop(zoom_boat_high_sf) %>% \n  as.factor()\n\nBoat_pred_zoom_2<-Boat2_pred %>% \n  crop(zoom_boat_high_sf_2) %>% \n  as.factor()\n\nBoat_Pred_zoomed_map<- ggplot()+\n  tidyterra::geom_spatraster(data = Boat_pred_zoom, \n                             mapping = aes(fill = layer), \n                             show.legend = F,\n                             maxcell = 5010420)+\n  scale_fill_manual(values=c(\"#70543e\",\"#b3ff1a\",\"#389318\",\"#873e23\"),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorphyceae\",\n                               \"Magnoliopsida\"))+\n  geom_sf(data = zoom_boat_high_sf, \n          fill = \"transparent\", \n          linetype = \"dashed\",\n          colour = \"black\", \n          linewidth = 1)+\n  theme_void()\n\nBoat_Pred_zoomed_map_2<- ggplot()+\n  tidyterra::geom_spatraster(data = Boat_pred_zoom_2, \n                             mapping = aes(fill = layer), \n                             show.legend = F,\n                             maxcell = 5010420)+\n  scale_fill_manual(values=c(\"#70543e\",\"#389318\",\"#873e23\",\"#b3002d\"),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\"))+\n  geom_sf(data = zoom_boat_high_sf_2, \n          fill = \"transparent\", \n          linetype = \"dashed\",\n          colour = \"black\", \n          linewidth = 1)+\n  theme_void()\n\n\nBoat_pred_map<-ggplot()+\n  geom_sf(data = background_Boat, \n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"transparent\")+\n  geom_sf(data = background_Boat,\n          fill = \"white\",\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"transparent\")+\n    scale_fill_manual(\"\", \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  ggnewscale::new_scale(\"fill\")+\n  tidyterra::geom_spatraster(data = masked_pred, \n                             mapping = aes(fill = layer),\n                             # show.legend = F,\n                             maxcell = 5010420,\n                             )+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA,NA,NA),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorophyceae\",\n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n  ggnewscale::new_scale(\"fill\")+\n  geom_sf(data = zoom_boat_high_sf, \n               fill = \"transparent\", \n               colour = \"black\",\n               linetype = \"dashed\", \n               linewidth = 1)+\n  geom_sf(data = zoom_boat_high_sf_2, \n               fill = \"transparent\", \n               colour = \"black\",\n               linetype = \"dashed\", \n               linewidth = 1)+\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.69452127,-8.6965,-8.69440039,-8.69105), \n                              y=c(40.66244282,40.66673,40.66244282,40.66673),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", \n            linewidth = 1)+\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-8.6819877,-8.69645+0.007,-8.6818696,-8.6911+0.007), \n                              y=c(40.6652874,40.66675,40.6652874,40.66673),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", \n            linewidth = 1)+\n  annotation_custom(ggplotGrob(Boat_Pred_zoomed_map),\n                    xmin = -8.6975,\n                    xmax = -8.69,\n                    ymin = 40.6666,\n                    ymax = 40.6711) +\n  annotation_custom(ggplotGrob(Boat_Pred_zoomed_map_2),\n                    xmin = -8.6975+0.007,\n                    xmax = -8.69+0.007,\n                    ymin = 40.6666,\n                    ymax = 40.6711) +\n  coord_sf(crs = 4326)+\n  theme_Bede_Map()+\n   theme(\n     # axis.text.x = element_text(size = 20, angle = 20,hjust = 1),\n     axis.text.x = element_blank(),\n         axis.title = element_blank(),\n        axis.text.y = element_text(size = 20),\n         legend.background = element_blank(),\n         legend.position = c(0.98,0.38),\n         legend.text = element_text(size = 18),\n         legend.key.size = unit(0.8,\"cm\"))+\n  scale_x_continuous(limits = c(-8.6965,-8.675),\n                     breaks =  -8.685)+\n  scale_y_continuous(limits = c(40.659,40.6704),\n                     breaks =  40.664)\n################# PLOT AND SAVING ###########\nplot_Boat<-RGB_Boat_map/\n  Boat_pred_map\n\nggsave(\"Figures/Maps Pred/FigX-Boat_Pred.png\",plot_Boat , width = 1000*4, height = 1120*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-Boat .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Maps Pred/FigX-Boat_Pred.png\")\n```\n\n::: {.cell-output-display}\n![RGB orthomosaic (Top) and Prediction (Bottom) of the flight made in the inner part of Ria de Aveiro Lagoon, Portugal. The total extent of this flight is about 1.5 km² with a resolution of 80 mm per pixel. Background colors means intertidal area (Light Green), land area (Light Grey) and water (Light Blue). The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.](./Figures/Maps Pred/FigX-Boat_Pred.png){#fig-Boat width=100%}\n:::\n:::\n\n\n\n\nThe flight over L'Epine in Noirmoutier Island, France (@fig-Dike) was conducted near a dike crossing the northern part of the flight from west to east. Alongside this dike, brown algae attached to rocks and stranded green algae could be found. Despite the high mixture between Chlorophyceae and Magnoliopsida in this flight, these two classes are well discriminated by the classifier.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimglist<-\n  data.frame(path = list.files(pattern = \".tif\", recursive = T, full.names = T)) %>% \n  mutate(folder = case_when(str_detect(path, \"Data\") ~ \"Input\",\n                            TRUE ~ \"Output\"),\n         alt = case_when(str_detect(path, \"high\") ~ \"high\",\n                         str_detect(path, \"High\") ~ \"high\",\n                         TRUE ~ \"low\"),\n         site = case_when(str_detect(path, \"Gafanha\") ~ \"Gafanha\",\n                          str_detect(path, \"AveiroHigh\") ~ \"Gafanha\",\n                          TRUE ~ \"Duer\"),\n         type = case_when(str_detect(path, \"pred\") ~ \"Pred\",\n                          str_detect(path, \"Preds\") ~ \"Pred\",\n                          str_detect(path, \"NDVI\") ~ \"NDVI\",\n                          TRUE ~ \"ortho\"),\n         resampled = case_when(str_detect(path, \"resampled\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         new = case_when(str_detect(path, \"no_Xantho\") ~ \"TRUE\",\n                         str_detect(path, \"NewPreds\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         col = case_when(str_detect(path, \"colored\") ~ \"TRUE\",\n                          TRUE ~ \"FALSE\"),\n         correction = case_when(str_detect(path, \"corrected_per_bands\") ~ \"Bands\",\n                          str_detect(path, \"corrected.tif\") ~ \"lm_all\",\n                          TRUE ~ \"NA\")) %>% \n  dplyr::filter(alt != \"NA\",\n                !str_detect(path,\".aux.xml\"))\n\n##### Preview #####\n\nfilelist<-list.files(\"Data/shp/\", pattern = \".shp\", recursive = T,full.names = T)\nmask_BB <- filelist[str_detect(filelist,\"mask_land_intertidal_BB\")] %>% \n  read_sf()\n\nFlight_BB<-data.frame(\n  Name=c(\n  \"L'Epine\"\n  ) ,\n  Description = c(\n                  \"120m Flight\"),\n  Long=c(\n         -2.228239) ,\n  Lat=c( \n        46.989515) \n  )  %>% \n  st_as_sf(coords=c(\"Long\",\"Lat\") )  %>% \n  st_set_crs(\"EPSG:4326\")  %>% \n  st_transform(crs(mask_BB))  %>% \n  dplyr::mutate(lon = sf::st_coordinates(.) [,1],\n                lat = sf::st_coordinates(.) [,2]) %>% \n  sf::st_set_geometry(NULL)\n\np1 <- ggplot() +\n  scale_fill_manual(\"\", labels = c(\"Intertidal area\", \"Land mask\"),\n                    values = c(\"#7DC27D\", \"#BDBDBD\"))+\n  geom_sf(data = mask_BB, mapping = aes(fill = Type), linewidth=0.05,alpha=0.93, show.legend = F,colour=\"grey30\")+\n      coord_sf(xlim=c(550609,579539) ,\n          ylim=c(5189447,5218377) )+\n  ggforce::geom_mark_ellipse(data=Flight_BB,\n                 aes(x=lon,\n                     y=lat,\n                     label = Name,\n                     group = Name),\n                     # description=Description),\n                 size=0.3,\n                 fill = \"goldenrod\",\n                 con.colour = \"goldenrod4\",\n                 show.legend=F,\n                 con.size = 2,\n                 label.fontsize = 10,\n                 label.hjust = 0.5,\n                 alpha=0.8,\n  expand = unit(2, \"mm\") , \n  radius = unit(2, \"mm\") ,\n  label.fill = \"grey90\",\n  label.buffer = unit(5, \"mm\")) +\n  # theme_Bede_Map()+\n  labs(x=\"Longitude\",\n       y=\"Latitude\")+\n  # geom_label(aes(x = 553460, y = 5216442, label = \"B\"), size = 20)+\n  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), \"cm\") ,\n        legend.position = c(0.95,0.2),\n        legend.key.size =  unit(1, \"cm\"),\n        legend.text = element_text(size = 20),\n        legend.title=element_blank(),\n        legend.background = element_rect(linewidth = 0.5, \n                                         fill = \"white\",\n                                         linetype=\"solid\", \n                                  colour =\"black\"),\n        # panel.background = element_rect(fill = \"#FFFFFF90\"),\n        axis.title = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank())+\n  theme_void()\n\n##### RGB ######\n\nDike_rgb<-imglist %>% \n  filter(str_detect(path,\"NorthDike_high_multi_4326_colored.tif\")) %>% \n  pull(path) %>% \n  rast()\nnames(Dike_rgb)<-c(\"B1\",\"B3\",\"B5\",\"alpha\")\nvalues(Dike_rgb)[values(Dike_rgb$alpha) == 0] = NA\n\nmask_Dike<-\"Data/shp/Bourgneuf\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"mask_NorthDike\")) %>% \n  pull(path) %>% \n  read_sf()\n\nbackground_Dike<-\"Data/shp/Bourgneuf\" %>% \n  list.files(\".shp\", full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path, \"background\")) %>% \n  pull(path) %>% \n  read_sf()\n\nzoom_Dike_high_sf<-\"Data/shp\" %>% \n  list.files(\".shp\",recursive = T,full.names = T) %>% \n  as.data.frame() %>% \n  rename(path = \".\") %>% \n  dplyr::filter(str_detect(path,\"zoom_extent_map_Dike_comparison\")) %>% \n  pull(path) %>% \n  read_sf()\n\nDike_rgb_masked<-Dike_rgb %>% \n  crop(mask_Dike) %>%\n  mask(mask_Dike)\n\n\nzoom_rgb_dike<-Dike_rgb_masked %>% \n  crop(zoom_Dike_high_sf)\n\nzoom_rgb_dike_map<-ggplot()+\n  geom_spatraster_rgb(data = zoom_rgb_dike,\n                      r = 3,\n                      g = 2,\n                      b = 1)+\n  geom_sf(data = zoom_Dike_high_sf, fill = \"transparent\", linetype = \"dashed\",colour = \"black\", linewidth = 1)+\n  coord_sf(crs = 32630)+\n  theme_void()\n\n\nRGB_Dike_map <- ggplot()+\n  scale_fill_manual(\"\",  \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  geom_sf(data = background_Dike,\n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"transparent\")+\n  geom_sf(data = background_Dike,\n          fill = \"white\",\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"transparent\")+\n  tidyterra::geom_spatraster_rgb(data = Dike_rgb_masked,\n                      r = 3,\n                      g = 2,\n                      b = 1,\n                      # maxcell = 500,\n                      maxcell = 500832*8\n                      )+\n  geom_sf(data = zoom_Dike_high_sf, \n          fill = \"transparent\", \n          linetype = \"dashed\",\n          colour = \"black\", \n          linewidth = 1)+\n  annotation_custom(ggplotGrob(zoom_rgb_dike_map), \n                    xmin = -2.226, \n                    ymin = 46.9888,\n                    ymax = 46.9893) +\n  annotation_custom(ggplotGrob(p1),\n                    xmin = -2.226,\n                    ymin = 46.9875) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-2.226834,-2.225905,-2.226834,-2.225905),\n                              y=c(46.9886439,46.9892105,46.9885538,46.988805),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  ggspatial::annotation_scale(location = \"tl\",text_cex=2)+\n  scale_x_continuous(limits = c(-2.2293,-2.2253),\n                     breaks =  -2.228)+\n  scale_y_continuous(limits = c(46.9882,46.98935),\n                     breaks =  46.9890)+\n  theme_Bede_Map()+\n  theme(\n    # axis.text.x =element_text(size = 20, angle = 20, hjust = 1),\n    axis.text.x =element_blank(),\n        axis.title = element_blank(),\n        axis.text.y = element_text(size = 20))+\n   coord_sf(crs = 4326)\n\n\n##### Pred ######\n\nDike_Pred<-imglist %>% \n  filter(str_detect(path,\"Noirmoutier_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7_4326.tif\")) %>% \n  pull(path) %>% \n  rast()\nnames(Dike_Pred)<-c(\"layer\")\nvalues(Dike_Pred)[values(Dike_Pred) == 0] = NA\n\nDike_Pred_masked<-Dike_Pred %>% \n  crop(mask_Dike) %>% \n  mask(mask_Dike) %>% \n  as.factor()\n\nzoom_Pred_dike<-Dike_Pred_masked %>% \n  crop(zoom_Dike_high_sf)\n\nzoom_Pred_dike_map<-ggplot()+\n  tidyterra::geom_spatraster(data = zoom_Pred_dike, mapping = aes(fill = layer), show.legend = F)+\n  scale_fill_manual(values=c(\"#70543e\",\"#b3ff1a\",\"#389318\",\"#873e23\",\"#42c9bc\"),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorphyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Water\"))+\n  geom_sf(data = zoom_Dike_high_sf, fill = \"transparent\", linetype = \"dashed\",colour = \"black\", linewidth = 1)+\n  theme_void()\n\n\nDike_pred_map<-ggplot()+\n  geom_sf(data = background_Dike, \n          mapping = aes(fill = Type),\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.93,\n          colour=\"grey30\")+\n  geom_sf(data = background_Dike,\n          fill = \"white\",\n          show.legend = F, \n          linewidth=0.05,\n          alpha=0.4,\n          colour=\"white\")+\n    scale_fill_manual(\"\",  \n                    labels = c(\"Intertidal area\", \"Land area\", \"water\"),\n                    values = c(\"#7DC27D\", \"#CFCFCF\",\"#42c9bc\"))+\n  ggnewscale::new_scale(\"fill\")+\n  tidyterra::geom_spatraster(data = Dike_Pred_masked, \n                             mapping = aes(fill = layer),\n                             maxcell = 5010420,\n                             )+\n  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),\n                    values=c(\"#70543e\", \"#b3ff1a\", \"#DAA520\", \"#389318\",\"#873e23\",\"#b3002d\", \"#42c9bc\",NA,NA,NA,NA),\n                    na.value = NA,\n                    name = \"\",\n                    labels = c(\"Sediment\",\n                               \"Chlorophyceae\",\n                               \"Bacillariophyceae\",\n                               \"Magnoliopsida\",\n                               \"Phaeophyceae\",\n                               \"Rhodophyceae\",\n                               \"Water\"))+\n  ggnewscale::new_scale(\"fill\")+\n  geom_sf(data = zoom_Dike_high_sf, \n          fill = \"transparent\", \n          colour = \"black\",\n          linetype = \"dashed\", \n          linewidth = 1)+\n  annotation_custom(ggplotGrob(zoom_Pred_dike_map), \n                    xmin = -2.226, \n                    ymin = 46.9888,\n                    ymax = 46.9893) +\n  geom_path(aes(x,y,group=grp),\n            data = data.frame(x = c(-2.226834,-2.225905,-2.226834,-2.225905),\n                              y=c(46.9886439,46.9892105,46.9885538,46.988805),\n                              grp=c(1,1,2,2)),\n            linetype = \"dashed\", linewidth = 1)+\n  # annotation_custom(ggplotGrob(Boat_Pred_zoomed_map), xmin = -8.697, xmax = -8.692, ymin = 40.667,ymax = 40.6705) +\n  coord_sf(crs = 4326)+\n  theme_Bede_Map()+\n   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),\n         axis.title = element_blank(),\n        axis.text.y = element_text(size = 20),\n         legend.background = element_blank(),\n         legend.position = c(1,0.50),\n         legend.text = element_text(size = 18),\n         legend.key.size = unit(0.8,\"cm\"))+\n  scale_x_continuous(limits = c(-2.2293,-2.2253),\n                     breaks =  -2.228)+\n  scale_y_continuous(limits = c(46.9882,46.98935),\n                     breaks =  46.9890)\n\n################# PLOT AND SAVING ###########\n\nplot_Dike<-RGB_Dike_map/\n  Dike_pred_map\n  \nggsave(\"Figures/Maps Pred/FigX-Dike_Pred.png\",plot_Dike , width = 1200*4, height = 900*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-Dike .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Maps Pred/FigX-Dike_Pred.png\")\n```\n\n::: {.cell-output-display}\n![RGB orthomosaic (Top) and Prediction (Bottom) of Northern part of Noirmoutier Island, France. The total extent of this flight is about 28 000 m² with a resolution of 80 mm per pixel. Background colors means intertidal area (Light Green) and land area (Light Grey). The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.](./Figures/Maps Pred/FigX-Dike_Pred.png){#fig-Dike width=100%}\n:::\n:::\n\n\n\n\n## Validation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf<-\"Output/Validation_data\" %>% \n  list.files(\"ResultsNewNN_NoXanthowithNDVIWithOldandBoat.csv\",recursive = T, full.names = T) %>% \n  read.csv() %>% \n  as_tibble() %>% \n  rename(Truth_ID = \"Truth\") %>% \n  mutate(Truth =  case_when(Truth_ID == 1 ~ \"Sediment\",\n                          Truth_ID == 2 ~ \"Chlorophyceae\",\n                          Truth_ID == 3 ~ \"Sediment\",\n                          Truth_ID == 4 ~ \"Magnoliopsida\",\n                          Truth_ID == 5 ~ \"Bacillariophyceae\",\n                          Truth_ID == 6 ~ \"Magnoliopsida\",\n                          Truth_ID == 7 ~ \"Phaeophyceae\",\n                          Truth_ID == 8 ~ \"Rhodophyceae\",\n                          Truth_ID == 9 ~ \"SunGlint\",\n                          Truth_ID == 10 ~ \"Water\",\n                          Truth_ID == 11 ~ \"Xanthophyceae\",\n                          Truth_ID == 12 ~ \"Spartina\",\n                          Truth_ID == 41 ~ \"Bleached seagrasses\",\n                          TRUE ~ \"NA\"),\n         Pred_Class = case_when(Pred_Class == \"Clorophyta\" ~ \"Chlorophyceae\",\n                                Pred_Class == \"Phaeophyta\" ~ \"Phaeophyceae\",\n                                Pred_Class == \"Rhodphyta\" ~ \"Rhodophyceae\",\n                                Pred_Class == \"Deep_Sediment\" ~ \"Sediment\",\n                                Pred_Class == \"MPB\" ~ \"Bacillariophyceae\",\n                                Pred_Class == \"Bare_Sediment\" ~ \"Sediment\",\n                                 Pred_Class == \"Magnoliosida\" ~ \"Magnoliopsida\",\n                                (Pred_Class == \"Low_SPC\" & NDVI > 0.2) ~ \"Magnoliopsida\",\n                                (Pred_Class == \"Low_SPC\" & NDVI <= 0.2 )~ \"Sediment\",\n                          TRUE ~ Pred_Class)) %>% \n  dplyr::filter(Truth != \"Water\",\n                Truth  != \"Spartina\",\n                Truth != \"SunGlint\",\n                Truth != \"Bleached seagrasses\",\n                Truth != \"Xanthophyceae\",\n                # Pred_Class != \"Low_SPC\",\n                Pred_Class != \"Xanthophyceae\",\n                 Pred_Class != \"Water\",\n                 Pred_Class != \"SunGlint\",\n                !Flight == \"Handfisher_1_old\",\n                !Flight == \"Handfisher_2_old\",\n                !Flight == \"Handfisher_2\") %>%\n  dplyr::select(-NDVI)\n\n\na<-as.character(unique(df$Truth))\nb<-as.character(unique(df$Pred_Class))\nab<-setdiff(a,b)\nba<-setdiff(b,a)\n\nif (!(length(ab) == 0 & length(ba) == 0)) {\n  \n\nlines_to_add<-data.frame(Pred_Class = c(ab,ba),\n                         Pred_ID = NA,\n                         Flight = NA,\n                         Truth_ID = NA,\n                         Truth = c(ab,ba))\n\ndf<-df %>% \n  rbind(lines_to_add)\n  rm(lines_to_add)\n\n  \n}\n\n\n  df<- df %>%\n  mutate(Pred_Class = as_factor(Pred_Class),\n         Truth = as_factor(Truth),\n         Truth = fct_relevel(Truth, c(\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\")),\n         Pred_Class = fct_relevel(Pred_Class, c(\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\")),\n         Flight = case_when(str_detect(Flight, \"Boat\") ~ \"Boat\",\n                            TRUE ~ Flight))\n  \n####### GafanahaLow #######\ndf_GafanhaLow<-df %>% \n  filter(Flight == \"GafanhaLow\")\n\nvalidation_metrics_GafanhaLow<-confusionMatrix(df_GafanhaLow$Pred_Class,df_GafanhaLow$Truth)\n\nconf_mat_GafanhaLow<-validation_metrics_GafanhaLow[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_GafanhaLow[6,]<-NA\nconf_mat_GafanhaLow[,6]<-NA\n\nfor(i in 1:(nrow(conf_mat_GafanhaLow))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_GafanhaLow[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_GafanhaLow[,i],na.rm = T)\n}\nconf_mat_std_GafanhaLow<-conf_mat_GafanhaLow\n\nfor(row in 1:nrow(conf_mat_std_GafanhaLow)){\n  for(col in 1:ncol(conf_mat_std_GafanhaLow)){\n    conf_mat_std_GafanhaLow[row,col]<-conf_mat_std_GafanhaLow[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_GafanhaLow[row,col])\n    }\n}\n\nconfmat_rast_GafanhaLow<-conf_mat_std_GafanhaLow %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_GafanhaLow<-subst(confmat_rast_GafanhaLow, NA, -99)\nnames(confmat_rast_GafanhaLow)<-\"layer\"\next(confmat_rast_GafanhaLow)<-c(18.1,21.9,8.2,11.8)\nconfmat_rast_GafanhaLow_sf<-as.polygons(confmat_rast_GafanhaLow,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_GafanhaLow_centroid<-st_centroid(confmat_rast_GafanhaLow_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_GafanhaLow)[values(confmat_rast_GafanhaLow) == 0] = NA\nvalues(confmat_rast_GafanhaLow)[values(confmat_rast_GafanhaLow) == -99] = NA\n\n####### GafanhaHigh #######\n\ndf_GafanhaHigh<-df %>% \n  filter(Flight == \"GafanhaHigh\")\n\nvalidation_metrics_GafanhaHigh<-confusionMatrix(df_GafanhaHigh$Pred_Class,df_GafanhaHigh$Truth)\n\nconf_mat_GafanhaHigh<-validation_metrics_GafanhaHigh[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_GafanhaHigh[6,]<-NA\nconf_mat_GafanhaHigh[,6]<-NA\n\nfor(i in 1:(nrow(conf_mat_GafanhaHigh))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_GafanhaHigh[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_GafanhaHigh[,i],na.rm = T)\n}\nconf_mat_std_GafanhaHigh<-conf_mat_GafanhaHigh\n\nfor(row in 1:nrow(conf_mat_std_GafanhaHigh)){\n  for(col in 1:ncol(conf_mat_std_GafanhaHigh)){\n    conf_mat_std_GafanhaHigh[row,col]<-conf_mat_std_GafanhaHigh[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_GafanhaHigh[row,col])\n    }\n}\n\nconfmat_rast_GafanhaHigh<-conf_mat_std_GafanhaHigh %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_GafanhaHigh<-subst(confmat_rast_GafanhaHigh, NA, -99)\nnames(confmat_rast_GafanhaHigh)<-\"layer\"\next(confmat_rast_GafanhaHigh)<-c(14.1,17.9,8.2,11.8)\nconfmat_rast_GafanhaHigh_sf<-as.polygons(confmat_rast_GafanhaHigh,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_GafanhaHigh_centroid<-st_centroid(confmat_rast_GafanhaHigh_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_GafanhaHigh)[values(confmat_rast_GafanhaHigh) == 0] = NA\nvalues(confmat_rast_GafanhaHigh)[values(confmat_rast_GafanhaHigh) == -99] = NA\n\n\n# plot_matrix_GafanhaHigh <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_GafanhaHigh),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Gafanha Low\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n# \n# \n\n\n\n\n####### DuerLow #######\n\ndf_DuerLow<-df %>% \n  filter(Flight == \"DuerLow\")\n\nvalidation_metrics_DuerLow<-confusionMatrix(df_DuerLow$Pred_Class,df_DuerLow$Truth)\n\nconf_mat_DuerLow<-validation_metrics_DuerLow[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_DuerLow[5,]<-NA\nconf_mat_DuerLow[,5]<-NA\n\nfor(i in 1:(nrow(conf_mat_DuerLow))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_DuerLow[i,], na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_DuerLow[,i], na.rm = T)\n}\nconf_mat_std_DuerLow<-conf_mat_DuerLow\n\n# for(row in 1:nrow(conf_mat_std_DuerLow)){\n#   for(col in 1:ncol(conf_mat_std_DuerLow)){\n#     conf_mat_std_DuerLow[row,col]<-conf_mat_std_DuerLow[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_DuerLow[row,col])\n#     }\n# }\n\nfor(row in 1:nrow(conf_mat_std_DuerLow)){\n  for(col in 1:ncol(conf_mat_std_DuerLow)){\n    conf_mat_std_DuerLow[row,col]<-conf_mat_std_DuerLow[row,col]/((df_sum$col[col]))\n    }\n}\n\nconfmat_rast_DuerLow<-conf_mat_std_DuerLow %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_DuerLow<-subst(confmat_rast_DuerLow, NA, -99)\nnames(confmat_rast_DuerLow)<-\"layer\"\next(confmat_rast_DuerLow)<-c(18.1,21.9,0,3.8)\nconfmat_rast_DuerLow_sf<-as.polygons(confmat_rast_DuerLow,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_DuerLow_centroid<-st_centroid(confmat_rast_DuerLow_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_DuerLow)[values(confmat_rast_DuerLow) == 0] = NA\nvalues(confmat_rast_DuerLow)[values(confmat_rast_DuerLow) == -99] = NA\n\n\n# plot_matrix_DuerLow <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_DuerLow),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Duer Low\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n####### Horse_rooster #######\n\ndf_Horse_rooster<-df %>% \n  filter(Flight == \"Horse_rooster\")\n\nvalidation_metrics_Horse_rooster<-confusionMatrix(df_Horse_rooster$Pred_Class,df_Horse_rooster$Truth)\n\nconf_mat_Horse_rooster<-validation_metrics_Horse_rooster[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_Horse_rooster[6,]<-NA\nconf_mat_Horse_rooster[,6]<-NA\nconf_mat_Horse_rooster[2,]<-NA\nconf_mat_Horse_rooster[,2]<-NA\n\nfor(i in 1:(nrow(conf_mat_Horse_rooster))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_Horse_rooster[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_Horse_rooster[,i],na.rm = T)\n}\nconf_mat_std_Horse_rooster<-conf_mat_Horse_rooster\n\nfor(row in 1:nrow(conf_mat_std_Horse_rooster)){\n  for(col in 1:ncol(conf_mat_std_Horse_rooster)){\n    conf_mat_std_Horse_rooster[row,col]<-conf_mat_std_Horse_rooster[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Horse_rooster[row,col])\n    }\n}\n\nconfmat_rast_Horse_rooster<-conf_mat_std_Horse_rooster %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_Horse_rooster<-subst(confmat_rast_Horse_rooster, NA, -99)\nnames(confmat_rast_Horse_rooster)<-\"layer\"\next(confmat_rast_Horse_rooster)<-c(14.1,17.9,4.2,7.8)\nconfmat_rast_Horse_rooster_sf<-as.polygons(confmat_rast_Horse_rooster,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_Horse_rooster_centroid<-st_centroid(confmat_rast_Horse_rooster_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_Horse_rooster)[values(confmat_rast_Horse_rooster) == 0] = NA\nvalues(confmat_rast_Horse_rooster)[values(confmat_rast_Horse_rooster) == -99] = NA\n\n\n\n# plot_matrix_Horse_rooster <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_Horse_rooster),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\",\n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Mataducos\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n####### Handfisher_1 #######\n\ndf_Handfisher_1<-df %>% \n  filter(Flight == \"Handfisher_1\")\n\nvalidation_metrics_Handfisher_1<-confusionMatrix(df_Handfisher_1$Pred_Class,df_Handfisher_1$Truth)\n\nconf_mat_Handfisher_1<-validation_metrics_Handfisher_1[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_Handfisher_1[5,]<-NA\nconf_mat_Handfisher_1[6,]<-NA\nconf_mat_Handfisher_1[2,]<-NA\nconf_mat_Handfisher_1[3,]<-NA\nconf_mat_Handfisher_1[,5]<-NA\nconf_mat_Handfisher_1[,6]<-NA\nconf_mat_Handfisher_1[,2]<-NA\nconf_mat_Handfisher_1[,3]<-NA\n\nfor(i in 1:(nrow(conf_mat_Handfisher_1))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_Handfisher_1[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_Handfisher_1[,i],na.rm = T)\n}\nconf_mat_std_Handfisher_1<-conf_mat_Handfisher_1\n\nfor(row in 1:nrow(conf_mat_std_Handfisher_1)){\n  for(col in 1:ncol(conf_mat_std_Handfisher_1)){\n    conf_mat_std_Handfisher_1[row,col]<-conf_mat_std_Handfisher_1[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Handfisher_1[row,col])\n    }\n}\n\nconfmat_rast_Handfisher_1<-conf_mat_std_Handfisher_1 %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_Handfisher_1<-subst(confmat_rast_Handfisher_1, NA, -99)\nnames(confmat_rast_Handfisher_1)<-\"layer\"\next(confmat_rast_Handfisher_1)<-c(22.1,25.9,4.2,7.8)\nconfmat_rast_Handfisher_1_sf<-as.polygons(confmat_rast_Handfisher_1,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_Handfisher_1_centroid<-st_centroid(confmat_rast_Handfisher_1_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_Handfisher_1)[values(confmat_rast_Handfisher_1) == 0] = NA\nvalues(confmat_rast_Handfisher_1)[values(confmat_rast_Handfisher_1) == -99] = NA\n\n\n# plot_matrix_Handfisher_1 <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_Handfisher_1),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Barbatre\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n\n####### Boat #######\n\ndf_Boat<-df %>% \n  filter(Flight == \"Boat\")\n\nvalidation_metrics_Boat<-confusionMatrix(df_Boat$Pred_Class,df_Boat$Truth)\n\nconf_mat_Boat<-validation_metrics_Boat[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\n\nconf_mat_Boat[6,]<-NA\nconf_mat_Boat[,6]<-NA\nconf_mat_Boat[2,]<-NA\nconf_mat_Boat[,2]<-NA\n\nfor(i in 1:(nrow(conf_mat_Boat))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_Boat[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_Boat[,i],na.rm = T)\n}\nconf_mat_std_Boat<-conf_mat_Boat\n\nfor(row in 1:nrow(conf_mat_std_Boat)){\n  for(col in 1:ncol(conf_mat_std_Boat)){\n    conf_mat_std_Boat[row,col]<-conf_mat_std_Boat[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Boat[row,col])\n    }\n}\n\nconfmat_rast_Boat<-conf_mat_std_Boat %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_Boat<-subst(confmat_rast_Boat, NA, -99)\nnames(confmat_rast_Boat)<-\"layer\"\next(confmat_rast_Boat)<-c(22.1,25.9,8.2,11.8)\nconfmat_rast_Boat_sf<-as.polygons(confmat_rast_Boat,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_Boat_centroid<-st_centroid(confmat_rast_Boat_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_Boat)[values(confmat_rast_Boat) == 0] = NA\nvalues(confmat_rast_Boat)[values(confmat_rast_Boat) == -99] = NA\n\n\n\n# plot_matrix_Boat <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_Boat),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Inner Lagoon\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n\n####### Arz #######\n\ndf_Arz<-df %>% \n  filter(Flight == \"Arz\")\n\nvalidation_metrics_Arz<-confusionMatrix(df_Arz$Pred_Class,df_Arz$Truth)\n\nconf_mat_Arz<-validation_metrics_Arz[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_Arz[3,]<-NA\nconf_mat_Arz[,3]<-NA\nconf_mat_Arz[2,]<-NA\nconf_mat_Arz[,2]<-NA\nconf_mat_Arz[5,]<-NA\nconf_mat_Arz[,5]<-NA\n\nfor(i in 1:(nrow(conf_mat_Arz))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_Arz[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_Arz[,i],na.rm = T)\n}\nconf_mat_std_Arz<-conf_mat_Arz\n\nfor(row in 1:nrow(conf_mat_std_Arz)){\n  for(col in 1:ncol(conf_mat_std_Arz)){\n    conf_mat_std_Arz[row,col]<-conf_mat_std_Arz[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Arz[row,col])\n    }\n}\n\nconfmat_rast_Arz<-conf_mat_std_Arz %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_Arz<-subst(confmat_rast_Arz, NA, -99)\nnames(confmat_rast_Arz)<-\"layer\"\next(confmat_rast_Arz)<-c(14.1,17.9,0,3.8)\nconfmat_rast_Arz_sf<-as.polygons(confmat_rast_Arz,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_Arz_centroid<-st_centroid(confmat_rast_Arz_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_Arz)[values(confmat_rast_Arz) == 0] = NA\nvalues(confmat_rast_Arz)[values(confmat_rast_Arz) == -99] = NA\n\n\n\n# plot_matrix_Arz <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_Arz),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"Arz Island\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n####### NorthDike #######\n\ndf_NorthDike<-df %>% \n  filter(Flight == \"NorthDike\")\n\nvalidation_metrics_NorthDike<-confusionMatrix(df_NorthDike$Pred_Class,df_NorthDike$Truth)\n\nconf_mat_NorthDike<-validation_metrics_NorthDike[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_NorthDike[5,]<-NA\nconf_mat_NorthDike[,5]<-NA\nconf_mat_NorthDike[2,]<-NA\nconf_mat_NorthDike[,2]<-NA\n\nfor(i in 1:(nrow(conf_mat_NorthDike))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_NorthDike[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_NorthDike[,i],na.rm = T)\n}\nconf_mat_std_NorthDike<-conf_mat_NorthDike\n\nfor(row in 1:nrow(conf_mat_std_NorthDike)){\n  for(col in 1:ncol(conf_mat_std_NorthDike)){\n    conf_mat_std_NorthDike[row,col]<-conf_mat_std_NorthDike[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_NorthDike[row,col])\n    }\n}\n\nconfmat_rast_NorthDike<-conf_mat_std_NorthDike %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_NorthDike<-subst(confmat_rast_NorthDike, NA, -99)\nnames(confmat_rast_NorthDike)<-\"layer\"\next(confmat_rast_NorthDike)<-c(18.1,21.9,4.2,7.8)\nconfmat_rast_NorthDike_sf<-as.polygons(confmat_rast_NorthDike,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_NorthDike_centroid<-st_centroid(confmat_rast_NorthDike_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_NorthDike)[values(confmat_rast_NorthDike) == 0] = NA\nvalues(confmat_rast_NorthDike)[values(confmat_rast_NorthDike) == -99] = NA\n\n\n# plot_matrix_NorthDike <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_NorthDike),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"L'Epine\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n\n####### Kerdrean #######\n\ndf_Kerdrean<-df %>% \n  filter(Flight == \"Kerdrean\")\n\nvalidation_metrics_Kerdrean<-confusionMatrix(df_Kerdrean$Pred_Class,df_Kerdrean$Truth)\n\nconf_mat_Kerdrean<-validation_metrics_Kerdrean[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\nconf_mat_Kerdrean[c(2,3,4,5,6),]<-NA\nconf_mat_Kerdrean[,c(2,3,4,5,6)]<-NA\n\nfor(i in 1:(nrow(conf_mat_Kerdrean))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat_Kerdrean[i,],na.rm = T)\n  df_sum[i,2] <- sum(conf_mat_Kerdrean[,i],na.rm = T)\n}\nconf_mat_std_Kerdrean<-conf_mat_Kerdrean\n\nfor(row in 1:nrow(conf_mat_std_Kerdrean)){\n  for(col in 1:ncol(conf_mat_std_Kerdrean)){\n    conf_mat_std_Kerdrean[row,col]<-conf_mat_std_Kerdrean[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Kerdrean[row,col])\n    }\n}\n\nconfmat_rast_Kerdrean<-conf_mat_std_Kerdrean %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nconfmat_rast_Kerdrean<-subst(confmat_rast_Kerdrean, NA, -99)\nnames(confmat_rast_Kerdrean)<-\"layer\"\next(confmat_rast_Kerdrean)<-c(22.1,25.9,0,3.8)\nconfmat_rast_Kerdrean_sf<-as.polygons(confmat_rast_Kerdrean,aggregate=F) %>% \n  sf::st_as_sf()\nconfmat_rast_Kerdrean_centroid<-st_centroid(confmat_rast_Kerdrean_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalues(confmat_rast_Kerdrean)[values(confmat_rast_Kerdrean) == 0] = NA\nvalues(confmat_rast_Kerdrean)[values(confmat_rast_Kerdrean) == -99] = NA\n\n\n# plot_matrix_Kerdrean <-\n# ggplot()+\n#   geom_spatraster(data = (confmat_rast_Kerdrean),\n#                   show.legend = F,\n#                   na.rm = TRUE\n#                   )+\n#   scale_fill_Bede(\"mixed\", \n#                   discrete = F,\n#                   na.value = \"white\",\n#                   trans = \"sqrt\",\n#                   labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n#   labs(fill = \"Proportion \\n of pixels (%)\")+\n#   scale_x_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Sediment\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#                      expand = c(0, 0),\n#                      position = \"top\",\n#                      limits = c(0,10))+\n#   scale_y_continuous(breaks = seq(1,9, by = 2),\n#                      labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Sediment\"),\n#                      expand = c(0, 0.1),\n#                      limits = c(0,10))+\n#   geom_path(\n#     data = data.frame(\n#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),\n#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),\n#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)\n#       ),\n#     aes(x,y,group= group),\n#     linewidth = 1\n#     )+\n#   theme_void()+\n#   ggtitle(\"L'Epine\")+\n#   theme(plot.title = element_text(hjust = 0.5),\n#         plot.margin = unit(c(0,30,0,30), \"pt\"))\n# \n\nconfmat_rast_Arz_centroid<-confmat_rast_Arz_centroid %>% \n  mutate(site = \"Arz\")\nconfmat_rast_Boat_centroid<-confmat_rast_Boat_centroid %>% \n  mutate(site = \"Boat\")\nconfmat_rast_DuerLow_centroid<-confmat_rast_DuerLow_centroid %>% \n  mutate(site = \"DuerLow\")\nconfmat_rast_GafanhaHigh_centroid<-confmat_rast_GafanhaHigh_centroid %>% \n  mutate(site = \"Gaf_High\")\nconfmat_rast_GafanhaLow_centroid<-confmat_rast_GafanhaLow_centroid %>% \n  mutate(site = \"Gaf_Low\")\nconfmat_rast_Handfisher_1_centroid<-confmat_rast_Handfisher_1_centroid %>% \n  mutate(site = \"Handfisher\")\nconfmat_rast_Horse_rooster_centroid<-confmat_rast_Horse_rooster_centroid %>% \n  mutate(site = \"Rooster\")\nconfmat_rast_Kerdrean_centroid<-confmat_rast_Kerdrean_centroid %>% \n  mutate(site = \"kerdrean\")\nconfmat_rast_NorthDike_centroid<-confmat_rast_NorthDike_centroid %>% \n  mutate(site = \"Dike\")\n\n\n\n\ncentroid_cells<-rbind(confmat_rast_Arz_centroid,confmat_rast_Boat_centroid,confmat_rast_DuerLow_centroid,confmat_rast_GafanhaHigh_centroid,confmat_rast_GafanhaLow_centroid,confmat_rast_Handfisher_1_centroid,confmat_rast_Horse_rooster_centroid,confmat_rast_Kerdrean_centroid,confmat_rast_NorthDike_centroid) %>% \n  filter(layer == -99)\n\n\n##### Global #####\n\nvalidation_metrics<-confusionMatrix(df$Pred_Class,df$Truth)\n\nmetrics_by_class<-validation_metrics$byClass %>% \n    as.data.frame()\n\nconf_mat<-validation_metrics[[2]] %>% \n  as.numeric() %>%\n  base::matrix(ncol = 6) %>%\n  as.data.frame()\n\nfor(i in 1:(nrow(conf_mat))){\n  if(i == 1 ){\n    df_sum<-data.frame(row = NA,\n                       col = NA)\n  }\n  df_sum[i,1] <- sum(conf_mat[i,])\n  df_sum[i,2] <- sum(conf_mat[,i])\n}\n\nconf_mat_std<-conf_mat\nfor(row in 1:nrow(conf_mat_std)){\n  for(col in 1:ncol(conf_mat_std)){\n    conf_mat_std[row,col]<-conf_mat_std[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std[row,col])\n    }\n  \n}\n\nconfmat_rast<-conf_mat_std %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\nnames(confmat_rast)<-\"layer\"\next(confmat_rast)<-c(0,12,0,12)\n# crs(confmat_rast)<-\"4326\"\n\n values(confmat_rast)[values(confmat_rast) == 0] = NA\n \n \ndf_summarize<-df %>% \n  group_by(Flight) %>% \n  summarize(n = length(Flight)) %>% \n  ungroup() %>% \n  mutate(prop = n / sum(n),\n         Site = case_when(Flight == \"GafanhaHigh\" ~ \"Gafanha High\",\n                   Flight == \"GafanhaLow\" ~ \"Gafanha Low\",\n                   Flight == \"Boat\" ~ \"Marinha Lanzarote\",\n                   Flight == \"Horse_rooster\" ~ \"Mataducos\",\n                   Flight == \"NorthDike\" ~ \"L'Epine\",\n                   Flight == \"Handfisher_1\" ~ \"Barbâtre\",\n                   Flight == \"Arz\" ~ \"Arz Island\",\n                   Flight == \"DuerLow\" ~ \"Duer\",\n                   TRUE ~ Flight))\n\ndf_corrected_accuracy<-data.frame(\n      x = c(1,3,5,7,9,11),\n      y = c(11,9,7,5,3,1),\n      lab = c(metrics_by_class[1,11],metrics_by_class[2,11], metrics_by_class[3,11], metrics_by_class[4,11],metrics_by_class[5,11],metrics_by_class[6,11]))\n \ndf_Sens_Spec<-data.frame(\n    x = c(1,3,5,7,9, 11, 12.9, 12.9, 12.9, 12.9, 12.9,12.9),\n    y = c(-0.3,-0.3,-0.3,-0.3,-0.3,-0.3,11,9,7,5,3,1),\n    lab = c(metrics_by_class$Recall[c(1:6)],metrics_by_class$Precision[c(1:6)])\n)\n\n\n\ndf_Label_Sites<-data.frame(\n    x = c(16,20,24,16,20,24,16,20,24),\n    y = c(12,12,12,8,8,8,4,4,4),\n    lab = c(paste0(\"Gafanha High, \", df_summarize %>% \n                     filter(Flight == \"GafanhaHigh\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Gafanha Low, \",df_summarize %>% \n                     filter(Flight == \"GafanhaLow\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Inner Lagoon, \", df_summarize %>% \n                     filter(Flight == \"Boat\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Mataducos, \", df_summarize %>% \n                     filter(Flight == \"Horse_rooster\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"L'Epine, \", df_summarize %>% \n                     filter(Flight == \"NorthDike\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Barbâtre, \", df_summarize %>% \n                     filter(Flight == \"Handfisher_1\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Arz Island, \", df_summarize %>% \n                     filter(Flight == \"Arz\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Duer, \", df_summarize %>% \n                     filter(Flight == \"DuerLow\") %>% \n                     pull(prop) %>% \n                     round(2)),\n            paste0(\"Kerdrean, \", df_summarize %>% \n                     filter(Flight == \"Kerdrean\") %>% \n                     pull(prop) %>% \n                     round(2)))\n)\n\nx_axis_text<-data.frame(\n    x = c(1,3,5,7,9,11),\n    y = c(12.5,12.5,12.5,12.5,12.5,12.5),\n    lab = c(\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\")\n)\n\ny_axis_text<-data.frame(\n    x = c(-0.4,-0.4,-0.4,-0.4,-0.4,-0.4),\n    y = c(11,9,7,5,3,1),\n    lab = c(\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\")\n)\n\n\ncentroid_cells_df<-data.frame(st_coordinates(st_cast(centroid_cells$geometry,\"MULTIPOINT\")),centroid_cells$site)\n\ncentroid_cells_df$col <-NA\ncentroid_cells_df$row <-NA\n\n\n\nfor(i in 1:length(unique(centroid_cells_df$centroid_cells.site))){\n  \n  df_temp<-centroid_cells_df %>% \n    filter(centroid_cells_df$centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i])\n  \n  #### Column \n  \n  for( ii in 1:length(unique(as.character(df_temp$X)))){\n    if(nrow(df_temp %>% \n            filter(X == unique(as.character(df_temp$X))[ii])) == 6){\n      \n      centroid_cells_df<-centroid_cells_df %>% \n        mutate(col = case_when(centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i] ~\n                         case_when(as.character(X) == unique(as.character(df_temp$X))[ii] ~ \n                                   paste0(\"col\",ii),\n                                   TRUE ~ col),\n                         TRUE ~ col))\n    }\n  }\n  \n  #### ROW\n  for( iii in 1:length(unique(as.character(df_temp$Y)))){\n    if(nrow(df_temp %>% \n            filter(Y == unique(as.character(df_temp$Y))[iii])) == 6){\n      \n      centroid_cells_df<-centroid_cells_df %>% \n        mutate(row = case_when(centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i] ~\n                         case_when(as.character(Y) == unique(as.character(df_temp$Y))[iii] ~ \n                                   paste0(\"row\",iii),\n                                   TRUE ~ row),\n                         TRUE ~ row))\n    }\n  }\n  \n}\n\n# other_table_path<-data.frame(\n#   x = c(1,25,1,25,1,25,1,25,\n#         1,1,5,5,9,9,13,13,17,17,21,21,25,25\n#         ),\n#   y= c(-2,-2,-3,-3,-4,-4,-5,-5,\n#        -2,-5,-2,-5,-2,-5,-2,-5,-2,-5,-2,-5,-2,-5\n#        ),\n#   group=c(1,1,9,9,10,10,11,11,\n#           2,2,3,3,4,4,5,5,6,6,7,7,8,8\n#           )\n# )\n# \n# other_table_title <- data.frame(\n#   x = c(-1,3,7,11,15,19,23),\n#   y = c(-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5),\n#   label = c(\"Metrics\",\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n#   group = c(1,2,3,4,5,6,7)\n# )\n# \n# accuracy_by_class<-validation_metrics$byClass %>% \n#   as.data.frame()\n# \n# other_table_values <- data.frame(\n#   x = c(3,7,11,15,19,23,\n#         3,7,11,15,19,23,\n#         3,7,11,15,19,23),\n#   y = c(-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,\n#         -3.5,-3.5,-3.5,-3.5,-3.5,-3.5,\n#         -4.5,-4.5,-4.5,-4.5,-4.5,-4.5),\n#   label = round(c(accuracy_by_class$Sensitivity[c(1:6)],\n#             accuracy_by_class$Specificity[c(1:6)],\n#             accuracy_by_class$`Balanced Accuracy`[c(1:6)]),2)\n# )\n\nother_table_path<-data.frame(\n  x = c(-3,26,-3,26,-3,26,-3,26,-3,26,\n        -3,-3,0,0,3.857,3.857,7.714,7.714,11.571,11.571,15.429,15.429,19.286,19.286,23.142,23.142,26,26\n        ),\n  y= c(-2,-2,-3,-3,-4,-4,-5,-5,-1,-1,\n       -1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5\n       ),\n  group=c(1,1,9,9,10,10,11,11,12,12,13,13,14,14,\n          2,2,3,3,4,4,5,5,6,6,7,7,8,8\n          )\n)\n\nother_table_title <- data.frame(\n  x = c(-1.529,1.929,5.786,9.643,13.5,17.359,21.215,24.571),\n  y = c(-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5),\n  label = c(\"Metrics\",\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\", \"Overall\")\n)\n\nother_table_y_axis<-data.frame(\n  x=c(-0.4,-0.4,-0.4),\n  y=c(-2.5,-3.5,-4.5),\n  label = c(\"Sensitivity\",\"Specificity\", \"Accuracy\")\n)\n\naccuracy_by_class<-validation_metrics$byClass %>% \n  as.data.frame()\n\nother_table_values <- data.frame(\n  x = c(1.929,5.786,9.643,13.5,17.359,21.215,24.571,\n        1.929,5.786,9.643,13.5,17.359,21.215,24.571,\n        1.929,5.786,9.643,13.5,17.359,21.215),\n  y = c(-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,\n        -3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,\n        -4.5,-4.5,-4.5,-4.5,-4.5,-4.5),\n  label = round(c(accuracy_by_class$Sensitivity[c(1:6)],mean(accuracy_by_class$Sensitivity),\n            accuracy_by_class$Specificity[c(1:6)],mean(accuracy_by_class$Specificity),\n            accuracy_by_class$`Balanced Accuracy`[c(1:6)]),2)\n)\n\nglobal_accuracy_coord<-data.frame(x = 24.571,\n                                  y = -4.5,\n                                  label = round(as.numeric(validation_metrics$overall[1]),2))  \n\ncentroid_cells_df_rows<-centroid_cells_df %>% \n  filter(!is.na(row)) %>% \n  mutate(Row = paste0(centroid_cells.site,\"_\",row))\n\ncentroid_cells_df_cols<-centroid_cells_df %>% \n  filter(!is.na(col)) %>% \n  mutate(cols = paste0(centroid_cells.site,\"_\",col))\n\nplot_matrix_global <-\nggplot()+\n  geom_spatraster(data = (confmat_rast),\n                  # show.legend = F,\n                  na.rm = TRUE\n                  )+\n  geom_spatraster(data = confmat_rast_GafanhaLow,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_GafanhaLow_sf,\n          fill = \"transparent\")+\n  geom_spatraster(data = confmat_rast_GafanhaHigh,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_GafanhaHigh_sf,\n          fill = \"transparent\")+\n  geom_spatraster(data = confmat_rast_Boat,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_Boat_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_Horse_rooster,\n                  na.rm = TRUE\n                  )+\n    geom_sf(data = confmat_rast_Horse_rooster_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_NorthDike,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_NorthDike_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_Handfisher_1,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_Handfisher_1_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_Arz,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_Arz_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_DuerLow,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_DuerLow_sf,\n          fill = \"transparent\")+\n    geom_spatraster(data = confmat_rast_Kerdrean,\n                  na.rm = TRUE\n                  )+\n  geom_sf(data = confmat_rast_Kerdrean_sf,\n          fill = \"transparent\")+\n  # geom_sf(data = centroid_cells,\n  #         fill = \"transparent\")+\n  \n  geom_path(data = centroid_cells_df_rows, \n            aes(x = X, y = Y, group = Row),\n            linewidth = 2,\n            linejoin = \"round\",\n            lineend = \"round\",\n            colour = \"grey\")+\n  geom_path(data = centroid_cells_df_cols, \n            aes(x = X, y = Y, group = cols),\n            linewidth = 2,\n            linejoin = \"round\",\n            lineend = \"round\",\n            colour = \"grey\")+\n  scale_fill_gradientn(\n    # colours = c(\"black\",\"firebrick4\",\"goldenrod\",\"yellow\",\"chartreuse3\"),\n    # colours = c(\"khaki1\",\"goldenrod\",\"firebrick3\",\"chartreuse4\"),\n    colours = c(\"khaki1\",\"firebrick4\",\"firebrick4\",\"firebrick4\",\"#3e0b0b\"),\n    # colours = c(\"#7d0000\",\"#00b300\",\"#00b300\",\"#00b300\",\"#007d00\"),\n    na.value = \"white\", \n    trans = \"sqrt\",\n    labels = c(\"0.05\",\"0.25\", \"0.50\", \"0.75\", \"1\"),\n    breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n  # scale_fill_Bede(\"mixed\", \n  #                 discrete = F,\n  #                 reverse = TRUE,\n  #                 na.value = \"white\",\n  #                 trans = \"sqrt\",\n  #                 labels = c(\"5\",\"25\", \"50\", \"75\", \"100\"),\n  #                 breaks = c(0.05,0.25,0.50,0.75,0.9999))+\n  labs(fill = \"Proportion \\n of pixels\")+\n  scale_x_continuous(breaks = seq(1,11, by = 2),\n                     labels = c(\"Sediment\",\"Bacillariophyceae\",\"Chlorophyceae\",\"Magnoliopsida\",\"Rhodophyceae\",\"Phaeophyceae\"),\n                     expand = c(0, 0),\n                     position = \"top\",\n                     limits = c(-4.6,29))+\n  scale_y_continuous(breaks = seq(1,11, by = 2),\n                     labels = c(\"Phaeophyceae\",\"Rhodophyceae\",\"Magnoliopsida\",\"Chlorophyceae\",\"Bacillariophyceae\",\"Sediment\"),\n                     expand = c(0, 0.1),\n                     limits = c(-5,15.5))+\n  geom_polygon(aes(x = c(-3,26,26,-3),\n                   y = c(-4,-4,-5,-5)),\n               fill = \"lightgrey\",\n               color = \"transparent\")+\n  geom_polygon(aes(x = c(23.142,26,26,23.142),\n                   y = c(-1,-1,-4,-4)),\n               fill = \"lightgrey\",\n               color = \"transparent\")+\n  geom_path(\n    data = data.frame(\n      x = c(0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,0,2,2,4,4,6,6,8,8,10,10,12,12),\n      y = c(0,0,2,2,4,4,6,6,8,8,10,10,12,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12),\n      group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14)\n      ),\n    aes(x,y,group= group),\n    linewidth = 1\n    )+\n  geom_path(data = other_table_path,\n            aes(x = x,\n                y = y,\n                group = group),\n            linewidth = 1)+\n  geom_label(\n    data = df_corrected_accuracy,\n    aes(x = x, y = y, label = paste0(round(lab,3)*100,\"%\")),\n    fill = \"#ffffff99\",\n    size = 9\n    )+\n  geom_text(\n    data = df_Sens_Spec,\n    aes(x = x, y = y, label = paste0(round(lab,4)*100,\"%\")),\n    # fill = \"#ffffff99\",\n    size = 8\n    )+\n  geom_text(\n    data = other_table_title,\n    aes(x = x, y = y, label = label),\n    # fill = \"#ffffff99\",\n    size = 8\n    )+\n  geom_text(\n    data = other_table_y_axis,\n    aes(x = x, y = y, label = label),\n    size = 8,\n    hjust = 1,\n    size = 8\n  )+\n  geom_text(\n    data = other_table_values,\n    aes(x = x, y = y, label = label),\n    # fill = \"#ffffff99\",\n    size = 8\n    )+\n  geom_text(\n    data = global_accuracy_coord,\n    aes(x = x, y = y, label = label),\n    # fill = \"#ffffff99\",\n    size = 12,\n    color = \"firebrick4\"\n    \n    )+\n  geom_label(\n    data = df_Label_Sites,\n    aes(x = x, y = y, label = lab),\n    fill = \"#ffffff99\",\n    size = 6.8\n    )+\n  geom_text(\n    data = x_axis_text,\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    # vjust = 1,\n    hjust = 0,\n    size = 9,\n    angle = 40\n    )+\n  geom_text(\n    data = y_axis_text,\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    hjust = 1,\n    size = 9,\n    # angle = 20\n    )+\n  \n  # geom_text(\n  #   aes(x = 13.8, y = 12.72, label = \"Producer's Accuracy\"),\n  #   # fill = \"#ffffff99\",\n  #   size = 9,\n  #   angle = 20\n  #   )+\n  # geom_text(\n  #   aes(x = 0, y = 0, label = \"User's Accuracy\"),\n  #   # fill = \"#ffffff99\",\n  #   size = 9\n  #   )+\n  xlab(\"References\")+\n  ylab(\"Prediction\")+\n  # ggplot2::annotation_custom(ggplotGrob(small_validation_matrices), xmin = 12, ymin = 0)+\n  theme_Bede()+\n  theme(\n  # axis.title.x = element_text(size = 35),\n        # axis.title.y = element_text(size = 35),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n\n        # axis.text.x = element_text(size = 30),\n        axis.text.x = element_blank(),\n        # axis.text.y = element_text(size = 25),\n         axis.text.y = element_blank(),\n        \n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank(), \n        panel.border = element_blank(),\n        axis.line=element_blank(),\n        # legend.position = \"top\",\n        legend.position = c(0.73, 0.9),\n        legend.direction=\"horizontal\",\n        legend.key.width = unit(2,\"cm\"),\n        legend.text = element_text(size = 20),\n        legend.title = element_text(size = 20, vjust = 2),\n        legend.title.align = 0.5,\n        legend.justification = \"center\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Duplicated aesthetics after name standardisation: size\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# plot_matrix_global\n############ Metrics of each sites ###################\n\nArz_metrics_ByClass<-validation_metrics_Arz$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Arz Island\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nArz_metrics_overall<-validation_metrics_Arz$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Arz Island\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nArz_metrics<-rbind(Arz_metrics_ByClass,Arz_metrics_overall)\n\nBoat_metrics_ByClass<-validation_metrics_Boat$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Marinha Lanzarote\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nBoat_metrics_overall<-validation_metrics_Boat$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Marinha Lanzarote\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nBoat_metrics<-rbind(Boat_metrics_ByClass,Boat_metrics_overall)\n\nDuerLow_metrics_ByClass<-validation_metrics_DuerLow$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Duer\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nDuerLow_metrics_overall<-validation_metrics_DuerLow$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Duer\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nDuerLow_metrics<-rbind(DuerLow_metrics_ByClass,DuerLow_metrics_overall)\n\nGafanhaHigh_metrics_ByClass<-validation_metrics_GafanhaHigh$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Gafanha High\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nGafanhaHigh_metrics_overall<-validation_metrics_GafanhaHigh$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Gafanha High\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nGafanhaHigh_metrics<-rbind(GafanhaHigh_metrics_ByClass,GafanhaHigh_metrics_overall)\n\nGafanhaLow_metrics_ByClass<-validation_metrics_GafanhaLow$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Gafanha Low\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nGafanhaLow_metrics_overall<-validation_metrics_GafanhaLow$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Gafanha Low\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nGafanhaLow_metrics<-rbind(GafanhaLow_metrics_ByClass,GafanhaLow_metrics_overall)\n\nHandfisher_1_metrics_ByClass<-validation_metrics_Handfisher_1$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Barbâtre\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nHandfisher_1_metrics_overall<-validation_metrics_Handfisher_1$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Barbâtre\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nHandfisher_1_metrics<-rbind(Handfisher_1_metrics_ByClass,Handfisher_1_metrics_overall)\n\nHorse_rooster_metrics_ByClass<-validation_metrics_Horse_rooster$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Mataducos\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nHorse_rooster_metrics_overall<-validation_metrics_Horse_rooster$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Mataducos\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nHorse_rooster_metrics<-rbind(Horse_rooster_metrics_ByClass,Horse_rooster_metrics_overall)\n\n\nKerdrean_metrics_ByClass<-validation_metrics_Kerdrean$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"Kerdrean\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nKerdrean_metrics_overall<-validation_metrics_Kerdrean$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"Kerdrean\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nKerdrean_metrics<-rbind(Kerdrean_metrics_ByClass,Kerdrean_metrics_overall)\n\nNorthDike_metrics_ByClass<-validation_metrics_NorthDike$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.),\n         Site = \"L'Epine\") %>% \n  pivot_longer(-c(Class,Site),names_to = \"metric\", values_to = \"value\")\n\nNorthDike_metrics_overall<-validation_metrics_NorthDike$overall %>% \n  as.data.frame() %>% \n  rename(value = \".\") %>% \n  mutate(Class = \"All\",\n         Site = \"L'Epine\",\n         metric = rownames(.)) %>% \n  reframe(Class,Site,metric,value)\n\nNorthDike_metrics<-rbind(NorthDike_metrics_ByClass,NorthDike_metrics_overall)\n\n\nBySite_Metrics<-rbind(NorthDike_metrics,Kerdrean_metrics,Horse_rooster_metrics,Handfisher_1_metrics,GafanhaLow_metrics,GafanhaHigh_metrics,DuerLow_metrics,Boat_metrics,Arz_metrics)\n\n\nOverall_metrics_ByClass<-validation_metrics$byClass %>% \n  as.data.frame() %>% \n  mutate(Class = rownames(.) %>% \n           gsub(\"Class: \",\"\",.)) %>% \n  pivot_longer(-c(Class),names_to = \"metric\", values_to = \"value\")\n################\n\nggsave(\"Figures/Validation/ConfusionMatrixGlobal.png\",plot_matrix_global , width = 1920*4, height = 1032*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-Validation .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"./Figures/Validation/ConfusionMatrixGlobal.png\")\n```\n\n::: {.cell-output-display}\n![A global confusion matrix on the left is derived from validation data across each flight, while a mosaic of confusion matrices from individual flights is presented on the right. The labels inside the matrices indicate the balanced accuracy for each class. The labels at the bottom of the matrices indicate the User's accuracy for each class, and those on the right indicate the Producer's Accuracy. The values adjacent to the names of each site represent the proportion of total pixels from that site contributing to the overall matrix. Grey lines within the mosaic indicate the absence of validation data for the class at that site. The table at the bottom summarizes the Sensitivity, Specificity, and Accuracy for each class and for the overall model.](./Figures/Validation/ConfusionMatrixGlobal.png){#fig-Validation width=100%}\n:::\n:::\n\n\n\n\nA total amount of 536,000 pixels have been used to validate the Neural Network classifier. The site with the least amount of validation data is Kerdrean with a total of 5557 pixels whereas Marinha Lanzarote is the site with the most amount of validation data with 159713 pixels. The global accuracy of the model is 94.26% and a Kappa coefficient of 0.92 (@fig-Validation). The least performing site is Gafanha High with an accuracy of 75.45% whereas Mataducos is the site with most accurate prediction, with a global accuracy of 98.05%. Overall Phaeophyceae, Magnoliopsida, Sediment and Rhodophyceae are well classified with a balanced accuracy of 1, 0.96, 0.96 and 0.91 respectively. Bacillariophyceae is the least performing class with an accuracy of 0.72 mainly due to a confusion with Magnoliopsida and Sediment.\n\n## Variable importance\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n################# SPECTRA ########### \nSP1<-read.csv(\"Output/Spectra_VIP.csv\") %>% \n  dplyr::select(-X) %>% \n  mutate(type = \"Min/Max Standardised Spectra\") %>% \n  dplyr::filter(Class != \"Bare Sediment\",\n                Class != \"Sun Glint\",\n                Class != \"Water\",\n                Class != \"Xanthophyceae\",\n                Class != \"A - MagnoliopsidaL\") %>% \n  as_tibble()%>% \n  rename(value = \"STD\")\n\nSP2<-read.csv(\"Output/Spectra_VIP2.csv\") %>% \n  dplyr::select(-X) %>% \n  mutate(type = \"Raw Spectra\",\n         mean = mean / 10000)%>% \n  dplyr::filter(Class != \"Bare Sediment\",\n                Class != \"Sun Glint\",\n                Class != \"Water\",\n                Class != \"Xanthophyceae\",\n                Class != \"A - MagnoliopsidaL\") %>% \n  as_tibble() %>% \n  dplyr::reframe(Class,Wavelength, mean, type) %>% \n  rename(value = \"mean\")\n\nSP<-SP1 %>% \n  rbind(SP2)\n\n\nSP_plot<-ggplot(SP, aes( x = Wavelength, y = value, color = Class))+\n  geom_line(linewidth = 1.5, show.legend = F)+\n  facet_wrap(~ type, scale = \"free\",ncol =1) +\n  scale_color_manual(values=c(\"#389318\", \"#873e23\", \"#b3002d\", \"#b3ff1a\", \"#DAA520\"))+\n  ylab(\"Reflectance\")+\n  xlab(\"Wavelength (nm)\")+\n  theme_Bede()+\n  theme(axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20),\n        axis.title.x = element_text(size = 25),\n        axis.title.y = element_text(size = 25),\n        strip.text = element_text(size=25),\n        legend.position = c(0.2, 0.7),\n        plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),\n        legend.title=element_blank(),\n        legend.text = element_text(size = 5),\n        legend.key.size = unit(0.25, \"cm\"),\n        legend.text.align = 0,\n        panel.border = element_blank(), \n        panel.background = element_blank(),\n        axis.line = element_line(color=\"black\"))\n\n############## VIP ##############\n\nfilelist<-\"Data\" %>% \n  list.files(pattern = \"NN_VIP_byClass_NoXanth.csv\", recursive = T,full.names = T)\n\nVIP<-filelist[which(str_detect(filelist,\"VIP\"))] %>% \n  read.csv() %>% \n  mutate(Magnoliopsida = (Magnoliosida + Low_SPC)/2) %>% \n  dplyr::select(-c(Magnoliosida ,Low_SPC))\n\nVIP1<-VIP %>%\n  dplyr::select(-c(Water,\n                   SunGlint,\n                   Deep_Sediment,\n                   Bare_Sediment)) %>%\n  # dplyr::filter(!str_detect(X,\"NDVI\")) %>% \n  mutate(isSTD = case_when(str_detect(X,\"Stan\") ~ \"Standardised\", \n                         TRUE ~ \"RAW\")) %>%\n  pivot_longer(-c(X,isSTD), names_to = \"Class\",values_to = \"value\") %>% \n  dplyr::filter(X != \"NDVI\",\n                X != \"NDVI_Stan\") %>% \n  group_by(Class) %>%\n  mutate(STD = (value-min(value))/(max(value)-min(value))) %>% \n  ungroup() %>% \n  mutate(Class = case_when(Class == \"Magnoliosida\" ~ \"Magnoliopsida\",\n                           Class == \"Low_SPC\" ~ \"Magnoliopsida\",\n                           Class == \"Clorophyta\" ~ \"Chlorophyceae\",\n                           Class == \"Rhodphyta\" ~ \"Rhodophyceae\",\n                           Class == \"MPB\" ~ \"Bacillariophyceae\",\n                           Class == \"Phaeophyta\" ~ \"Phaeophyceae\",\n                           TRUE ~ Class),\n         Variable = str_replace_all(str_replace_all(str_replace_all(X,\"Reflectance\",\"\"),\"Stan\",\"\"),\"_\",\"\")) %>% \n  dplyr::filter(Class != \"Total\") \n\nVIP_summarised<-VIP1 %>% \n  group_by(Variable, Class) %>% \n  dplyr::summarise(sumVIP = sum(STD)) %>% \n  ungroup() %>% \n  group_by(Class) %>% \n  mutate(STD = (sumVIP-min(sumVIP))/(max(sumVIP)-min(sumVIP)))\n\nVIP_subPLOT<-VIP_summarised %>% \n  ggplot(aes(x = Variable, y = STD, fill = Class)) +\n  geom_col(color = \"black\",position =  \"dodge\") +\n  coord_polar()+\n  scale_y_continuous(limits = c(0,1), breaks = c(0.25,0.5,0.75,1))+\n  facet_wrap(~Class)+\n  scale_fill_manual(\"Class\", labels = c(\"Bacillariophyceae\",\"Chlorophyceae\", \"Magnoliopsida\", \"Phaeophyceae\",\"Rhodophyceae\"),\n                    values = c(\"#DAA520\",\"#b3ff1a\", \"#389318\",\"#873e23\",\"#b3002d\"))+\n  theme_Bede()+\n  theme(panel.grid.major.y = element_line(linetype = \"dotted\",color = c(\"grey9\",\"grey9\",\"grey9\",\"grey9\",NA)))+\n  ylab(\"Importance\")+\n  theme(legend.position=\"top\",\n        strip.text = element_text(size = 25),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.ticks.y =element_blank(),\n        axis.title.x =element_blank(),\n        axis.title.y =element_text(size = 20),\n        legend.key.size = unit(1, 'cm'),\n        legend.title = element_text(size=20),\n        legend.text = element_text(size=20))+\n  guides(fill = guide_legend(nrow = 1))\n\nVIP_PLOT<-VIP_subPLOT+\n  # geom_text(aes(label = \"Standardised Reflectance Spectra\"), color = \"black\", size = 8)+\n  inset_element(SP_plot,left = 0.6341, top = 0.47, bottom = -0.01, right = 0.90,  align_to = \"full\")\nVIP_PLOT\nggsave(\"Figures/VIP/Fig_VIP.png\", VIP_PLOT, width = 1920*4, height = 1129*4, units = \"px\")\n\n\n################# VIP NDVI ######################\n\nVIP_NDVI<-\n  VIP %>%\n  dplyr::select(-c(Water,\n                   SunGlint,\n                   Deep_Sediment,\n                   Bare_Sediment)) %>%\n  # dplyr::filter(!str_detect(X,\"NDVI\")) %>% \n  mutate(isSTD = case_when(str_detect(X,\"Stan\") ~ \"Standardised\", \n                         TRUE ~ \"RAW\")) %>%\n  pivot_longer(-c(X,isSTD), names_to = \"Class\",values_to = \"value\") %>% \n  dplyr::filter(X == \"NDVI\") %>% \n  group_by(Class) %>%\n  mutate(STD = (value-min(value))/(max(value)-min(value))) %>% \n  ungroup() %>% \n  mutate(Class = case_when(Class == \"Magnoliosida\" ~ \"Magnoliopsida\",\n                           Class == \"Low_SPC\" ~ \"Magnoliopsida\",\n                           Class == \"Clorophyta\" ~ \"Chlorophyceae\",\n                           Class == \"Rhodphyta\" ~ \"Rhodophyceae\",\n                           Class == \"MPB\" ~ \"Bacillariophyceae\",\n                           Class == \"Phaeophyta\" ~ \"Phaeophyceae\",\n                           TRUE ~ Class),\n         Variable = str_replace_all(str_replace_all(str_replace_all(X,\"Reflectance\",\"\"),\"Stan\",\"\"),\"_\",\"\")) %>% \n  dplyr::filter(Class != \"Total\") %>% \n  group_by(Class) %>% \n  summarise(sum = sum(value)) %>% \n  mutate(STD = (sum-min(sum))/(max(sum)-min(sum))) %>% \n  ggplot(aes(x = Class, y = STD, fill = Class)) +\n  geom_col(color = \"black\",position =  \"dodge\") +\n  # coord_polar()+\n  scale_y_continuous(limits = c(0,1), breaks = c(0.25,0.5,0.75,1))+\n  # facet_wrap(~Class)+\n  scale_fill_manual(\"Class\", labels = c(\"Bacillariophyceae\",\"Chlorophyceae\", \"Magnoliopsida\", \"Phaeophyceae\",\"Rhodophyceae\"),\n                    values = c(\"#DAA520\",\"#b3ff1a\", \"#389318\",\"#873e23\",\"#b3002d\"))+  theme_Bede()+\n  theme(panel.grid.major.y = element_line(linetype = \"dotted\",color = c(\"grey9\",\"grey9\",\"grey9\",\"grey9\",NA)))+\n  ylab(\"Importance\")+\n  theme(legend.position=\"top\",\n        strip.text = element_text(size = 25),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 20),\n        axis.ticks.y =element_blank(),\n        axis.title.x =element_blank(),\n        axis.title.y =element_text(size = 20),\n        legend.key.size = unit(1, 'cm'),\n        legend.title = element_text(size=20),\n        legend.text = element_text(size=20))+\n  guides(fill = guide_legend(nrow = 1))\n```\n:::\n\n::: {#cell-fig-VIP .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figures/VIP/Fig_VIP.png\")\n```\n\n::: {.cell-output-display}\n![Variable Importance of the Neural Network Classifier for each vegetation class. The bigger the slice, the more important is the variable to predict accuratly this class. The bottom right plot shows the drone standardised reflectance spectra of each class.](Figures/VIP/Fig_VIP.png){#fig-VIP width=100%}\n:::\n:::\n\n\n\n\nThe computation of the importance variable of each class indicate which wavelength is mandatory to accurately predict the class (@fig-VIP). Bands at 444 nm, 717 nm and 842 nm of the Micasense camera are important for none of the vegetation classes. The band at 531 nm is the only important predictor for the classifier to accuratly predict chlorophyceae. In fact, at this wavelength, the Chlorophyceae spectra has the maximum reflectance value of all the classes. 531 nm and 740 nm are the most important predictors to predict Phaeophyceae, corresponding to the minimum reflectance value among all the classes. Bands at 475 and 560 nm are the most important predictors for Bacillariophyceae and Rhodophyceae, respectively. 4 predictors, ranging from the Green (560 nm) to the RedEdge (705 nm) are important to predict accurately magnoliopsida.\n\n## Effect of the flight height on the prediction\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nif(length(list.files(\"./Output\",pattern = \"output_80_filtered_Upscaling.csv\")) == 0 ){\n imglist<-\"Output/High_Flights_correction/Low_flight_spatial_resampling/\" %>%\n   list.files(\".tif\",full.names = T) %>%\n   as.data.frame() %>%\n   rename(path = \".\") %>%\n   mutate(size = case_when(str_detect(path,\"_8_7x7.tif\") ~ 8,\n                           str_detect(path,\"16.tif\") ~ 16,\n                           str_detect(path,\"32.tif\") ~ 32,\n                           str_detect(path,\"48.tif\") ~ 48,\n                           str_detect(path,\"64.tif\") ~ 64,\n                           str_detect(path,\"80.tif\") ~ 80),\n          type = case_when(str_detect(path, \"ortho\") ~ \"ortho\",\n                           str_detect(path, \"pred\") ~ \"Pred\",\n                           TRUE ~ \"Prob\"))\n\npred_8<-imglist %>%\n   filter(size == 8,\n          type == \"Pred\") %>%\n   pull(path) %>%\n   terra::rast()\n names(pred_8)<-\"Pred_8\"\n\n pred_80<-imglist %>%\n   filter(size == 80,\n          type == \"Pred\") %>%\n   pull(path) %>%\n   terra::rast()\n names(pred_80)<-\"Pred_80\"\n \nprob_80<-imglist %>%\n   filter(size == 80,\n          type == \"Prob\") %>%\n   pull(path) %>%\n   terra::rast()\n names(prob_80)<-\"Prob_80\"\n\n\n model_80<-imglist %>%\n   filter(size == 80,\n          type == \"Pred\") %>%\n   pull(path) %>%\n   terra::rast()\n values(model_80)<-c(1:ncell(model_80))\n names(model_80)<-\"ID_80\"\n\n\n model_80_rs_to_8<-terra::resample(model_80,pred_8,method = \"near\")\n names(model_80_rs_to_8)<-\"ID_80\"\n\n df_80_8<-terra::rast(list(model_80_rs_to_8,pred_8)) %>%\n   as.data.frame(xy=F) %>%\n   filter(!Pred_8 == 0)\n\n df_80<-terra::rast(list(model_80,pred_80,prob_80)) %>%\n   as.data.frame(xy=F) %>%\n   filter(!Pred_80 == 0)\n\n#############\noutput_80<-df_80 %>% \n  left_join(df_80_8, by = \"ID_80\") %>% \n  filter(!is.na(Pred_8)) %>% \n  mutate(Class_80 = case_when(Pred_80 == 1 ~ \"Bare Sediment\",\n                              Pred_80 == 2 ~ \"Green Algae\",\n                              Pred_80 == 3 ~ \"Bare Sediment\",\n                              Pred_80 == 4 ~ \"Magnoliopsida\",\n                              Pred_80 == 5 ~ \"Microphytobenthos\",\n                              Pred_80 == 6 ~ \"Magnoliopsida\",\n                              Pred_80 == 7 ~ \"Phaeophyceae\",\n                              Pred_80 == 8 ~ \"Rhodophyceae\",\n                              Pred_80 == 9 ~ \"Sun Glint\",\n                              Pred_80 == 10 ~ \"Water\",\n                              Pred_80 == 11 ~ \"Xanthophyceae\",\n                              TRUE ~ as.character(Pred_80)),\n         Class_8 = case_when(Pred_8 == 1 ~ \"Bare Sediment\",\n                              Pred_8 == 2 ~ \"Green Algae\",\n                              Pred_8 == 3 ~ \"Bare Sediment\",\n                              Pred_8 == 4 ~ \"Magnoliopsida\",\n                              Pred_8 == 5 ~ \"Microphytobenthos\",\n                              Pred_8 == 6 ~ \"Magnoliopsida\",\n                              Pred_8 == 7 ~ \"Phaeophyceae\",\n                              Pred_8 == 8 ~ \"Rhodophyceae\",\n                              Pred_8 == 9 ~ \"Sun Glint\",\n                              Pred_8 == 10 ~ \"Water\",\n                              Pred_8 == 11 ~ \"Xanthophyceae\",\n                              TRUE ~ as.character(Pred_8))\n         ) %>% \n   dplyr::filter(Class_80 != \"Water\",\n                 Class_80 != \"Phaeophyceae\",\n                 Class_80 != \"Sun Glint\",\n                 Class_8 != \"Water\",\n                 Class_8 != \"Phaeophyceae\",\n                 Class_8 != \"Sun Glint\") %>% \n           group_by(ID_80, Prob_80) %>% \n           summarise(prop_Sed = sum((Pred_8 == 1)|(Pred_8 == 3))/n(),\n                     prop_Green = sum(Pred_8 == 2)/n(),\n                     prop_Magno = sum((Pred_8 == 4)|(Pred_8 == 6))/n(),\n                     prop_MPB = sum(Pred_8 == 5)/n(),\n                     prop_Rodo = sum(Pred_8 == 8)/n(),\n                     prop_Xantho = sum(Pred_8 == 11)/n(),\n                     True = unique(Class_80)) %>%\n  pivot_longer(-c(ID_80,True,Prob_80), names_to = \"Class\", values_to = \"Proportion\") %>% \n  mutate(Class = case_when(Class == \"prop_Sed\" ~ \"Bare Sediment\",\n                           Class == \"prop_Green\" ~ \"Green Algae\",\n                           Class == \"prop_Magno\" ~ \"Magnoliopsida\",\n                           Class == \"prop_MPB\" ~ \"Microphytobenthos\",\n                           Class == \"prop_Pheo\" ~ \"Phaeophyceae\",\n                           Class == \"prop_Rodo\" ~ \"Rhodophyceae\",\n                           Class == \"prop_Glint\" ~ \"Sun Glint\",\n                           Class == \"prop_Water\" ~ \"Water\",\n                           Class == \"prop_Xantho\" ~ \"Xanthophyceae\"),\n         same = case_when(True == Class ~ 1,\n                          TRUE ~ 0)) %>% \n  dplyr::filter(!Proportion == 0)\n \n  list<-output_80 %>% \n  dplyr::filter(Proportion == 1,\n                Class == True) %>% \n  pull(ID_80)\n\noutput_80_filtered<-output_80 %>% \n  dplyr::filter(!ID_80 %in% list )\n\n\n\noutput_80_filtered_same<-output_80_filtered %>% \n  dplyr::filter(same == 1)\n\nwrite.csv(output_80_filtered, \"./Output/output_80_filtered_Upscaling.csv\")\nwrite.csv(output_80_filtered_same, \"./Output/output_80_filtered_same_Upscaling.csv\")\n\n}else{\n  \n  output_80_filtered<-read.csv(\"./Output/output_80_filtered_Upscaling.csv\") %>% \n    dplyr::mutate(Proportion = Proportion *100) %>% \n    dplyr::select(-X) %>% \n    as_tibble()\n  output_80_filtered_same<-read.csv(\"./Output/output_80_filtered_same_Upscaling.csv\")%>% \n    dplyr::mutate(Proportion = Proportion *100) %>% \n    dplyr::select(-X) %>% \n    as_tibble()\n}\n\n################# LM ####################\nlm_sediment<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Bare Sediment\") \n\n lm_sediment<- lm(lm_sediment$Prob_80 ~ lm_sediment$Proportion)\n \n lm_green<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Green Algae\") \n  lm_green<- lm(lm_green$Prob_80 ~ lm_green$Proportion)\n \n lm_magno<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Magnoliopsida\") \n   lm_magno<- lm(lm_magno$Prob_80 ~ lm_magno$Proportion)\n\n \n lm_MPB<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Microphytobenthos\")\n    lm_MPB<- lm(lm_MPB$Prob_80 ~ lm_MPB$Proportion)\n    \nlm_Rodo<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Rodophyceae\")\n    lm_Rodo<- lm(lm_Rodo$Prob_80 ~ lm_Rodo$Proportion)\n \n ########### ALPHA ###############\nalpha_sed<-data.frame(prop = seq(0,1,  0.01)) %>% \n  mutate(alpha = lm_sediment$coefficients[[2]]*prop+lm_sediment$coefficients[[1]],\n         ID = c(1:nrow(.)),\n         xmin = seq(0,1,  0.01),\n         xmax = seq(0.01,1.01,0.01),\n         ymin = rep(0,nrow(.)),\n         ymax = rep(1,nrow(.))) %>% \n  pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n  pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n  dplyr::select(-c(name_x,name_y)) %>% \n  mutate(alpha = case_when(alpha > 1 ~ 1,\n                           TRUE ~ alpha),\n         alpha = 1-alpha)%>% \n  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\nalpha_green<-data.frame(prop = seq(0,1,  0.01)) %>% \n  mutate(alpha = lm_green$coefficients[[2]]*prop+lm_green$coefficients[[1]],\n         ID = c(1:nrow(.)),\n         xmin = seq(0,1,  0.01),\n         xmax = seq(0.01,1.01,0.01),\n         ymin = rep(0,nrow(.)),\n         ymax = rep(1,nrow(.))) %>% \n  pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n  pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n  dplyr::select(-c(name_x,name_y)) %>% \n  mutate(alpha = case_when(alpha > 1 ~ 1,\n                           TRUE ~ alpha),\n         alpha = 1-alpha)%>% \n  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\nalpha_magno<-data.frame(prop = seq(0,1,  0.01)) %>% \n  mutate(alpha = lm_magno$coefficients[[2]]*prop+lm_magno$coefficients[[1]],\n         ID = c(1:nrow(.)),\n         xmin = seq(0,1,  0.01),\n         xmax = seq(0.01,1.01,0.01),\n         ymin = rep(0,nrow(.)),\n         ymax = rep(1,nrow(.))) %>% \n  pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n  pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n  dplyr::select(-c(name_x,name_y)) %>% \n  mutate(alpha = case_when(alpha > 1 ~ 1,\n                           TRUE ~ alpha),\n         alpha = 1-alpha)%>% \n  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\nalpha_MPB<-data.frame(prop = seq(0,1,  0.01)) %>% \n  mutate(alpha = lm_MPB$coefficients[[2]]*prop+lm_MPB$coefficients[[1]],\n         ID = c(1:nrow(.)),\n         xmin = seq(0,1,  0.01),\n         xmax = seq(0.01,1.01,0.01),\n         ymin = rep(0,nrow(.)),\n         ymax = rep(1,nrow(.))) %>% \n  pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n  pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n  dplyr::select(-c(name_x,name_y)) %>% \n  mutate(alpha = case_when(alpha > 1 ~ 1,\n                           TRUE ~ alpha),\n         alpha = 1-alpha)%>% \n  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\nalpha_Rodo<-data.frame(prop = seq(0,1,  0.01)) %>% \n  mutate(alpha = lm_Rodo$coefficients[[2]]*prop+lm_Rodo$coefficients[[1]],\n         ID = c(1:nrow(.)),\n         xmin = seq(0,1,  0.01),\n         xmax = seq(0.01,1.01,0.01),\n         ymin = rep(0,nrow(.)),\n         ymax = rep(1,nrow(.))) %>% \n  pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n  pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n  dplyr::select(-c(name_x,name_y)) %>% \n  mutate(alpha = case_when(alpha > 1 ~ 1,\n                           TRUE ~ alpha),\n         alpha = 1-alpha)%>% \n  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\n# alpha_xantho<-data.frame(prop = seq(0,1,  0.01)) %>% \n#   mutate(alpha = lm_xantho$coefficients[[2]]*prop+lm_xantho$coefficients[[1]],\n#          ID = c(1:nrow(.)),\n#          xmin = seq(0,1,  0.01),\n#          xmax = seq(0.01,1.01,0.01),\n#          ymin = rep(0,nrow(.)),\n#          ymax = rep(1,nrow(.))) %>% \n#   pivot_longer(c(xmin,xmax),names_to = \"name_x\", values_to = \"x\") %>% \n#   pivot_longer(c(ymax,ymin), names_to = \"name_y\",values_to = \"y\") %>% \n#   mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% \n#   dplyr::select(-c(name_x,name_y)) %>% \n#   mutate(alpha = case_when(alpha > 1 ~ 1,\n#                            TRUE ~ alpha),\n#          alpha = 1-alpha) %>% \n#   mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))\n\n#################\n\nsediment<-output_80_filtered %>% \n  dplyr::filter(True == \"Bare Sediment\") %>% \n  mutate(Class = case_when(Class != True ~ \"Other\",\n                            TRUE ~ Class)) %>% \n  group_by(ID_80,Class) %>% \n  reframe(Prob_80 = unique(Prob_80),\n          True = unique(True),\n          Class = unique(Class),\n          Proportion = sum(Proportion)) %>% \n  mutate(Class = as.factor(Class),\n         Class = forcats::fct_relevel(Class,\"Bare Sediment\", after = Inf)) %>% \n  ggplot()+\n  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = \"fill\",adjust = 3)+\n  # facet_wrap(~ True)+\n  scale_fill_manual(values=c(\"gray85\",\"#70543e\"))+\n  # scale_alpha_manual(values = c(0.5,1))+\n  theme_Bede()+\n  # geom_polygon(data = alpha_sed, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_sed$alpha,color=NA, fill = \"white\")+\n  geom_vline(xintercept = (lm_sediment$coefficients[[2]]*85+lm_sediment$coefficients[[1]])*100, linetype = \"dashed\",linewidth = 2)+\n  ggtitle(\"Bare Sediment\")+\n  # annotate(geom=\"text\",x = lm_sediment$coefficients[[2]]*0.85+lm_sediment$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n  theme(axis.text.x = element_text(size = 15),\n        axis.text.y = element_text(size = 15)\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_text(size = 20)\n        )\n\ngreen<-output_80_filtered %>% \n  dplyr::filter(True == \"Green Algae\") %>% \n  mutate(Class = case_when(Class != True ~ \"Other\",\n                            TRUE ~ Class)) %>% \n  group_by(ID_80,Class) %>% \n  reframe(Prob_80 = unique(Prob_80),\n          True = unique(True),\n          Class = unique(Class),\n          Proportion = sum(Proportion)) %>%\n  mutate(Class = as.factor(Class),\n         Class = forcats::fct_relevel(Class,\"Green Algae\", after = Inf)) %>% \n  ggplot()+\n  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = \"fill\",adjust = 3)+\n  # facet_wrap(~ True)+\n  scale_fill_manual(values=c(\"gray85\", \"#b3ff1a\"))+\n  # scale_alpha_manual(values = c(0.5,1))+\n  theme_Bede()+\n  # geom_polygon(data = alpha_green, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_green$alpha,color=NA, fill = \"white\")+\n  geom_vline(xintercept = (lm_green$coefficients[[2]]*85+lm_green$coefficients[[1]])*100, linetype = \"dashed\",linewidth = 2)+\n  ggtitle(\"Green Algae\")+\n  # annotate(geom=\"text\",x = lm_green$coefficients[[2]]*0.85+lm_green$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n  theme(axis.text.x = element_text(size = 15),\n        axis.text.y = element_text(size = 15)\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_text(size = 20)\n        )\n\nmagno<-output_80_filtered %>% \n  dplyr::filter(True == \"Magnoliopsida\") %>% \n  mutate(Class = case_when(Class != True ~ \"Other\",\n                            TRUE ~ Class)) %>% \n  group_by(ID_80,Class) %>% \n  reframe(Prob_80 = unique(Prob_80),\n          True = unique(True),\n          Class = unique(Class),\n          Proportion = sum(Proportion)) %>%\n  mutate(Class = as.factor(Class),\n         Class = forcats::fct_relevel(Class,\"Magnoliopsida\", after = Inf)) %>%\n  ggplot()+\n  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F, position = \"fill\",adjust = 3)+\n  # facet_wrap(~ True)+\n  scale_fill_manual(values=c(\"gray85\",\"#389350\"))+\n  # scale_alpha_manual(values = c(0.5,1))+\n  theme_Bede()+\n  # geom_polygon(data = alpha_magno, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_magno$alpha,color=NA, fill = \"white\")+\n  geom_vline(xintercept = (lm_magno$coefficients[[2]]*85+lm_magno$coefficients[[1]])*100, linetype = \"dashed\",linewidth = 2)+\n  ggtitle(\"Magnoliopsida\")+\n  # annotate(geom=\"text\",x = lm_magno$coefficients[[2]]*0.85+lm_magno$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n  theme(axis.text.x = element_text(size = 15),\n        axis.text.y = element_text(size = 15)\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_text(size = 20)\n        )\n\n\nMPB<-output_80_filtered %>% \n  dplyr::filter(True == \"Microphytobenthos\") %>% \n  mutate(Class = case_when(Class != True ~ \"Other\",\n                            TRUE ~ Class)) %>% \n  group_by(ID_80,Class) %>% \n  reframe(Prob_80 = unique(Prob_80),\n          True = unique(True),\n          Class = unique(Class),\n          Proportion = sum(Proportion)) %>%\n  mutate(Class = as.factor(Class),\n         Class = forcats::fct_relevel(Class,\"Microphytobenthos\", after = Inf)) %>%\n  ggplot()+\n  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = \"fill\",adjust = 3)+\n  # facet_wrap(~ True)+\n  scale_fill_manual(values=c(\"gray85\",\"#DAA520\"))+\n  # scale_alpha_manual(values = c(0.5,1))+\n  theme_Bede()+\n  # geom_polygon(data = alpha_MPB, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_MPB$alpha,color=NA, fill = \"white\")+\n  geom_vline(xintercept = (lm_MPB$coefficients[[2]]*85+lm_MPB$coefficients[[1]])*100, linetype = \"dashed\",linewidth = 2)+\n  ggtitle(\"Microphytobenthos\")+\n  # annotate(geom=\"text\",x = lm_MPB$coefficients[[2]]*0.85+lm_MPB$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n  theme(axis.text.x = element_text(size = 15),\n        axis.text.y = element_text(size = 15)\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_text(size = 20)\n        )\n\nrodo<-output_80_filtered %>% \n  dplyr::filter(True == \"Rodophyceae\") %>% \n  mutate(Class = case_when(Class != True ~ \"Others Classes\",\n                           Class == \"Rodophyceae\" ~ \"Rhodophyceae\",\n                            TRUE ~ Class),\n         True = case_when(True == \"Rodophyceae\" ~ \"Rhodophyceae\",\n                          TRUE ~ True)) %>% \n  group_by(ID_80,Class) %>% \n  reframe(Prob_80 = unique(Prob_80),\n          True = unique(True),\n          Class = unique(Class),\n          Proportion = sum(Proportion)) %>%\n  mutate(Class = factor(Class, c(\"Others Classes\",\"Rhodophyceae\",\"Bacillariophyceae\", \"Magnoliopsida\",\"Chlorophyceae\",\"Phaeophyceae\"))) %>% \n         # Class = forcats::fct_relevel(Class,\"Rodophyceae\", after = Inf)) %>%\n  ggplot()+\n  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,position = \"fill\",adjust = 3)+\n  # facet_wrap(~ True)+\n  scale_fill_manual(\"Class\",\n                    labels = c(\"Others Classes\",\"Rhodophyceae\",\"Bacillariophyceae\", \"Magnoliopsida\",\"Chlorophyceae\",\"Phaeophyceae\"),\n                    values=c(\"gray85\",\"#b3002d\",\"#DAA520\",\"#389350\",\"#b3ff1a\",\"#70543e\"),\n                    drop = F)+\n  # scale_alpha_manual(values = c(0.5,1))+\n  theme_Bede()+\n  # geom_polygon(data = alpha_Rodo, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_Rodo$alpha,color=NA, fill = \"white\")+\n  geom_vline(xintercept = (lm_Rodo$coefficients[[2]]*85+lm_Rodo$coefficients[[1]])*100, linetype = \"dashed\",linewidth = 2)+\n  ggtitle(\"Rhodophyceae\")+\n  # annotate(geom=\"text\",x = lm_Rodo$coefficients[[2]]*0.85+lm_Rodo$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n  theme(axis.text.x = element_text(size = 15),\n        axis.text.y = element_text(size = 15),\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_text(size = 20),\n        legend.text = element_text(size = 15),\n        legend.key.size = unit(1,\"cm\"),\n        legend.title = element_blank())\n\n# xantho<-output_80_filtered %>% \n#   dplyr::filter(True == \"Xanthophyceae\") %>% \n#   ggplot()+\n#   geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),position = \"fill\",adjust = 3)+\n#   # facet_wrap(~ True)+\n#   scale_fill_manual(values=c(\"#70543e\", \"#b3ff1a\", \"#389350\", \"#DAA520\",\"#b3002d\", \"#cccc00\"))+\n#   # scale_alpha_manual(values = c(0.5,1))+\n#   theme_Bede()+\n#   geom_polygon(data = alpha_xantho, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_xantho$alpha,color=NA, fill = \"white\")+\n#   geom_vline(xintercept = lm_xantho$coefficients[[2]]*0.85+lm_xantho$coefficients[[1]])+\n#   ggtitle(\"Xanthophyceae\")+\n#   annotate(geom=\"text\",x = lm_xantho$coefficients[[2]]*0.85+lm_xantho$coefficients[[1]]+0.05, y = 0.85, label = \"p = 0.85\", angle = - 90, size = 7)+\n#   theme(axis.text.x = element_text(size = 15, angle = 45, hjust = 0.7),\n#         axis.text.y = element_text(size = 15),\n#         axis.title.y = element_blank(),\n#         axis.title.x = element_text(size = 20))\n\nplot<-(sediment + green) /\n(MPB + rodo)+\nmagno+\n  patchwork::plot_layout(guides = \"collect\") &\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(size=25, hjust = 0.55),\n        axis.text.x = element_text(size = 15, hjust = 0.8),\n        axis.title = element_text(size=20),\n        axis.text.y = element_text(size = 15),\n        panel.grid=element_blank())&\n  scale_x_continuous(breaks = c(25,50,75,100),limits= c(0,100.01),expand = c(0, 0)) &\n  scale_y_continuous(expand = c(0, 0)) &\n  xlab(\"Percent Cover (%)\") & \n  ylab(\"Density\")\n  \nggsave(\"Figures/Upscaling/density_vs_Proportion.png\",plot , width = 833*4, height = 1118*4, units = \"px\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\noutput_80_filtered_same<-read.csv(\"./Output/output_80_filtered_same_Upscaling.csv\")%>% \n    dplyr::mutate(Proportion = Proportion *100) %>% \n    dplyr::select(-X) %>% \n    as_tibble()\n\n################# LM ####################\nlm_sediment<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Bare Sediment\") \n\n lm_sediment<- lm(lm_sediment$Prob_80 ~ lm_sediment$Proportion)\n \n lm_green<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Green Algae\") \n  lm_green<- lm(lm_green$Prob_80 ~ lm_green$Proportion)\n \n lm_magno<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Magnoliopsida\") \n   lm_magno<- lm(lm_magno$Prob_80 ~ lm_magno$Proportion)\n\n \n lm_MPB<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Microphytobenthos\")\n    lm_MPB<- lm(lm_MPB$Prob_80 ~ lm_MPB$Proportion)\n    \nlm_Rodo<-output_80_filtered_same %>%\n  dplyr::filter(Class == \"Rodophyceae\")\n    lm_Rodo<- lm(lm_Rodo$Prob_80 ~ lm_Rodo$Proportion)\n```\n:::\n\n::: {#cell-fig-upscaling .cell}\n\n```{.r .cell-code .hidden}\nknitr::include_graphics(\"Figures/Upscaling/density_vs_Proportion.png\")\n```\n\n::: {.cell-output-display}\n![Kernel density plot showing the proportion of pixel well classified based on the percent cover of the class in high altitude flight pixels of Gafanha, Portugal. Each subplot shows all the pixels of the same classes on the hight altitude flight. Percent cover of classes is retrieve using the result of the classification of the low altitude flight of Gafanha, Portugal. The vertical dashed line shows the 0.85 probability of the model. Everything on the right of this line has a probability higher then 0.85 and everuthing on the left of this line has a probability lower.](Figures/Upscaling/density_vs_Proportion.png){#fig-upscaling width=90%}\n:::\n:::\n\n\n\n\n@fig-upscaling is showing the percent cover of a class required to classify correctly the high altitude flight. When the percent cover of the class is 100 %, big pixels are well classified for all the classes excepted for Bare Sediment, where it's well classified 80% of the time. A vegetative percent cover of at least 80% is need to have all the big pixels well classified, at the exception of Magnoliopsida that needs an higher percent cover (\\>90 %) to be well classified. Concerning the probability of each class, a really high Percent cover is needed to confidently predict Bacillariophyceae. To predict Chlorophyceae with a confidence of 0.85, a percent cover of 93 % is needed, 90 % for magnoliopsida, 92 % for Rhodophyceae and 97 % for Bacillariophyceae.\n\n# Discussion\n\n\n## Seagrass Discrimination \n\n## Spatial and Spectral Resolution impact on the prediction\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndf_pigment<-\n  data.frame(\n    Classes=c(\"Magnoliopsida\",\n           \"Chlorophyceae\",\n           \"Bacillariophyceae\",\n           \"Phaeophyceae\",\n           \"Rhodophyceae\"),\n    chlb=c(1,1,0,0,0),\n    chlc=c(0,0,1,1,0),\n    fuco=c(0,0,1,1,0),\n    zea=c(1,1,0,1,0),\n    diad=c(0,0,1,0,0),\n    lutein=c(1,1,0,0,0),\n    Neox=c(1,1,0,0,0),\n    PE=c(0,0,0,0,1),\n    PC=c(0,0,0,0,1))%>%\n  select(-Classes) %>% \n  as.matrix() %>% \n  as.array() %>% \n  rast()\n\next(df_pigment)<-c(0,9,0,5)\n\n\ny_axis_text_pigment<-data.frame(x = rep(-0.05,5),\n                                y = c(0.5,1.5,2.5,3.5,4.5), \n                                lab = c(\"Rhodophyceae\",\n                                    \"Phaeophyceae\",\n                                    \"Bacillariophy.\",\n                                    \"Chlorophyceae\",\n                                    \"Magnoliopsida\")\n                                )\nx_axis_text_pigment<-data.frame(y = rep(5.5,9),\n                                x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),\n                                lab = c(\"Chlb\",\"Chlc\",\"Fuco\",\"Zea\",\"Diad\",\"Lut\",\"Neo\",\"PE\",\"PC\")\n                                )\n\n\n\n\nmin_x_line = -1.5\nmax_y_line = 6\n\nline_grid<-data.frame(xmin=NA,\n                      xmax=NA,\n                      ymin=NA,\n                      ymax=NA,\n                      group=NA)\n\nfor(i in 0:max_y_line){\n  line_grid[i+1,1]=min_x_line\n  line_grid[i+1,2]=9\n  line_grid[i+1,3]=i\n  line_grid[i+1,4]=i\n  line_grid[i+1,5]=i+1\n}\nnrowgrid=nrow(line_grid)\nfor(i in 0:9){\n  line_grid[i+1+nrowgrid,1]=i\n  line_grid[i+1+nrowgrid,2]=i\n  line_grid[i+1+nrowgrid,3]=0\n  line_grid[i+1+nrowgrid,4]=max_y_line\n  line_grid[i+1+nrowgrid,5]=i+1+nrowgrid\n  \n}\n\n line_grid[nrow(line_grid)+1,1] = min_x_line\n line_grid[nrow(line_grid),2] = min_x_line\n line_grid[nrow(line_grid),3] = 0\n line_grid[nrow(line_grid),4] = max_y_line\n line_grid[nrow(line_grid),5] = nrow(line_grid)\n\n \n line_grid<- line_grid %>% \n   rbind(c(-1.5,9,-0.6,-0.6,19))%>% \n   rbind(c(-1.5,-1.5,-0.6,0,20))%>% \n   rbind(c(0,0,-0.6,0,21))%>% \n   rbind(c(1,1,-0.6,0,22))%>% \n   rbind(c(2,2,-0.6,0,23))%>% \n   rbind(c(3,3,-0.6,0,24))%>% \n   rbind(c(4,4,-0.6,0,25))%>% \n   rbind(c(5,5,-0.6,0,26))%>% \n   rbind(c(6,6,-0.6,0,27))%>% \n   rbind(c(7,7,-0.6,0,28))%>% \n   rbind(c(8,8,-0.6,0,29))%>% \n   rbind(c(9,9,-0.6,0,30))\n \n \n Absorption_wv<- data.frame(x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),\n                            y = rep(-0.3,9),\n                            lab = c(\"650\",\"636\",\"550\",\"489\",\"496\",\"490\",\"450\",\"566\",\"615\"))\n \n \nrast_pigment<-ggplot()+\n  geom_spatraster(data = (df_pigment),\n                  # show.legend = F,\n                  na.rm = TRUE\n                  )+\n  coord_fixed(ratio = 0.7)+\n  scale_fill_gradientn(\n    # colours = c(\"black\",\"firebrick4\",\"goldenrod\",\"yellow\",\"chartreuse3\"),\n    # colours = c(\"khaki1\",\"goldenrod\",\"firebrick3\",\"chartreuse4\"),\n    colours = c(\"firebrick4\",\"orange\",\"#007d00\"),\n    # colours = c(\"#7d0000\",\"#00b300\",\"#00b300\",\"#00b300\",\"#007d00\"),\n    na.value = \"white\",\n    labels = c(\"Absence\",\"no se\",\"Presence\"),\n    breaks = c(0,0.5,1))+\n  geom_text(\n    data = y_axis_text_pigment,\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    hjust = 1,\n    size = 6,\n    # angle = 20\n    )+\n  geom_text(\n    data = data.frame(x = -0.05, y = -0.3, lab = \"Absorption (nm)\"),\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    hjust = 1,\n    size = 5,\n    # angle = 20\n    )+\n  geom_text(\n    data = Absorption_wv,\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    hjust = 0.5,\n    size = 6,\n    # angle = 20\n    )+\n  geom_text(\n    data = x_axis_text_pigment,\n    aes(x = x, y = y, label = lab),\n    # fill = \"#ffffff99\",\n    hjust = 0.5,\n    size = 7,\n    # angle = 20\n    )+\n  geom_segment(data = line_grid, \n               aes(x = xmin, xend = xmax, y = ymin, yend = ymax, group = group),\n               linewidth = 1)+\n  xlim(c(-2,9))+\n  ylim(c(-1,6.1))+\n  theme_Bede()+\n  theme(\n  # axis.title.x = element_text(size = 35),\n        # axis.title.y = element_text(size = 35),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n\n        # axis.text.x = element_text(size = 30),\n        axis.text.x = element_blank(),\n        # axis.text.y = element_text(size = 25),\n         axis.text.y = element_blank(),\n\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank(),\n        axis.line=element_blank(),\n        # legend.position = \"top\",\n        legend.position = \"none\",\n        legend.direction=\"horizontal\",\n        legend.key.width = unit(2,\"cm\"),\n        legend.text = element_text(size = 20),\n        legend.title = element_text(size = 20, vjust = 2),\n        legend.title.align = 0.5,\n        legend.justification = \"center\")\n\n# rast_pigment\n\nggsave(\"./Figures/Disc_Pigment_Table.png\",rast_pigment, width= 1066*4, height=516*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-Pigm .cell}\n\n```{.r .cell-code .hidden}\n# Pigment composition of the different vegetation classes. Green indicate the presence of the pigment in the class while red indicate the abscence. Chlb : Chlorophyll-b ; Chlc : Chlorophyll-c ; Fuco : Fucoxanthin ; Zea : Zeaxanthin ; Diad : Diadinoxanthin ; Lut : Lutein ; Neo : Neoxanthin ; PE : Phycoerythrin ; PC : Phycocyanin.\n\nknitr::include_graphics(\"./Figures/Disc_Pigment_Table.png\")\n```\n\n::: {.cell-output-display}\n![Photosynthetic and carotenoid pigments present (Green) or absent (Red) in each taxonomic class present in the Neural Network Classifier, along with their absorption wavelength measured with spectroradiometer. Chl b: chlorophyll b, Chl c: chlorophyll c, Fuco: fucoxanthin, Zea: zeaxanthin, Diato: diatoxanthin, Diadino: diadinoxanthin, Neo: neoxanthin.](./Figures/Disc_Pigment_Table.png){#fig-Pigm width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhigh_alt<- \"Data/image/micasense/Gafanha_high_multi.tif\" %>% \n  rast()\n\n# low_alt<- \"Data/image/micasense/Gafanha_Low_Multi_rsp.tif\" %>% \n#   rast() \n\nlow_alt<- \"Data/image/micasense/Gafanha_low_multi.tif\" %>% \n  rast() %>% \n  resample(high_alt, method = \"med\")\n\n\nlow_alt_pred<- \"Data/image/prediction/NewPreds/Gafanha_Low_Pred_rsp.tif\" %>% \n  rast() \n\nmask<-\"Data/shp/Mask_Alt_Compare_All.shp\" %>% \n  vect()\n  \nhigh_alt_masked<-crop(high_alt,mask)\nhigh_alt_masked<-mask(high_alt_masked,mask)\n\nlow_alt_masked<-crop(low_alt,mask)\nlow_alt_masked<-mask(low_alt_masked,mask)\n\nlow_alt_pred_masked<-crop(low_alt_pred,mask)\nlow_alt_pred_masked<-mask(low_alt_pred_masked,mask)\n\n\nstk<-rast(list(c(high_alt_masked,low_alt_masked,low_alt_pred_masked)))%>% \n  as.data.frame()\n\nnames(stk)<-c(\"B1_high\",\"B2_high\",\"B3_high\",\"B4_high\",\"B5_high\",\"B6_high\",\"B7_high\",\"B8_high\",\"B9_high\",\"B10_high\",\n              \"B1_low\",\"B2_low\",\"B3_low\",\"B4_low\",\"B5_low\",\"B6_low\",\"B7_low\",\"B8_low\",\"B9_low\",\"B10_low\",\n              \"pred\")\n\nstk_long<-stk %>% \n  mutate(px_ID = c(1:nrow(stk))) %>% \n  pivot_longer(-c(px_ID,pred),values_to = \"Value\",names_to = \"Bands\") %>% \n  mutate(alt = case_when(str_detect(Bands, \"low\") ~ \"Low\",\n                         str_detect(Bands, \"high\") ~ \"High\",\n                         TRUE ~ \"NA\"),\n         Bands = gsub(\"_high\",\"\",Bands),\n         Bands = gsub(\"_low\",\"\",Bands))\n\n\nstk_summarized<-stk_long %>% \n  # group_by(px_ID,alt) %>% \n  # reframe(Value = mean(Value),\n  #         pred = unique(pred)) %>% \n  pivot_wider(names_from = \"alt\", values_from = \"Value\")\n\ndf<-stk_summarized %>% \n  ungroup() %>% \n  group_by(Bands) %>% \n  filter(Low<10000,\n         High < 10000,\n         Low < quantile(Low,probs = 0.99),\n         High < quantile(High,probs = 0.99),\n         Low > quantile(Low,probs = 0.01),\n         High > quantile(High,probs = 0.01),\n         !pred %in% c(7,9,3,10)) %>%\n  ungroup()\n \nplot <- df %>% \n  group_by(pred) %>% \n  sample_n(10000) %>% \n  rearrr::rotate_2d(x_col = \"Low\", y_col = \"High\",degrees = 9, origin = c(0,0)) %>% select(Low_rotated,High_rotated) %>% \n  rename(Low = Low_rotated, High = High_rotated) %>% \n  mutate(Low = Low /10000, \n         High = High/10000) %>% \n  ggplot(aes(x=Low, y=High))+\n  # geom_point(aes(color = as.factor(pred)))\n  ggpointdensity::geom_pointdensity(adjust = .03)+\n  viridis::scale_color_viridis(limits = c(0,6000),\n                               breaks = c(0,2000,4000,6000),\n                               labels = c(\"1\",\"2000\",\"4000\",\"6000\"))+\n  # geom_smooth(method = \"loess\")+\n  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = \"dashed\", color = \"red\" )+\n  theme_Bede()+\n  ylim(c(0.05,0.6))+\n  xlim(c(0.05,0.6))+\n  ylab(\"Reflectance of the 120m flight\")+\n  xlab(\"Reflectance of the 12m flight\")+\n  labs(color = \"Pixel density\")+\n  theme(\n    legend.position = \"top\",\n        legend.key.width = unit(3,\"line\"))\n\nggsave(\"./Figures/Compare_reflectance.png\",plot, width= 472*4, height=402*4, units = \"px\")\n```\n:::\n\n::: {#cell-fig-CompareRef .cell}\n\n```{.r .cell-code .hidden}\n# Pigment composition of the different vegetation classes. Green indicate the presence of the pigment in the class while red indicate the abscence. Chlb : Chlorophyll-b ; Chlc : Chlorophyll-c ; Fuco : Fucoxanthin ; Zea : Zeaxanthin ; Diad : Diadinoxanthin ; Lut : Lutein ; Neo : Neoxanthin ; PE : Phycoerythrin ; PC : Phycocyanin.\n\nknitr::include_graphics(\"./Figures/Compare_reflectance.png\")\n```\n\n::: {.cell-output-display}\n![Comparison of reflectance retrieved from both low-altitude and high-altitude flights over a common area. The red dashed line represents a 1 to 1 relationship.](./Figures/Compare_reflectance.png){#fig-CompareRef width=50%}\n:::\n:::\n\n\n\n\n## Big picture\n\n# Conclusion\n\n# Bibliography\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}