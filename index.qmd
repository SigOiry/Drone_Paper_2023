---
title: PREPRINT -- Discriminating Seagrasses From Green Macroalgae in European Intertidal areas using high resolution multispectral drone imagery -- PREPRINT.
author:
  - name: Simon Oiry
    orcid: 0000-0001-7161-5246
    corresponding: true
    email: oirysimon@gmail.com
    roles:
      - Investigation
      - Writing
      - Data acquisition
    affiliations:
      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France
  - name: Bede Ffinian Rowe Davies
    corresponding: false
    roles: 
      - Investigation
      - Data acquisition
      - Revision
    affiliations:
      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France
  - name: Ana I. Sousa
    corresponding: false
    roles:
      - Data acquisition
      - Revision
    affiliations:
      - CESAM – Centre for Environmental and Marine Studies, Department of Biology, University of Aveiro, Aveiro, Portugal
  - name: Philippe Rosa
    corresponding: false
    roles: 
      - Data acquisition
      - Revision
    affiliations:
      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France
  - name: Maria Laura Zoffoli
    corresponding: false
    roles: 
      - Data acquisition
      - Revision
    affiliations:
      - Consiglio Nazionale delle Ricerche, Istituto di Scienze Marine (CNR-ISMAR), 00133 Rome, Italy
  - name: Guillaume Brunier
    corresponding: false
    roles: 
      - Data acquisition
      - Revision
    affiliations:
      - BRGM French Geological Survey, Cayenne 97300, French Guiana
  - name: Pierre Gernez
    corresponding: false
    roles: 
      - Investigation
      - Data acquisition
      - Revision
    affiliations:
      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France
  - name: Laurent Barillé
    corresponding: false
    roles: 
      - Investigation
      - Data acquisition
      - Revision
    affiliations:
      - Institut des Substances et Organismes de la Mer, ISOMer, Nantes Université, UR 2160, F-44000 Nantes, France
keywords:
  - Drone
  - Remote Sensing
  - Seagrass
  - Coastal Ecosystems
  - Neural Network 
abstract: |
  Coastal areas support seagrass meadows, which offer crucial ecosystem services including erosion control and carbon sequestration. However, these areas are increasingly impacted by human activities, leading to seagrass decline and habitat fragmentation. In situ surveys, traditionally performed to monitor these ecosystems face limitations on temporal and spatial coverage, particularly in intertidal zones, prompting the use of satellite data within monitoring programs. Yet, satellite remote sensing struggles with spatial and spectral resolution, making it difficult to discriminate seagrass from other macrophytes in highly heterogenous meadows. Drone images at a very high spatial resolution offer a promising solution to address challenges related to spatial heterogeneity and intrapixel mixture. This study focuses on using drone acquisitions with a ten spectral band sensor mirroring those of Sentinel-2, for mapping intertidal macrophytes and effectively discriminating between seagrass and green macroalgae. Nine drone flights were conducted at two different altitudes (12m and 120m) across heterogeneous intertidal European habitats in France and Portugal. Low altitude flights were used to train a Deep Learning classifier based on Neural Networks to discrimintate among five taxonomic classes of intertidal vegetation: Magnoliopsida (Seagrass), Chlorophyceae (Green macroalgae), Phaeophyceae (Brown algae), Rhodophyceae (Red macroalgae) and benthic Bacillariophyceae (Diatoms). Classification of drone imagery resulted in an overall accuracy of 94% across all the sites and images, covering a total area of 467 000 m². The model exhibited an accuracy of 96.4% in identifying seagrass. This work showed that although they share the same pigmentary composition, seagrass and green algae can be discriminated using a multispectral sensor with ten spectral bands at 444, 475, 531, 560, 650, 668, 705, 717, 740 and 840 nm. The algorithm should now be adapted for Sentinel-2 to see if this discrimination is still operational at a coarser spatial resolution. 
plain-language-summary: |
  This study demonstrates the efficacy of using drones equipped with multi-spectral sensors for mapping intertidal macrophytes, particularly seagrass, overcoming limitations of traditional in situ surveys and satellite remote sensing, with a Deep Learning classifier achieving 94% overall accuracy across diverse European habitats, and 96.4% accuracy specifically in identifying seagrass.
key-points:
  - An intertidal vegetation classifier has been built to be used across different study sites without losing classification accuracy. 
  - Neural Network made to accuratly discriminates intertidal seagrasses from green algae (chlorophyceae)
date: last-modified
citation:
  container-title: Remote Sensing of Environment
number-sections: true
notebook-links: false
editor_options: 
  chunk_output_type: console
csl: RSE.csl
---

```{r library}
#| cache: false
#| echo: false
#| warning: false
#| eval: true

library(flextable)
library(tidyverse)
library(tidyterra)
library(tidymodels)
library(Utilities.Package) 
library(patchwork)
library(sf) 
library(rnaturalearth) 
library(rnaturalearthdata) 
library(rnaturalearthhires)
library(ggforce) 
library(patchwork)
library(terra)
library(gt)
library(scales)
library(magick)
library(grid)
library(ggforce)
library(statebins)
library(ggridges)
library(ggspatial)
library(terrainr)
# library(ggpmisc)
library(broom)
library(stars)
library(gmodels)
library(caret)


options(scipen = 100000000)
```

```{r my_comma}
#| cache: false
#| echo: false
#| warning: false

my_comma<-scales::label_comma(accuracy = NULL, big.mark = ",",decimal.mark = ".")
```

# Introduction

Coastal areas are vital hotspots for marine biodiversity, with intertidal seagrass meadows playing a crucial role at the interface between the land and oceans [@unsworth2022]. Seagrass meadows provide a myriad of ecosystem services to humanity, including carbon sequestration, oxygen production, protection against sea-level rise and coastline erosion, and limitation of eutrophication. They serve as vital habitats for a diverse array of marine and terrestrial species, providing living, breeding, and feeding grounds [@gardner2018 ; @Zoffoli2022 ; @jankowska2019]. Due to the concentration of human activities in coastal zones, seagrass meadows are directly exposed to and impacted by anthropogenic pressures. Global regression and fragmentation are currently observed due to climate change, diseases, urbanization, land reclamation, dredging, competition with alien species, and reduction in water quality [@nguyen2021 ; @soissons2018 ; @orth2006 ; @lin2018 ; @duffy2019 ; @rasheed2011long ; @chefaoui2018dramatic]. Both habitat fragmentation and reduction, in turn, can severely copromise the effectiveness of ecosystem services provided by seagrass meadows. While improvements in water quality have been recently reported in Europe, allowing an overall recovery of seagrass ecosystems at local scale, many coastal waters worldwide are still subjected to strong eutrophication processes [@deSantos2019 ; @Zoffoli2021]. Coastal eutrophication has been ass ociated to excessive accumulation of green macroalgae, so-called green tides (@devlin2023nutrients). Green tides produce shade and suffocation over seagrass individuals, thus threatening the health of seagrass ecosystems [@wang2022].

The importance of seagrass meadows and the variety of ecosystem services they provide have led to the enhancement of both global and regional programs to monitor Essential Oceanic Variable (EOVs) such as seagrass composition [@Miloslavich2018], as well as Essential Biodiversity Variable (EBVs) such as seagrass taxonomic diversity, species distribution, population abundance, and phenology [@Pereira2013]. Traditionally, indicators of seagrass status have been quantified using *in situ* measurements. The acquisition of field data in intertidal zones is however notoriously challenging. Intertidal seagrass meadows are only partially exposed during low tide and can be situated in difficult-to-reach mudflats, potentially leading to inaccurate and limited estimations with conventional sampling techniques [@nijland2019]. Satellite observations have been proven effective in complementing in situ sampling, allowing for the near real-time and consistent retrieval of seagrass EOVs and EBVs over extensive meadows. [@Zoffoli2021 ; @xu2021 ; @Traganos2018 ; @coffer2023]

While satellite remote sensing (RS) provides temporally consistent observations over large spatial scales, its utilization over intertidal areas is limited by several constraints. Satellite missions with a high temporal resolution (e.g. daily MODIS observation) are limited by a coarse spatial resolution (\>100m) over these restricted extension areas. Missions with a high spatial resolution such as Sentinel-2 (10m) or Landsat8/9 (30m) can be limited by low spectral resolution. The limited number of spectral bands is indeed a challenge to accurately discriminate seagrass from others co-existing macrophytes. In particular Chlorophyceae (green algae) and marine Magnoliopsida (seagrass) share the same pigment composition [@ralph2002 ; @Douay2022]. Therefore, to someone not specialized in the field, their spectral signatures may appear to be alike [@Davies2023 ; @bannari2022]. Recently, using advanced machine-learning algorithms trained with a large hyperspectral library of more than 300 field reflectance spectra, @Davies2023 demonstrated that it was possible to discriminate Magnoliopsida from Chlorophyceae using radiometric data acquired at Sentinel-2 's spectral resolution. However the application of this approach to satellite RS remains to be validated. Moreover patches of green algae can develop at small spatial scales that are not observable using non-commercial satellite imagery [@tuya2013], especially during the initial stage of a green tide.

Drones can potentially fill the gaps left by satellite RS and in situ measurements, due to their ability to provide spatially-explicit observations at very high spatial resolutions (pixel size from cm to mm) while capturing data at multi-spectral resolution [@fairley2022drone ; @oh2017use]. The versatility of drones allows for their application across a diverse thematic range , from coastal zone management [@adade2021 ; @casella2020 ; @angnuureng2022] to mapping species distribution [@joyce2023 ; @tallam2023 ; @Roca2022 ; @Roman2021 ; @Brunier2022Topographic]. However, when applied to coastal habitat mapping, most case studies are limited to a single flight, restricting the generalizability of their application over wider geographical scales [@Roman2021 ; @collin2019improving ; @rossiter2020uav ; @Brunier2022Topographic]. The present study aimed at analyzing the potential of multispectral drone RS to map intertidal macrophytes, with a particular focus on discriminating Magnoliopsida and Chlorophyceae (Seagrass and Green Algae respectively). Ten drone flights were performed over soft-bottom intertidal areas along two European countries (France and Portugal), covering a wide range of habitats, from monospecific seagrass meadows to meadows mixed with green, or red macroalgae. A deep learning algorithm was trained and validated for macrophyte discrimination, emphasizing applicability across diverse sites without a loss of prediction accuracy.

# Material & Methods

## Study sites

Seven study sites distributed between France and Portugal were selected for their relatively extensive intertidal seagrass beds. Two sites are located in the Gulf of Morbihan (@fig-map A), France (47.5791°N, 2.8018°W). This gulf covers an area of 115 km² and is only connected to the sea through a 900m wide channel. A total of 53 small islands are scattered across the gulf leading to 250 km of shorelines. Patchy seagrass meadows can be found on a lot of these islands. Within the Gulf of Morbihan we chose two sites : one located on one of the gulf's islands (Arz island) and the other located in the southern part of the gulf (Duer). Two other sites were located in Bourgneuf Bay, France (46.9849°N, 2.1488°W). This bay is 340 km² semi-enclosed macrotidal bay, protected from waves by Noirmoutier Island. Bourgneuf bay hosts a large intertidal seagrass meadow of about 6 km². Within this meadow, the sites observed by drones (L'Epine and Barbatre, @fig-map B) contained monospecific beds of *Nanozostera noltei* (dwarf eelgrass) with very little mixing with other macrophytes. Three sites were surveyed in the Ria de Aveiro Lagoon in Portugal (40.6887°N, 8.6810°W). The extent of this lagoon is about 80 km² with many narrow channels, large salt marshes and many mudflats that uncovers at low tide. It is connected to the open sea through a single channel, with a tidal lag between the North and the South of the lagoon. The southernmost site (Gafanha) was a mudflat located in a tributary river of the lagoon whereas the two other sites (Mataducos and Marinha Lanzarote) were situated in the middle of the lagoon and only accessible by boat (@fig-map C). These Portuguese sites are characterized by a more diverse intertidal vegetation, where patches of seagrass intermingle with red, brown and green macroalgae.

```{r Figure1 Overall Map}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

world_map <- sovereignty10 %>% 
  st_as_sf() %>% 
  dplyr::filter(SOVEREIGNT%in%c("Spain","France","Portugal",
                                "Italy","Andorra",
                                "United Kingdom",
                                "Switzerland","Belgium",
                                "Germany","Luxembourg") ) 

bbox_europe <- st_bbox(c(xmin = -20, ymin = 34,
                         xmax = 20, ymax = 55) ,
                       crs = st_crs(world_map) ) 

world_map<-st_make_valid(world_map) 

european_union_map_cropped <- st_crop(world_map, bbox_europe)  %>% 
  st_transform("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")  


UnitedKingdom<-sovereignty10 %>% 
  st_as_sf() %>% 
  dplyr::filter(SOVEREIGNT%in%c("United Kingdom") ) %>% 
  st_cast("POLYGON") 

bbox_UK <- st_bbox(c(xmin = -20, ymin = 45,
                         xmax = 20, ymax = 55) ,
                       crs = st_crs(UnitedKingdom) ) 

UnitedKingdom<-st_make_valid(UnitedKingdom) 

UK_map_cropped <- st_crop(UnitedKingdom, bbox_UK)  %>% 
  st_transform("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ") 

Europe_sf<-european_union_map_cropped %>% 
  dplyr::bind_rows(UK_map_cropped) 

Projects<-data.frame(
  Name=c(
  "Portugal - Aveiro Lagoon Flights\nLower-Resolution: 4\nHigher-Resolution: 1",
  "France - Morbihan Gulf Flights\nLower-Resolution: 3\nHigher-Resolution: 3",
  "France - Bourgneuf Bay Flights\nLower-Resolution: 4\nHigher-Resolution: 0"
  ) ,
  Long=c(-8.745730,
         -2.840592, 
         -2.111868) ,
  Lat=c(40.617610, 
        47.578736,
        47.024719) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")  

Projects_df<-Projects %>%
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)  %>% 
  separate(Name, into=c("Country","Bay") ,sep=" - ")  %>% 
  dplyr::mutate(Country=as.factor(Country) ,
                Bay=as.factor(Bay) ) 

Miniworld_map <- sovereignty10 %>% 
  st_as_sf()

sf_use_s2(FALSE)

bbox_EU <- st_bbox(c(xmin = -30, ymin = 20,
                         xmax = 50, ymax = 70) ,
                       crs = st_crs(Miniworld_map) ) 

  MiniEU_map<-st_crop(Miniworld_map, bbox_EU)  %>% 
  st_transform("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")  

  df_P1<-Projects_df %>% 
    mutate(ID = c(1:nrow(.))) %>% 
    mutate(Site = case_when(ID == 1 ~ "Aveiro Lagoon",
                            ID == 2 ~ "Morbihan Gulf",
                            ID == 3 ~ "Bourgneuf Bay",
                            TRUE ~ "NA"),
           ID = case_when(ID == 1 ~ "C",
                          ID == 2 ~ "A",
                          TRUE ~ "B")) %>% 
    dplyr::select(c(lon,lat,ID,Site))
    
    scaleFUN <- function(x) paste0(sprintf("%.2f", x),"°N")
  

p1  <-
  ggplot(MiniEU_map) +
  geom_sf(linewidth=0.5,alpha=0.93,
          fill="#CFCFCF",colour="grey30")+
    ggforce::geom_mark_ellipse(data=df_P1,
                 aes(x=lon,
                     y=lat,
                     label = ID,
                     description=Site) ,
                 linewidth=0.3,
                 fill="goldenrod",
                 show.legend=F,
                 label.hjust = 0.5,
                 con.size = 2,
                 con.colour = "goldenrod4",
                 label.fontsize = c(25,20),
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") , 
  label.buffer = unit(5, "mm") ,
  label.fill = "grey90")+
  coord_sf(xlim=c(2600000,4100000) ,
          ylim=c(1600000,3100000))+
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  scale_y_continuous(labels=scaleFUN)+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20) )



ggsave("Figures/Figure1/Map_Drone_Sites.png",p1,width= 10, height=10)  


```

```{r Figure1 Aveiro}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_aveiro <- filelist[str_detect(filelist,"mask_land_intertidal_Aveiro")] %>% 
  read_sf()

Flight_aveiro<-data.frame(
  Name=c(
  "Gafanha",
  "Mataducos",
  "Marinha Lanzarote"
  ) ,
  Description = c("12m and 120m Flights",
                  "120m Flight",
                  "120m Flight"),
  Long=c(-8.742485,
         -8.646980, 
         -8.690677) ,
  Lat=c(40.597599, 
        40.666634,
        40.665120) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_aveiro))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)

aveiro_plot <-
ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land area"),
                    values = c("#7DC27D", "#CFCFCF"))+
  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour="grey30")+
      coord_sf(xlim=c(519749,535233) ,
          ylim=c(4493310,4508794) )+
  ggforce::geom_mark_ellipse(data=Flight_aveiro,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 25,
                 label.hjust = 0.5,
                 con.size = 2,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    # theme_void()+
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  scale_x_continuous(breaks = seq(-8.70, -8.60, by = 0.10))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))


ggsave("Figures/Figure1/Map_Aveiro.png",aveiro_plot,width= 10, height=10)  


```

```{r Figure1 Bourgneuf Bay}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_BB <- filelist[str_detect(filelist,"mask_land_intertidal_BB")] %>% 
  read_sf()

Flight_BB<-data.frame(
  Name=c(
  "Barbâtre",
  "L'Epine"
  ) ,
  Description = c("120m Flight",
                  "120m Flight"),
  Long=c(-2.166313,
         -2.228239) ,
  Lat=c(46.956420, 
        46.989515) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_BB))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)

BB_plot <- ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land area"),
                    values = c("#7DC27D", "#CFCFCF"))+
  geom_sf(data = mask_BB, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour="grey30")+
      coord_sf(xlim=c(550609,579539) ,
          ylim=c(5189447,5218377) )+
  ggforce::geom_mark_ellipse(data=Flight_BB,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 con.size = 2,
                 label.fontsize = 25,
                 label.hjust = 0.5,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  geom_label(aes(x = 553460, y = 5216442, label = "B"), size = 20)+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = c(0.95,0.2),
        legend.key.size =  unit(1, "cm"),
        legend.text = element_text(size = 20),
        legend.title=element_blank(),
        legend.background = element_rect(linewidth = 0.5, 
                                         fill = "white",
                                         linetype="solid", 
                                  colour ="black"),
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))


ggsave("Figures/Figure1/Map_BB.png",width= 10, height=10)  

```

```{r Figure1 Morbihan Bay}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_Morb <- filelist[str_detect(filelist,"mask_land_intertidal_Morbihan")] %>% 
  read_sf()

Flight_Morbihan<-data.frame(
  Name=c(
  "Arz",
  "Duer"
  ) ,
  Description = c("12m Flight",
                  "12m and 120m Flight"),
  Long=c(-2.795961,
         -2.746186) ,
  Lat=c(47.603260, 
        47.543877) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_Morb))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)

Morbihan_plot<-ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land mask"),
                    values = c("#7DC27D", "#CFCFCF"))+
  geom_sf(data = mask_Morb, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,colour="grey30")+
      coord_sf(xlim=c(503019,526177) ,
          ylim=c(5257824,5280982))+
  ggforce::geom_mark_ellipse(data=Flight_Morbihan,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 con.size = 2,
                 label.hjust = 0.5,
                 label.fontsize = 25,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  geom_label(aes(x = 505000, y = 5280982-1981, label = "A"), size = 20)+
  scale_x_continuous(breaks = seq(-3, -2.6, by = 0.1))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
        legend.position = "none",
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))


  ggsave("Figures/Figure1/Map_Morbihan.png",width= 10, height=10)  


```

```{r Figure1 saving}
#| cache: false
#| echo: false
#| eval: false
#| warning: false

layout <- c(
  patchwork::area(t = 1, l = 1, b = 10, r = 10),
  patchwork::area(t = 1, l = 11, b = 10, r = 20),
  patchwork::area(t = 11, l = 1, b = 20, r = 10),
  patchwork::area(t = 11, l = 11, b = 20, r = 20)
)
# plot(layout)

Tot <- magick::image_ggplot(magick::image_read("Figures/Figure1/Map_Drone_Sites.png"), interpolate = T)
BB <- magick::image_ggplot(magick::image_read("Figures/Figure1/Map_BB.png"), interpolate = T)
Mor <- magick::image_ggplot(magick::image_read("Figures/Figure1/Map_Morbihan.png"), interpolate = T)
Av <- magick::image_ggplot(magick::image_read("Figures/Figure1/Map_Aveiro.png"), interpolate = T)


a<-Tot+Mor+BB+Av+patchwork::plot_layout(design=layout)

ggsave("./Figures/Fig1_Map_Drone_Sites.png",a, width= 10, height=10, dpi = 800)



```

```{r Figure1}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: >
#|   Location of drone flights in France and Portugal. A: Gulf of Morbihan (Two sites), B: Bourngeuf Bay (Two sites), C: Ria de Aveiro Coastal Lagoon (Three sites). Green represents intertidal areas. 
#| label: fig-map
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Fig1_Map_Drone_Sites.png")
```


## Field sampling

### Drone acquisition

At each location, a DJI Matrice 200 quadcopter drone equipped with a Micasense RedEdge Dual MX multispectral camera was flown to take 1.2 million pixel reflectance photographs with ten spectral bands ranging from the blue to the near infrared (NIR): 444, 475, 531, 560, 650, 668, 705, 717, 740 and 840 nm. To ensure consistent lighting conditions across flight paths, the drone's trajectory was aligned to maintain a solar azimuth angle of 90 degrees. An overlap of 70% and 80% (side and front respectively) between each image was set for each flight. A downwelling light sensor (DLS2) was used to acquire irradiance data concomitantly with the camera measurements. Raw data were calibrated in reflectance using a calibration panel reflective at \~50% provided by the manufacturer. Across all sites, flights were made at two different altitudes : 12 m or/and 120 m. (@tbl-flights). 

```{r Table1 building}
#| cache: false
#| echo: false
#| eval: false
#| warning: false

df<-data.frame(
  Country = c(
    rep("France",5),
    rep("Portugal",4)
  ),
  Site = c(
    rep("Gulf of Morbihan",3),
    rep("Bourgneuf Bay",2),
    rep("Aveiro Lagoon",4)
  ),
  Name = c(
    "Arz Island",
    "Duer",
    "Duer",
    "Barbâtre",
    "L'Epine",
    "Marinha Lanzarote",
    "Mataducos",
    "Gafanha",
    "Gafanha"
  ),
  Altitude = c(
    "12m",
    "12m",
    "120m",
    "120m",
    "120m",
    "120m",
    "120m",
    "120m",
    "12m"
  ),
  Utility = c(
    "Training",
    "Training",
    "Validation",
    "Validation",
    "Validation",
    "Validation",
    "Validation",
    "Validation",
    "Training"
  )
)

brdr1 <- fp_border_default(color = "black", width = 1.5)
brdr2 <- fp_border_default(color = "grey", width = 1.5)
brdr3 <- fp_border_default(color = "grey40", width = 1.5)

 i = 16.5 # width of the side borders in the word_document output (in centimeters)
 w = i*0.3937 # width of the side borders in the word_document output (in inches)
 
flx1<-flextable(df)  %>%
  flextable::width(width = (w/(ncol(df)))) %>% 
  merge_v(j = 1) %>%
  merge_v(j = 2) %>%
    border_remove() %>%
    hline_top(border=brdr1) %>%
    hline(i=5, border=brdr1) %>%
    hline(i=1,j = 3:5, border=brdr2) %>%
    hline(i=2, border=brdr2) %>%
    hline(i=3, j = 2:5, border=brdr3) %>%
    hline(i=4, j = 3:5, border=brdr2) %>%
    hline(i=6, border=brdr2) %>%
    hline(i=6, j = 1:2, border=brdr1) %>%
    hline(i=7, border=brdr2) %>%
    hline(i=8, border=brdr2) %>%
    hline(i=9, border=brdr1) %>%
    vline(j=2, border = brdr1) %>%
    flextable::align(align = "center",part = "all") %>%
    flextable::align(align = "center",part = "header") %>%
  # set_caption(caption = "Table 1 List of drone Flight, summarising the date, the altitude and the purpose of each flight.") %>%
  set_table_properties(layout = "autofit") 



save_as_image(flx1, "Figures/table_flights.png", res = 300)
```

```{r Table1}
#| echo: false
#| warning: false
#| label: tbl-flights
#| tbl-cap: List of drone flight, summarising the date, the altitude and the purpose of each flight. 12 m  and 120 m flights have a spatial resolution of 8 and 80 mm respectively.
#| cache: true

knitr::include_graphics("Figures/table_flights.png")
```


### Ground Control Points

Before each flight, targets used as Ground Control Points (GCPs) were distributed over the study site and georeferenced with a Trimble © Geo XH 6000 differential GPS (dGPS). GCPs were used to correct georeferencing imprecision of orthomosaics with an horizontal and vertical accuracy of 10cm. dGPS was also used to georeference quadrats of 0.25 m² assessing the presence or absence of five key taxonomic classes of intertidal vegetation : Bacillariophyceae (Unicellular benthic diatoms forming biofilms at the sediment surface during low tide), Phaeophyceae (brown macroalgae), Magnoliopsida (dwarf seagrass), Chlorophyceae (green macroalgae) and Rhodophyceae (red macroalgae) (@fig-vegetation). Pictures of each quadrat were uploaded online to the Global Biodiversity Information Facility (GBIF) platform [@BedeGbif], a public open portal to store and share biodiversity data. Each photograph was also processed to estimate the percent cover of each type of vegetation using an image processing software (imageJ). For all quadrats, the hyperspectral reflectance signatures of each vegetation class was measured using an ASD FieldSpec HandHeld 2 spectroradiometer, which acquires reflectance between 325 and 1075 nm, with 1 nm of spectral resolution. Hyperspectral signatures from quadrats serve for dual purposes: they validate the radiometric calibration of drone data and contribute to error reduction in photo interpretation. The workflow developed in this study is presented in @fig-workflow.

```{r Figure2 Spectra Pictures}
#| cache: true
#| echo: false
#| warning: false
#| eval: false
 
micasense<-list.files(pattern = "Wavelength_Micasense_DualMX.csv",recursive = T) %>% 
  read.delim(sep = ";")

imglist<-
  data.frame(path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         str_detect(path, "High") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          str_detect(path, "Arz") ~ "Arz",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          str_detect(path, "Pred") ~ "Pred",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".xml"),
                !str_detect(path,".enp"))

gaf_low_multi<- imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "ortho",
         resampled == "FALSE",
         folder == "Input") %>%
  slice(1) %>% 
  pull(path) %>%
  rast() 
 names(gaf_low_multi)<-c(paste0("B",c(1:10)))

 Gafanha_low_pred<-"./Data/image/prediction/NewPreds/AveiroLowPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif" %>% 
     rast()
 names(Gafanha_low_pred)<-"pred"


# arz_multi<- imglist %>% 
#   filter(site == "Arz", 
#          type == "ortho") %>% 
#   slice(1) %>% 
#   pull(path) %>% 
#   rast()
#  names(arz_multi)<-c(paste0("B",c(1:10)))
# 
# arz_pred<- imglist %>% 
#   filter(site == "Arz", 
#          type == "Pred",
#          str_detect(path, "7by7")) %>% 
#   slice(1) %>% 
#   pull(path) %>% 
#   rast()
#  names(arz_pred)<-"pred"
 
 
 
gaf<-rast(list(gaf_low_multi,Gafanha_low_pred)) %>% 
  as.data.frame(xy = F) %>% 
  dtplyr::lazy_dt() %>% 
  dplyr::filter(B1 != 65535,
                pred != 0) %>%
  as_tibble() %>% 
  rename(Class = "pred") %>%
  mutate(pxl_ID = c(1:nrow(.))) %>% 
  pivot_longer(-c(Class,pxl_ID), names_to = "band",values_to = "value") %>% 
  left_join(micasense, by = c("band" = "Band_ID")) %>% 
  group_by(Class, Wavelength) %>% 
  dplyr::summarise(mean = mean(value),
                   sd = sd(value),
                   max = max(value),
                   min = min(value),
                   median = median(value)) %>%  
  mutate(Class = case_when(Class == 1 ~ "Bare Sediment",
                              Class == 2 ~ "D - Chloropyceae",
                              Class == 3 ~ "Bare Sediment",
                              Class == 4 ~ "A - MagnoliopsidaL",
                              Class == 5 ~ "E - Microphytobenthos",
                              Class == 6 ~ "A - Magnoliopsida",
                              Class == 7 ~ "B - Phaeophyceae",
                              Class == 8 ~ "C - Rhodophyceae",
                              Class == 9 ~ "Sun Glint",
                              Class == 10 ~ "Water",
                              Class == 11 ~ "Xanthophyceae",
                              TRUE ~ "NA"))

spectra<-gaf %>% 
  dplyr::filter(Class != "Bare Sediment",
                Class != "Sun Glint",
                Class != "Water",
                Class != "Xanthophyceae",
                Class != "A - MagnoliopsidaL") %>% 
  ggplot(aes(x=Wavelength, y = mean/10000, color = Class))+
  geom_line(linewidth = 0.5)+
  scale_color_manual(values=c("#389318", "#873e23", "#b3002d", "#b3ff1a", "#DAA520"))+
  ylab("Reflectance")+
  xlab("Wavelength (nm)")+
  theme_Bede()+
  theme(axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 7),
        axis.title.y = element_text(size = 7),
        legend.position = c(0.2, 0.7),
        plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),
        legend.title=element_blank(),
        legend.text = element_text(size = 5),
        legend.key.size = unit(0.25, "cm"),
        legend.text.align = 0,
        panel.border = element_blank(), 
        panel.background = element_blank(),
        axis.line = element_line(color="black"))

ggsave("Figures/Spectral_shapes.png",spectra, bg = "transparent",  height = 2, width = 3, dpi = 2000)

sp <- image_ggplot(magick::image_read("Figures/Spectral_shapes.png"), interpolate = T)

# sp<-ggplot()+
#   geom_spatraster_rgb(data = rast("Figures/Spectral_shapes.png"),maxcell = 4009008)+
#   coord_equal()+
#     theme_void()+
#   theme(axis.text = element_blank(), 
#         axis.title = element_blank(), 
#         axis.ticks = element_blank(),
#         panel.background = element_rect(fill='transparent'),
#         plot.background = element_rect(fill='transparent', color=NA),
#         axis.ticks.length = unit(0, "pt"),
#         panel.grid.major=element_blank(), 
#         panel.grid.minor=element_blank(), 
#         plot.margin = margin(0, 0, 0, 0, "pt"))
# 
# 
# Magno <- magick::image_read("Data/Pictures/Figure2/Magnoliopsida_cropped2.png")%>%
#   # magick::image_rotate(90)%>%
#   grid::rasterGrob()
# 
# Brown <- magick::image_read("Data/Pictures/Figure2/Phaeophyceae_cropped.png")%>%
#   grid::rasterGrob()
# 
# Red <- magick::image_read("Data/Pictures/Figure2/Rhodophyceae_cropped.png")%>% 
#   grid::rasterGrob()
# 
# green <- magick::image_read("Data/Pictures/Figure2/Chlorophyceae_cropped.png")%>% 
#   grid::rasterGrob()
# 
# MPB <- magick::image_read("Data/Pictures/Figure2/Bacillariophyceae_cropped.png")%>% 
#   grid::rasterGrob()
# 
# Lines<-data.frame(x=c(10,20,10),
#                   y=c(-0.1,-0.1,10),
#                   xend=c(10,20,30),
#                   yend=c(20,20,10))
# labels<-data.frame(name = c("A","B","C","D","E"),
#                    x= c(1,11,21,11,21),
#                    y=c(19,19,19,1,1))
# 
# a<-ggplot(expand_grid(x = 0:30,y=0:20),aes(x = x, y = y) ) +
#   geom_point(alpha=0) +
#   coord_fixed()+
#   ggplot2::annotation_custom(Magno, 0,10, 0, 20) +
#   ggplot2::annotation_custom(green, 10,20, 10, 20)+
#   ggplot2::annotation_custom(Red, 10,20, 0, 10)+
#   ggplot2::annotation_custom(Brown, 20,30, 10, 20)+
#   ggplot2::annotation_custom(MPB, 20,30, 0,10)+
#   geom_segment(data=Lines,aes(x=x,y=y,xend=xend,yend=yend),
#                colour="white",linewidth=2)+
#   ggplot2::annotation_custom(ggplotGrob(spectra), 5,25, 5,15)+
#   geom_label(data=labels,aes(x=x,y=y,label=name), size = 10)+
#   theme_void()+
#   theme(axis.title.x = element_blank(),
#         axis.title.y = element_blank(),
#         axis.text.x = element_blank(),
#         axis.text.y = element_blank(),
#         axis.ticks.x = element_blank(),
#         axis.ticks.y = element_blank(),
#         plot.margin = grid::unit(c(0.01,0.01,0.01,0.01), "mm"),
#         # rect = element_blank(),
#         panel.margin = grid::unit(c(0.01, 0.01, 0.01, 0.01), "mm"))
# 
# Lines1<-data.frame(x=c(0,10,20,30),
#                   y=c(10,0,0,0),
#                   xend=c(40.1,10,20,30),
#                   yend=c(10,10,10,10))
# 
# labels1<-data.frame(name = c("A","B","C","D","E"),
#                    x= c(1,1,11,21,31),
#                    y=c(29,9,9,9,9))
# 
# ggplot(expand_grid(x = 0:40,y=0:30),aes(x = x, y = y) ) +
#   geom_point(alpha=0) +
#   coord_fixed()+
#   ggplot2::annotation_custom(Magno, 0,10, 10, 30) +
#   ggplot2::annotation_custom(Brown, 0,10, 0, 10)+
#   ggplot2::annotation_custom(Red, 10,20, 0, 10)+
#   ggplot2::annotation_custom(green, 20,30, 0, 10)+
#   ggplot2::annotation_custom(MPB, 30,40, 0,10)+
#   geom_segment(data=Lines1,aes(x=x,y=y,xend=xend,yend=yend),
#                colour="white",linewidth=2)+
#   ggplot2::annotation_custom(ggplotGrob(spectra), 10,40, 10,30)+
#   geom_label(data=labels1,aes(x=x,y=y,label=name), size = 10)+
#   theme_void()+
#   theme(axis.title.x = element_blank(),
#         axis.title.y = element_blank(),
#         axis.text.x = element_blank(),
#         axis.text.y = element_blank(),
#         axis.ticks.x = element_blank(),
#         axis.ticks.y = element_blank(),
#         plot.margin = grid::unit(c(0.01,0.01,0.01,0.01), "mm"),
#         # rect = element_blank(),
#         panel.margin = grid::unit(c(0.01, 0.01, 0.01, 0.01), "mm"),
#         legend.text.align = 0)

Magno<-ggplot()+
  geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Magnoliopsida_cropped2.png"))+
  coord_equal()+
  geom_label(aes(x = 50,y= 950, label = "A"))+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))

Brown<-ggplot()+
  geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Pheophyceae_cropped.png"))+
  coord_equal()+
  geom_label(aes(x = 50,y=450, label = "B"))+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        plot.margin = margin(0, 0, 0, 0, "pt"))

Red <- ggplot()+
  geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Rodophyceae_cropped.png"))+
  coord_equal()+
  geom_label(aes(x = 50,y=450, label = "C"))+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))


green <- ggplot()+
  geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Chlorophyceae_cropped.png"))+
  coord_equal()+
  geom_label(aes(x = 50,y=450, label = "D"))+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))
  
  

MPB <- ggplot()+
  geom_spatraster_rgb(data = rast("Data/Pictures/Figure2/Bacillariophyceae_cropped.png"))+
  coord_equal()+
  geom_label(aes(x = 50,y=450, label = "E"))+
  theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))

layout <- c(
  patchwork::area(t = 10, l = 0, b = 30, r = 10),
    patchwork::area(t = 0, l = 0, b = 10, r = 10),
    patchwork::area(t = 0, l = 10, b = 10, r = 20),
    patchwork::area(t = 0, l = 20, b = 10, r = 30),
    patchwork::area(t = 0, l = 30, b = 10, r = 40),
    patchwork::area(t = 10, l = 10, b = 30, r = 40)
)

layout1 <- c(
  patchwork::area(t = 1, l = 1, b = 20, r = 10),
    patchwork::area(t = 20, l = 1, b = 29, r = 10),
    patchwork::area(t = 20, l = 9, b = 29, r = 18),
    patchwork::area(t = 20, l = 17, b = 29, r = 26),
    patchwork::area(t = 20, l = 25, b = 29, r = 34),
    patchwork::area(t = 1, l = 9, b = 20, r = 34)
)

# plot(layout1)

plot<-Magno+
  Brown+
  Red+
  green+
  MPB+
  sp+
  patchwork::plot_layout(design=layout1)

ggsave("Figures/Spectral_shapes_total.png",plot, height = 7, width = 10, dpi = 800)
```

```{r Figure2 Plot}
#| cache: true
#| echo: false
#| warning: false
#| fig-cap: The five taxonomic classes of vegetation used to train the Neural Network model and their raw spectral signatures at the spectral resolution of the Micasense RedEdge Dual MX. 
#| label: fig-vegetation
#| out-width: "100%"

knitr::include_graphics("Figures/Low_res/Spectral_shapes_total.png")
```

## Drone Processing

A structure-from-motion photogrammetry software (Agisoft Metashape) was used to process images to obtain multispectral orthomosaics of each flight. The workflow for orthomosaicking was the same for every flight. First, tying key points were detected inside of each image and between overlapping images in order to obtain a sparse point cloud. This cloud was cleaned using reprojection accuracy metric in order to remove noisy points. A dense point cloud was then produced using a structure from motion algorithm. A surface interpolation of this dense point cloud was made to obtain a digital surface model (DSM), used to reconstruct the multispectral ortho-image. Low altitude drone flights produced ortho-images with a very high spatial resolution (8 mm per pixel), making it efficient to visually distinguish between the various types of vegetation. High altitude fights on the other hand allowed to cover large areas and produced images with a pixel size of 80 mm (@tbl-flights).

## General Workflow

```{r Figure3 text opening}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

layout<-"Data/Figure2_Workflow" %>%
  list.files("V4.txt",full.names = T, recursive = T) %>%
  read_delim(delim = "\t", escape_double = FALSE,
    trim_ws = TRUE) %>%
  dplyr::filter(Evaluate == T)


layout$Text<- gsub("alaligne","\n", layout$Text)

boxes<- layout %>% 
  dplyr::filter(Type == "Box",
                shape == "square")


text<- layout %>% 
  dplyr::filter(Type == "Box")

diamonds<- layout %>% 
  dplyr::filter(Type == "Box",
                shape == "diamond")
diff = 0.1
for (i in 1:nrow(diamonds)) {
  diam_a<-diamonds[i,]
  
df<-data.frame(  
  x = c(diam_a$xmin - diff, diam_a$xmin + diff, diam_a$xmax + diff, diam_a$xmax - diff),
  y = c(diam_a$ymin, diam_a$ymax, diam_a$ymax, diam_a$ymin),
  Type = rep(diam_a$Type,4),
  Text = rep(diam_a$Text,4),
  Color = rep(diam_a$color,4),
  Evaluate = rep(diam_a$Evaluate,4),
  Resolution =  rep(diam_a$Resolution,4),
  Evaluate_bigbox = rep(diam_a$Evaluate_bigbox,4),
  alpha = rep(diam_a$alpha,4),
  shape =  rep(diam_a$shape,4)
)
  if(i == 1){
    diamond_list<-list(df)
  }else{
    diamond_list[[i]]<-df
  }
}



Arrows<- layout %>% 
  dplyr::filter(Type == "Arrow",
                Evaluate == T)

Group_box<-layout %>% 
  dplyr::filter(Type == "Box",
                Evaluate_bigbox == T) %>% 
  group_by(Group) %>% 
  dplyr::summarise(xmin = min(xmin)-0.1,
                   xmax = max(xmax)+0.1,
                   ymin = min(ymin)-0.1,
                   ymax = max(ymax)+0.1,
                   alpha = 0.1,
                   color = color)

resolution_box<-layout %>% 
  dplyr::filter(Type == "Box",
                Resolution != "NA") %>% 
  group_by(Resolution) %>% 
  dplyr::summarise(xmin = min(xmin)-0.1,
                   xmax = max(xmax)+0.1,
                   ymin = min(ymin)-0.1,
                   ymax = max(ymax)+0.1,
                   alpha = 0.1,
                   color = color)

legend = data.frame(color = unique(layout$color)) %>% 
  dplyr::filter(!is.na(color)) %>% 
  mutate(label = case_when(color == "#EA6155" ~ "Input Data",
                           color == "#DC9614" ~ "Pre-processing",
                           color == "#52A4DA" ~ "Model Building",
                           color == "#79DA52" ~ "Validation",
                           color == "#DA9652" ~ "Output Data",
                           color == "darkcyan" ~ "Final Product",
                           color == "#DA5273"  ~ "Prediction",
                           TRUE ~ "NA")) %>% 
  arrange

segment<-layout %>% 
  dplyr::filter(Type == "Segment")
  

```

```{r Figure3 building}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

building <- F

if(building == T){
  
text_size = 6 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =1 ####arrow_size 0.3 to export  1 to for R plotting

legend_size = 1 #### 0.3 to export, 1 for R ploting
legend_text = 10 #### 4 to export, 10 for R ploting
}else{
  
text_size = 1.85 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =0.3 ####arrow_size 0.3 to export  1 to for R plotting

legend_size = 0.3 #### 0.3 to export, 1 for R ploting
legend_text = 5 #### 5 to export, 10 for R ploting
  
}


a<-ggplot()+
  
  statebins:::geom_rrect(data = Group_box,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax),
            alpha = 0.05,
            size = 0.2,
            show.legend = F,
            fill = Group_box$color,
            color = "black")+
  
    statebins:::geom_rrect(data = resolution_box,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax,
                          alpha = rep(c("Input Data", "Pre-processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),2)),
            fill = "NA",
            linetype = 2,
            size = 0.4,
            color = "black")+
  
  scale_alpha_manual(name = "", 
                     values = c(1,1,1,1,1,1,1),
                     labels = c("Input Data", "Pre-Processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),
                     guide = guide_legend(ncol = 1, override.aes = list(fill = c("#f94144", "#f3722c", "#f8961e", "#f9c74f", "#90be6d", "#43aa8b", "#577590"),
                                                                        shape = c(22),
                                                                        linetype = c(1),
                                                                        alpha = c(0.5)
                                                                        )
                                          )
                     )+
  
  statebins:::geom_rrect(data = boxes,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax
                          ),
            size = 0.2,
            alpha = as.numeric(boxes$alpha),
            fill = boxes$color,
            color = "black")
  
  for(i in 1:length(diamond_list)){
    poly_i<-diamond_list[[i]]
    a<-a+
      geom_polygon(data = poly_i, 
                   mapping = aes(x = x, 
                                 y = y
                                 ),
                  size = 0.2,
                   alpha = poly_i$alpha,
                   fill = poly_i$Color,
                   color = "black")
    
  }

if(building == T){
    a<-a+
    geom_text(data = text,
            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (ID)), size = text_size)
  
}else{
    a<-a+
    geom_text(data = text,
            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (Text)), size = text_size)
}


  a<-a+
    geom_segment(data = Arrows, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
    size=line_size, linejoin = "mitre", lineend = "butt",
    arrow = arrow(length = unit(1, "mm"), type= "closed")
    )+
    geom_segment(data = segment, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
    size=line_size, linejoin = "mitre", lineend = "square"
    )+
  
  geom_text(aes(x = -5.4, y = -2, label = "Flight height: 12 m \n Pixel size : 8 mm", angle = 90), size = text_size+1)+
  
  geom_text(aes(x = -5.4, y = -6.8, label = "Flight height: 120 m \n Pixel size : 80 mm", angle = 90), size = text_size+1)+
  
  geom_text(aes(x = 4, y = 1.75, label = "Pre Processing"), size = text_size)
    
  if(building == F){
  a<- a+ theme_void()
  }
  
  a<-a+
  theme(legend.position = c(0.88,0.3),
        legend.text = element_text(size = legend_text),
        legend.key.size = unit(legend_size, 'cm')
        )+
  scale_x_continuous(breaks = scales::breaks_width(0.5))+
  scale_y_continuous(breaks = scales::breaks_width(0.5))
  
if(building == T){
a
}else{
  ggsave("Figures/Figure3_workflow.png",a, width = 1920, height = 1129, units = "px")
}


```

```{r Figure3}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: "Schematic representation of the workflow. Diamonds represent input or output data, and rectangles represent Python processing algorithms. The overall workflow of this study is divided into two distinct parts based on the spatial resolution of the drone flights: high-resolution flights (pixel size: 8 mm) were utilized for training and prediction of the Neural Network model, whereas lower-resolution flights (pixel size: 80 mm) were solely employed for prediction purposes. Validation has been performed on both high and low resolution flights."
#| label: fig-workflow
#| fig-width: 10
#| fig-height: 7
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Figure3_workflow.png")

```

The spectral similarities of the reflectance signatures between intertidal green macrophytes (Magnoliopsida and Chlorophyceae) make their discrimination challenging using simple classification algorithms (@fig-vegetation F). To overcome this challenge, a deep learning classification method was trained, validated, and applied to each drone flight (@fig-workflow).

### Neural Network model building

```{r loading df_training}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

df_training<-"Data/training/TrainandValid_NewStanRawMetrics.csv" %>% 
  read_delim(delim = ";", escape_double = FALSE, trim_ws = TRUE) %>% 
  dplyr::filter(True_Class != "Xanthophyceae",
                True_Class != "Deep_Sediment",
                True_Class != "Water",
                True_Class != "SunGlint",
                True_Class != "Bare_Sediment") %>% 
  mutate(True_Class = case_when(True_Class == "Clorophyta" ~ "Chlorophyceae",
                               True_Class == "Rhodphyta" ~ "Rhodophyceae",
                               True_Class == "MPB" ~ "Bacillariophyceae",
                               True_Class == "Magnoliosida" ~ "Magnoliopsida",
                               True_Class == "Phaeophyta" ~ "Phaeophyceae",
                               True_Class == "Low_SPC" ~ "Magnoliopsida",
                               TRUE ~ "NA"
                               )) %>% 
  group_by(True_Class) %>% 
  summarise(n = n()) %>% 
  rename(True = "True_Class", 
         Training_Pixels = "n")

write.csv(df_training,"Data/training/TrainandValid_NewStanRawMetrics_Processed.csv",row.names = F)

```

```{r df_training}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

df_training<-read.csv("Data/training/TrainandValid_NewStanRawMetrics_Processed.csv")
```

```{r Table2 process}
#| echo: false
#| warning: false
#| cache: true
#| eval: false

df_validation<-"Data/accuracy_assesment_low&high_flights.csv" %>% 
  read_delim(delim = ",", escape_double = FALSE, trim_ws = TRUE) %>% 
  dplyr::filter(True != "Sediment",
                True != "Sun Glint",
                True != "Water",
                True != "Xanthophyceae") %>% 
  mutate(True = case_when(True == "Green Algae" ~ "Chlorophyceae",
                          True == "Microphytobenthos" ~ "Bacillariophyceae",
                          True == "Rodophyceae" ~ "Rhodophyceae",
                          True == "Pheophyceae" ~ "Phaeophyceae",
                          TRUE ~ True)) %>% 
  group_by(True) %>% 
  summarise(n = n()) 

write.csv(df_validation,"Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv",row.names = F)



```

```{r Table2 building}
#| cache: false
#| echo: false
#| eval: false
#| warning: false


df_validation<-read.csv("Data/training/TrainandValid_NewStanRawMetrics_Processed_valid.csv")

 i = 16.5 # width of the side borders in the word_document output (in centimeters)
 w = i*0.3937 # width of the side borders in the word_document output (in inches)
 
df_flx2<-df_training %>% 
  left_join(df_validation, by = "True") %>% 
  rename(`Validation Pixels` = "n",
         Class = "True",
         `Training Pixels` = "Training_Pixels")
flx2 <- df_flx2 %>% 
  flextable() %>% 
  flextable::width(width = (w/(ncol(df_flx2)))) %>% 
  # border_remove() %>%
  flextable::align(align = "center",part = "all") %>%
  flextable::align(align = "center",part = "header") %>% 
  set_table_properties(layout = "autofit") 

save_as_image(flx2, "Figures/table_validation_px.png", res = 300)

```

```{r Table2}
#| echo: false
#| warning: false
#| tbl-cap: Vegetation Classes of the model and the number of pixels used to train and validate each class
#| label: tbl-validationPX
#| cache: true

knitr::include_graphics("Figures/table_validation_px.png")
```

A dataset containing photo-interpreted drone reflectance pixels was built to train a Neural Network model with 2 hidden layers. The training pixels were categorized into seven different classes, representing the various habitats encountered at the different study sites: Sediment, Water, Chlorophyceae, Magnoliopsida, Bacillariophyceae, Phaeophyceae and Rhodophyceae. Only low-altitude flights (@tbl-flights) were used for training because their 8 mm spatial resolution allowied to avoid spectral sub-pixel mixing and to accurately identify vegetation classes. More than `r my_comma(round(sum(df_training$Training_Pixels),-3))` pixels at 8 mm resolution from the 3 training flights were used to train the model (@tbl-validationPX). Twenty one variables were used by the model as predictors: the ten raw spectral bands of the Micasense RedEdge Dual MX multispectral camera (ranging from 444 nm to 840 nm), the same ten spectral bands standardized using a min/max transformation ([@eq-std] ; @Cao2017) and the Normalized difference vegetation index (NDVI, @eq-ndvi). Standardisation of spectral bands is commonly used to eliminate the scaling differences between spectra and to limit the effect of biomass on the spectra shape [@Douay2022 ; @Davies2023].

$$
R_{i}^{*}(\lambda) = \frac{R_{i}(\lambda) - min(R_{i})}{max(R_{i})- min(R_{i})}
$$ {#eq-std}

where $R_{i}(\lambda)$ is the reflectance at the wavelength $(\lambda)$ of each individual spectra $(i)$, $min(R_{i})$, and $max(R_{i})$ are the minimum and maximum value of the spectra $(i)$

$$
NDVI = \frac{R(840nm)-R(668nm)}{R(840nm)+R(668nm)}
$$ {#eq-ndvi}

where $R(840nm)$ is the reflectance at 840 nm and $R(668nm)$ is the reflectance at 668 nm.

### Validation

```{r Validation Pixel Count}
#| echo: false
#| warning: false
#| cache: true
#| eval: false

df<-"Output/Validation_data" %>% 
  list.files("ResultsNewNN_NoXanthowithNDVIWithOldandBoat.csv",recursive = T, full.names = T) %>% 
  read.csv() %>% 
  as_tibble() %>% 
  rename(Truth_ID = "Truth") %>% 
  mutate(Truth =  case_when(Truth_ID == 1 ~ "Bare_Sediment",
                          Truth_ID == 2 ~ "Chlorophyta",
                          Truth_ID == 3 ~ "Bare_Sediment",
                          Truth_ID == 4 ~ "Magnoliosida",
                          Truth_ID == 5 ~ "Bare_Sediment",
                          Truth_ID == 6 ~ "Magnoliosida",
                          Truth_ID == 7 ~ "Phaeophyta",
                          Truth_ID == 8 ~ "Rhodphyta",
                          Truth_ID == 9 ~ "SunGlint",
                          Truth_ID == 10 ~ "Water",
                          Truth_ID == 11 ~ "Xanthophyceae",
                          Truth_ID == 12 ~ "Spartina",
                          Truth_ID == 41 ~ "Bleached seagrasses",
                          TRUE ~ "NA"),
         Pred_Class = case_when(Pred_Class == "Clorophyta" ~ "Chlorophyta",
                                Pred_Class == "Rhodphyta" ~ "Rhodphyta",
                                Pred_Class == "Deep_Sediment" ~ "Bare_Sediment",
                                Pred_Class == "MPB" ~ "Bare_Sediment",
                                (Pred_Class == "Low_SPC" & NDVI > 0.2) ~ "Magnoliosida",
                                (Pred_Class == "Low_SPC" & NDVI <= 0.2 )~ "Bare_Sediment",
                          TRUE ~ Pred_Class)) %>% 
  dplyr::filter(Truth != "Water",
                Truth  != "Spartina",
                Truth != "SunGlint",
                Truth != "Bleached seagrasses",
                Truth != "Xanthophyceae",
                # Pred_Class != "Low_SPC",
                Pred_Class != "Xanthophyceae",
                 Pred_Class != "Water",
                 Pred_Class != "SunGlint",
                !Flight == "Handfisher_1_old",
                !Flight == "Handfisher_2_old",
                !Flight == "Handfisher_2") %>%
  dplyr::select(-NDVI)



count_validation_pixel<-nrow(df)
write.csv(count_validation_pixel,"Output/count_validation_pixel.csv", row.names = F)
```

```{r count_validation_pixel}
#| echo: false
#| warning: false
#| cache: true

count_validation_pixel<-read.csv("Output/count_validation_pixel.csv") %>% 
  pull(x)
```

The workflow of this study revolves around two distinct flight heights (12 m and 120 m, @fig-workflow) where ensuring consistency between reflectances at both heights is crucial. This comparison was conducted at sites where low and high altitude flights overlapped. The low altitude flights were resampled to the same spatial resolution and grid as the high flights using a median resampling method. Reflectance values were then extracted, and a scatterplot was generated. Subsequently, the slope of the linear model and the coefficient of determination (R²) were computed.

The model was applied to all flights at both 12 and 120 m of altitude. In situ information on georeferenced class type and percent cover collected during each flight was used to assess the model accuracy. These images were used to construct a validation dataset indicating the presence or absence of each class. Additionally to the quadrat-based validation dataset, polygons of each class were photo interpreted in order to increase the number of pixels of the validation dataset. A confusion matrix, along with precision metrics such as global accuracy, sensitivity, specificity, and Kappa coefficient, was generated for each sites. All validation matrices were then aggregated to create a unique matrix . Altogether, a total of `r my_comma(round(count_validation_pixel,-3))` pixels was used to validate the model, thus providing a geographically robust validation dataset.

## Variable Importance Plots (VIP)

Variable Importance Plots (VIP) serve as a method to identify which predictors are important for predicting a specific class. This is achieved by repeatedly predicting the same dataset while shuffling one predictor at a time. The benchmark score obtained after each iteration is then compared to the benchmark score obtained without shuffling any variables. The greater the difference between these two benchmark values, the more important the variable is for the model [@WEI2015399].

## Impact of the percent cover on the prediction

The key aspect of the workflow adopted in the present study is the mapping of specific areas at two different altitudes (12m and 120m), resulting in two distinct resolutions for the same area (8mm and 80mm). The predictions made on the high-resolution flight can be used to estimate the percent cover of each vegetation class for every pixel of the lower resolution flight. Consequently, for each pixel of the high-altitude flights, percent covers of each vegetation class were obtained, and a kernel density plot was generated. This plot provides a visual representation of the behavior of the model in different vegetation percent cover scenarios. 

# Results

## Classification

The nine drone flights were utilized to produce a total of nine prediction maps, each of them associated with a probability map that indicates the probability of the selected class for every pixel. The low-altitude flight conducted in Gafanha, Portugal, represents the site with the highest complexity (@fig-GafLow). Among the five vegetation classes on which the model was trained, four were present on this site, with Chlorophyceae and Rhodophyceae mixed with the seagrass meadow. There was also Bacillariophyceae forming biofilms on parts of sediment surface. Although the seagrass bed was solely composed of *Nanozostera noltei*, various colors of this specie could be observed from dark green (corresponding to healthy leaves) to whitish/brown (when leaves were discolored having lost their pigmentation). Regardless of color, Magnoliopsida pixels were accurately predicted by the model.

```{r Figure 4 Gaf Low}
#| cache: true
#| echo: false
#| warning: false
#| eval: false


imglist<-
  data.frame(path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         new = case_when(str_detect(path, "no_Xantho") ~ "TRUE",
                          TRUE ~ "FALSE"),
         col = case_when(str_detect(path, "colored") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".aux.xml"))

shp_roi<-"Data/reflectance_calibration_low_&_high_flights/" %>%
  list.files(pattern = ".shp", recursive = T, full.names = T) %>%
  read_sf() %>%
  mutate(ID = case_when(name == "Microphytobenthos" ~ 1,
                        name == "ZOS" ~ 2,
                        name == "BL" ~ 3,
                        name == "SED" ~ 4,
                        name == "GRE" ~ 5,
                        name == "RED" ~ 6,
                        name == "Xanthophyceae" ~ 7)) %>% 
  as("Spatial") %>% 
  vect()


zoom_extent<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Gafanha_comparison")) %>% 
  pull(path) %>% 
  read_sf()

background_GafHigh<-"Data/shp/Aveiro" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "background_Gafanha_high")) %>% 
  pull(path) %>% 
  read_sf()
###### Preview ###########

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_aveiro <- filelist[str_detect(filelist,"mask_land_intertidal_Aveiro")] %>% 
  read_sf()

Flight_aveiro<-data.frame(
  Name=c(
  "Gafanha"
  ) ,
  Description = c("12m and 120m Flights"),
  Long=c(-8.742485) ,
  Lat=c(40.597599) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_aveiro))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)


p1_background<- read_sf("Data/shp/Aveiro/Background_p1_aveiro.shp")

p1<-ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land area"),
                    values = c("#7DC27D", "#BDBDBD"))+
  geom_sf(data = p1_background, fill = "white",show.legend = F, linewidth=0.05,alpha=0.93,colour="transparent")+
  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),show.legend = F, linewidth=0.05,alpha=0.93,colour="grey30")+

      coord_sf(xlim=c(519749,535233) ,
          ylim=c(4493310,4508794) )+
  ggforce::geom_mark_ellipse(data=Flight_aveiro,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 18,
                 label.hjust = 0.5,
                 con.size = 2,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    # theme_void()+
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  # geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))+
  theme_void()
######### RGB #########
 Gafanha_low_ortho<-imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "ortho",
         resampled == "TRUE",
         col == "TRUE") %>%
  pull(path) %>% 
  rast() 
 names(Gafanha_low_ortho)<-c("B1", "B3", "B5","alpha")

 values(Gafanha_low_ortho)[values(Gafanha_low_ortho$alpha) == 0] = NA
  
 Gafanha_low_ortho_zoomed<-Gafanha_low_ortho %>% 
   crop(zoom_extent)
 
 
 map_extent_full<- st_as_sf(as.polygons(ext(Gafanha_low_ortho)))
 sf::st_crs(map_extent_full)<-st_crs(Gafanha_low_ortho)
 

  map_extent_zommed<- st_as_sf(as.polygons(ext(Gafanha_low_ortho_zoomed)))
 sf::st_crs(map_extent_zommed)<-st_crs(Gafanha_low_ortho_zoomed)
 
 
 rgb_Gafanha_low_zoomed<-ggplot()+
   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho_zoomed, 
                                  r = 3,
                                  g = 2,
                                  b = 1)+
   theme_Bede_Map()+
   geom_sf(data = zoom_extent, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1)+
   coord_sf(crs = 4326)+
     theme_void()



 scale_labels<-data.frame(x = c(-8.74368, -8.743565,-8.74342),
                          y = c(rep(40.59792,3)),
                          text = c("0","10","20 m"))
 
 
 
  rgb_Gafanha_low<- ggplot()+
  scale_fill_manual("", 
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  geom_sf(data = background_GafHigh,
          fill = "white",
          show.legend = F,
          linewidth=0.05,
          alpha=0.4,
          colour="white")+
  geom_sf(data = background_GafHigh,
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="grey30")+
   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho,
         r = 1,
         g = 2,
         b = 3,
         maxcell = 4010533
         )+
    ggspatial::annotation_scale(location = "tl",
                                text_cex=2)+
      annotation_custom(ggplotGrob(p1),
                        xmin = -8.7430,
                        xmax = -8.742702,
                        ymin = 40.5970515, 
                        ymax = 40.5974) +
   theme_Bede_Map()+
   geom_sf(data = zoom_extent, 
           fill = "transparent",
           colour = "black",
           linetype = "dashed", 
           linewidth = 1)+
   coord_sf(crs = 4326)+
  annotation_custom(ggplotGrob(rgb_Gafanha_low_zoomed),
                    xmin = -8.7430,
                    xmax=-8.7427,
                    ymin = 40.5977) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),
                              y=c(40.5976275,40.5979,40.5975373,40.59771),
                              grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  theme(axis.title = element_blank(),
        axis.text.y = element_text(size = 20),
        axis.text.x = element_text(size = 20, angle = 20, hjust = 1))+
    scale_x_continuous(limits = c(-8.7437, -8.74275), breaks = -8.743)+
    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)

 
 
  
  

ggsave("Figures/Gaf_Low_RGB.png",rgb_Gafanha_low , width = 1920*4, height = 1129*4, units = "px")

zoom_extent<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Gafanha_comparison")) %>% 
  pull(path) %>% 
  read_sf()

####### Zoomed map ########


Gafanha_low_pred_zoomed<-imglist %>% 
filter(site == "Gafanha",
       alt == "low",
       type == "Pred",
       resampled == "FALSE",
       folder == "Input",
       new == "TRUE") %>% 
  pull(path) %>% 
  rast()
names(Gafanha_low_pred_zoomed)<-"layer"

Gafanha_low_pred_zoomed<-Gafanha_low_pred_zoomed %>% 
  crop(zoom_extent)
Gafanha_low_pred_zoomed<-as.factor(Gafanha_low_pred_zoomed)

Gafanha_low_pred_map_zoomed<-ggplot()+
  tidyterra::geom_spatraster(data = Gafanha_low_pred_zoomed, mapping = aes(fill = layer))+
  geom_sf(data = zoom_extent, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1)+
  coord_sf(crs = 4326)+
  scale_fill_manual(values=c("#70543e", "#b3ff1a","#70543e", "#DAA520", "#389318","#873e23","#b3002d", NA, "#42c9bc"), na.value = NA)+
  theme_void()+
  # coord_equal()+
  theme(axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.title = element_blank())+
  theme(legend.position = "none")
 # Gafanha_low_pred_map_zoomed

####  Overall map
Gafanha_low_pred<-imglist %>% 
filter(site == "Gafanha",
       alt == "low",
       type == "Pred",
       # resampled == "TRUE",
       new == "TRUE") %>% 
  pull(path) %>% 
  rast()
names(Gafanha_low_pred)<-"layer"


values(Gafanha_low_pred)[values(Gafanha_low_pred) == 0] = NA

Gafanha_low_pred<-Gafanha_low_pred %>% 
  as.factor()

####### Pred ######


Gafanha_low_pred_map <-
  ggplot()+
  scale_fill_manual("", 
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  geom_sf(data = background_GafHigh,
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="grey30")+
  # geom_sf(data = background_GafHigh,
  #         fill = "white",
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=1,
  #         colour="white")+
   ggnewscale::new_scale("fill")+
    tidyterra::geom_spatraster(data = Gafanha_low_pred, 
                               mapping = aes(fill = layer),
                               maxcell = 500832*8)+
  geom_sf(data = zoom_extent, 
          fill = "transparent", 
          colour = "black",
          linetype = "dashed", 
          linewidth = 1)+
  coord_sf(crs = 4326)+
  annotation_custom(ggplotGrob(Gafanha_low_pred_map_zoomed), 
                    xmin = -8.7430,
                    xmax=-8.7427, 
                    ymin = 40.5977) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),
                              y=c(40.5976275,40.5979,40.5975373,40.59771),
                              grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA,NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  theme_Bede_Map()+
  # coord_equal()+
   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
         # axis.text.y = element_text(size = 20),
         axis.text.y = element_blank(),
         axis.title = element_blank(),
         legend.background = element_blank(),
         legend.position = c(0.98,0.3),
         legend.text = element_text(size = 20),
         legend.key.size = unit(1,"cm"))+
    scale_x_continuous(limits = c(-8.7437, -8.74275), breaks = -8.743)+
    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)


ggsave("Figures/Gaf_Low_Pred.png",Gafanha_low_pred_map , width = 1920*4, height = 1129*4, units = "px")

################# PLOT AND SAVING ###########

plot_Gaf_Low<-rgb_Gafanha_low+
  Gafanha_low_pred_map
 



ggsave("Figures/Maps Pred/FigX-Gaf_Low_Pred.png",plot_Gaf_Low , width = 1920*4, height = 1009*4, units = "px")
```

```{r Figure 4 Gaf Low plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: RGB orthomosaic (Left) and Prediction (Right) of the low altitude flight of Gafanha, Portugal. The total extent of this flight was 3000m² with a resolution of 8 mm per pixel. Background colors indicate intertidal area (Light Green) and land area (Light Grey). The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.
#| label: fig-GafLow
#| fig-width: 10
#| fig-height: 8
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Maps Pred/FigX-Gaf_Low_Pred.png")

```

```{r Figure 4 V2}
#| cache: true
#| echo: false
#| warning: false
#| eval: false
imglist<-
  data.frame("Data",
             path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         str_detect(path, "High") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          str_detect(path,"AveiroHigh")~"Gafanha",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         new = case_when(str_detect(path, "no_Xantho") ~ "TRUE",
                         str_detect(path, "NewPreds") ~ "TRUE",
                          TRUE ~ "FALSE"),
         col = case_when(str_detect(path, "colored") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".aux.xml"))

########## ZOOM #############

zoom_extent<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom")) %>% 
  pull(path) %>% 
  read_sf()

mask_low<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"mask_Gafanha_low")) %>% 
  pull(path) %>% 
  read_sf()

Gafanha_low_ortho_zoomed<-imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "ortho",
         resampled == "TRUE",
         col == "TRUE") %>%
  pull(path) %>% 
  rast() %>% 
  crop(zoom_extent)

names(Gafanha_low_ortho_zoomed)<-c("B1", "B3", "B5","alpha")

 Gafanha_low_pred_zoomed<-imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "Pred",
         # resampled == "TRUE",
         new == "TRUE") %>% 
  pull(path) %>% 
  rast() %>% 
  crop(zoom_extent) %>% 
  mask(mask_low, inverse = T) %>% 
   as.factor()
   
names(Gafanha_low_pred_zoomed)<-"layer"

zoomed_low_map<-ggplot()+
  tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho_zoomed,
                                 r = 1,
                                 g = 2,
                                 b = 3)+
  tidyterra::geom_spatraster(data = Gafanha_low_pred_zoomed, mapping = aes(fill = layer), show.legend = F)+
  
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA), 
                    na.value = NA,
                    name = "", 
                    labels = c("Sediment", 
                               "Chlorophyceae", 
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  geom_sf(data = zoom_extent, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 2)+
  theme(legend.position = "none")+
  theme_void()



#############

 Gafanha_low_ortho<-imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "ortho",
         resampled == "TRUE",
         col == "TRUE") %>%
  pull(path) %>% 
  rast() 
 names(Gafanha_low_ortho)<-c("B1", "B3", "B5","alpha")
values(Gafanha_low_ortho)[values(Gafanha_low_ortho$alpha) == 0] = NA

 
 Gafanha_low_pred<-imglist %>% 
  filter(site == "Gafanha",
         alt == "low",
         type == "Pred",
         # resampled == "TRUE",
         new == "TRUE") %>% 
  pull(path) %>% 
  rast()
names(Gafanha_low_pred)<-"layer"

Gafanha_low_pred_masked<-Gafanha_low_pred %>% 
  # crop(mask_low) %>% 
  mask(mask_low, inverse = T)

values(Gafanha_low_pred_masked)[values(Gafanha_low_pred_masked) == 0] = NA

Gafanha_low_pred_masked<-Gafanha_low_pred_masked %>% 
  as.factor()

rgb_Gafanha_low <- ggplot()+
  tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho,
                                 r = 1,
                                 g = 2,
                                 b = 3)+
  tidyterra::geom_spatraster(data = Gafanha_low_pred_masked, mapping = aes(fill = layer))+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA), 
                    na.value = NA,
                    name = "", 
                    labels = c("Sediment", 
                               "Chlorophyceae", 
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  ggspatial::annotation_scale(location = "bl",text_cex=2)+
  geom_sf(data = zoom_extent, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1)+

  geom_segment(aes(x = -8.7434247325, y=40.5977530006, xend = -8.7430558162, yend = 40.5972152706), linetype ="dashed" ,linewidth=2)+
  annotation_custom(ggplotGrob(zoomed_low_map), xmin = -8.743725, xmax = -8.7434057328, ymin = 40.5977200450, ymax = 40.59798) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.74336194,-8.74371,-8.743243794,-8.7434057328), y=c(40.59762751,40.5977400850,40.59762725,40.5977200450),grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  theme_Bede_Map()+
  coord_sf(crs = 4326)+
  theme(axis.title = element_blank(),
        axis.text.y = element_text(size = 20),
        axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
        legend.position=c(0.3, 0.3))+
  # ggtitle("a ")+
  scale_x_continuous(breaks=seq(-8.7437, -8.7430, 0.0002))
rgb_Gafanha_low

ggsave("Figures/Gaf_Low_RGB_Pred_V2.png",rgb_Gafanha_low , width = 890*4, height = 1120*4, units = "px")


```

The high-altitude flight over Gafanha covered a total area of approwimately 1 km² (@fig-GafHigh). A channel contouring a small island was masked in the prediction map. Most of the intertidal area was classified as Magnoliopsida by the model, including seagrass patches with discolored leaves. Only a few pixels were classified as Chlorophyceae at this spatial scale. Furthermore, the area that was classified as Bacillariophyceae in the low-altitude flight remained mostly classified as such in the high-altitude flight, though some pixels were classified as Magnoliopsida. Patches of Rhodophyceae were correctly classified. In the northern part of the site and near the land eadges, patches of the schorre angiosperm *Spartina sp.* were misclassified, either as Magnoliopsida or as Phaeophyceae.

```{r Figure 5 Gaf High}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

imglist<-
  data.frame(path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         str_detect(path, "High") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          str_detect(path, "AveiroHigh") ~ "Gafanha",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "Preds") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         new = case_when(str_detect(path, "no_Xantho") ~ "TRUE",
                         str_detect(path, "NewPreds") ~ "TRUE",
                          TRUE ~ "FALSE"),
         col = case_when(str_detect(path, "colored") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".aux.xml"))

#### Preview ####

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_aveiro <- filelist[str_detect(filelist,"mask_land_intertidal_Aveiro")] %>% 
  read_sf()

Flight_aveiro<-data.frame(
  Name=c(
  "Gafanha"
  ) ,
  Description = c("12m and 120m Flights"),
  Long=c(-8.742485) ,
  Lat=c(40.597599) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_aveiro))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)

p1_background<- read_sf("Data/shp/Aveiro/Background_p1_aveiro.shp")

p1<-ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land area"),
                    values = c("#7DC27D", "#BDBDBD"))+
  geom_sf(data = p1_background, fill = "white",show.legend = F, linewidth=0.05,alpha=0.93,colour="transparent")+
  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),show.legend = F, linewidth=0.05,alpha=0.93,colour="grey30")+
      coord_sf(xlim=c(519749,535233) ,
          ylim=c(4493310,4508794) )+
  ggforce::geom_mark_ellipse(data=Flight_aveiro,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 20,
                 label.hjust = 0.5,
                 con.size = 2,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    # theme_void()+
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  # geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))+
  theme_void()

#####

land_mask_GafHigh<-"Data/shp/Aveiro" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "mask_Gafanha_high1")) %>% 
  pull(path) %>% 
  read_sf()

background_GafHigh<-"Data/shp/Aveiro" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "background_Gafanha_high")) %>% 
  pull(path) %>% 
  read_sf()

GafHigh_ortho<-imglist %>% 
  dplyr::filter(site == "Gafanha",
                type == "ortho",
                alt=="high",
                col == "TRUE") %>%
  pull(path) %>% 
  rast()
names(GafHigh_ortho)<-c("B1","B3", "B5", "alpha")

# values(GafHigh_ortho)[values(GafHigh_ortho$B1) == 0] = NA

GafHigh_ortho_masked<-GafHigh_ortho %>% 
  mask(land_mask_GafHigh, inverse = F) %>% 
  crop(land_mask_GafHigh)

GafHigh_ortho_masked<-na.omit(GafHigh_ortho_masked, field=NA, geom=FALSE)


###### RGB ########
zoom_gaf_high_sf<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Gafanha_High_comparison")) %>% 
  pull(path) %>% 
  read_sf()

Gaflow_extent<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"GafLow_extent.shp")) %>% 
  pull(path) %>% 
  read_sf()

rgb_Gafanha_High_zoomed<-GafHigh_ortho_masked %>% 
  crop(zoom_gaf_high_sf)

rgb_Gafanha_High_zoomed<-
  ggplot()+
  tidyterra::geom_spatraster_rgb(data = rgb_Gafanha_High_zoomed,
         r = 1,
         g = 2,
         b = 3)+
     geom_sf(data = zoom_gaf_high_sf, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1)+
  theme_void()

  
  

rgb_Gafanha_High <- ggplot()+
  scale_fill_manual("",  
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  geom_sf(data = background_GafHigh,
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.93,
          colour="grey30")+
  geom_sf(data = background_GafHigh,
          fill = "white",
          show.legend = F,
          linewidth=0.05,
          alpha=0.4,
          colour="white")+
   tidyterra::geom_spatraster_rgb(data = GafHigh_ortho_masked,
         r = 1,
         g = 2,
         b = 3,
         maxcell = 5007120)+
    ggspatial::annotation_scale(location = "bl",
                                text_cex=2)+
    annotation_custom(ggplotGrob(p1), 
                      xmin = -8.744, 
                      xmax = -8.7412,
                      ymin = 40.5923,
                      ymax = 40.595) +
    geom_sf(data = zoom_gaf_high_sf,
            fill = "transparent", 
            colour = "black",
            linetype = "dashed", 
            linewidth = 1)+
    geom_sf(data = Gaflow_extent,
            fill = "transparent", 
            colour = "red",
            linetype = "dashed", 
            linewidth = 2)+
    geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.74363778,-8.74757,-8.74351982,-8.7453), 
                              y=c(40.5983781677,40.5995,40.598377893,40.5995),
                              grp=c(1,1,2,2)),
            linetype = "dashed", 
            linewidth = 1)+
  annotation_custom(ggplotGrob(rgb_Gafanha_High_zoomed),
                    xmin = -8.7479, 
                    xmax = -8.7452, 
                    ymin = 40.5979,
                    ymax = 40.603) +
   theme_Bede_Map()+
   coord_sf(crs = 4326)+
   # xlim(c(-8.748, -8.741))+
  # ylim(c(40.593,40.601))+
  theme(axis.title = element_blank(),
         axis.text.x = element_text(size = 20, angle = 20, hjust = 1),
         axis.text.y = element_text(size = 20))+
  scale_x_continuous(limits = c(-8.747576, -8.741465),breaks =  -8.745)+
  scale_y_continuous(limits = c(40.59297,40.60109),breaks =  40.595)
# rgb_Gafanha_High

ggsave("Figures/Gaf_High_RGB.png",rgb_Gafanha_High , width = 712*4, height = 1120*4, units = "px")




######### Pred #######
Gafanha_high_pred<-imglist %>% 
filter(site == "Gafanha",
       alt == "high",
       type == "Pred",
       new == "TRUE",
       !str_detect(path, "Probs")) %>% 
  pull(path) %>% 
  rast()
names(Gafanha_high_pred)<-"layer"

GafHigh_pred_masked<-Gafanha_high_pred %>% 
  mask(land_mask_GafHigh, inverse = F) %>% 
  crop(land_mask_GafHigh)

GafHigh_pred_masked<-na.omit(GafHigh_pred_masked, field=NA, geom=FALSE) 

values(GafHigh_pred_masked)[values(GafHigh_pred_masked) == 0] = NA
values(GafHigh_pred_masked)[values(GafHigh_pred_masked) == 3] = 1

GafHigh_pred_masked<-GafHigh_pred_masked %>% 
  as.factor()

Gafanha_High_zoomed_pred<-GafHigh_pred_masked %>% 
  crop(zoom_gaf_high_sf)

Gafanha_High_zoomed_pred<-
  ggplot()+
   tidyterra::geom_spatraster(data = Gafanha_High_zoomed_pred, mapping = aes(fill = layer),
                            show.legend = F,
                             maxcell = 5007120)+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
     geom_sf(data = zoom_gaf_high_sf, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1)+
  theme_void()

Gafanha_high_pred_map<-ggplot()+
  geom_sf(data = background_GafHigh, 
          mapping = aes(fill = Type),
          show.legend = F,
          linewidth=0.05,
          alpha=0.93,
          colour="grey30")+
  geom_sf(data = background_GafHigh,
          fill = "white",
          show.legend = F,
          linewidth=0.05,
          alpha=0.4,
          colour="white")+
    scale_fill_manual("", 
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  ggnewscale::new_scale("fill")+
  tidyterra::geom_spatraster(data = GafHigh_pred_masked, 
                             # show.legend = F,
                             mapping = aes(fill = layer),
                             maxcell = 5010420)+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
       geom_sf(data = zoom_gaf_high_sf, 
               fill = "transparent", 
               colour = "black",
               linetype = "dashed", 
               linewidth = 1)+
    geom_sf(data = Gaflow_extent,
            fill = "transparent", 
            colour = "red",
            linetype = "dashed", 
            linewidth = 2)+
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.74363778,-8.74757,-8.74351982,-8.7453), 
                              y=c(40.5983781677,40.5995,40.598377893,40.5995),
                              grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  annotation_custom(ggplotGrob(Gafanha_High_zoomed_pred), 
                    xmin = -8.7479, 
                    xmax = -8.7452, 
                    ymin = 40.5979,
                    ymax = 40.603) +
  coord_sf(crs = 4326)+
  theme_Bede_Map()+
   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
         axis.title = element_blank(),
        # axis.text.y = element_text(size = 20),
        axis.text.y = element_blank(),
         legend.background = element_blank(),
         legend.position = c(0.96,0.23),
         legend.text = element_text(size = 23),
         legend.key.size = unit(1.2,"cm"))+
  scale_x_continuous(limits = c(-8.747576, -8.741465),breaks =  -8.745)+
  scale_y_continuous(limits = c(40.59297,40.60109),breaks =  40.595)
# Gafanha_high_pred_map

ggsave("Figures/Gaf_High_Pred.png",Gafanha_high_pred_map , width = 712*4, height = 1120*4, units = "px")

################# PLOT AND SAVING ###########
plot_GafHigh<-rgb_Gafanha_High+
  Gafanha_high_pred_map

ggsave("Figures/Maps Pred/FigX-Gaf_High_Pred.png",plot_GafHigh , width = 2105*4, height = 1363*4, units = "px")


#########


```

```{r Figure 5 Gaf High plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: RGB orthomosaic (Left) and Prediction (Right) of the high altitude flight of Gafanha, Portugal. The total extent of this flight was about 1 km² with a resolution of 80 mm per pixel. Background colors indicate intertidal area (Light Green), land area (Light Grey) and water (Light Blue). The yellow polygon shows the extent of the low altitude flight of Gafanha presented in @fig-GafLow. The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.
#| label: fig-GafHigh
#| fig-width: 10
#| fig-height: 8
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Maps Pred/FigX-Gaf_High_Pred.png")

```

Amoung the high altitude flights, the one acquired over the inner lagoon of the Ria de Aveiro covered the largest area with approximately 1.5 km² (@fig-Boat). This site was dominated by seagrass and the red macroalgae *Gracilaria vermicullophyla*. The classification provided consistent results, with a patchy seagrass meadow mixed with red macroalgae on the eastern part of the site. As shown in the zoom (@fig-Boat), the edges of the meadow were colonised by green macroalgae

```{r Figure 6 Boat}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

imglist<-
  data.frame(path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         str_detect(path, "High") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          str_detect(path, "AveiroHigh") ~ "Gafanha",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "Preds") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         new = case_when(str_detect(path, "no_Xantho") ~ "TRUE",
                         str_detect(path, "NewPreds") ~ "TRUE",
                          TRUE ~ "FALSE"),
         col = case_when(str_detect(path, "colored") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".aux.xml"))
########### PREVIEW #############
filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_aveiro <- filelist[str_detect(filelist,"mask_land_intertidal_Aveiro")] %>% 
  read_sf()

Flight_aveiro<-data.frame(
  Name=c(
  "Marinha Lanzarote"
  ) ,
  Description = c(
                  "120m Flight"),
  Long=c( 
         -8.690677) ,
  Lat=c(
        40.665120) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_aveiro))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)


p1_background<- read_sf("Data/shp/Aveiro/Background_p1_aveiro.shp")

p1<-ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land area"),
                    values = c("#7DC27D", "#BDBDBD"))+
  geom_sf(data = p1_background, fill = "white",show.legend = F, linewidth=0.05,alpha=0.93,colour="transparent")+
  geom_sf(data = mask_aveiro, mapping = aes(fill = Type),linewidth=0.05,alpha=0.93,show.legend = F,colour="grey30")+
      coord_sf(xlim=c(519749,535233) ,
          ylim=c(4493310,4508794) )+
  ggforce::geom_mark_ellipse(data=Flight_aveiro,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 10,
                 label.hjust = 0.5,
                 con.size = 2,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    # theme_void()+
  theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  # geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  scale_x_continuous(breaks = seq(-8.75, -8.6, by = 0.1))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20))+
  theme_void()
##### ZOOM and masking #####

Boat_rgb<-imglist %>% 
  filter(str_detect(path,"Boat_high_RGB_merged.tif")) %>% 
  pull(path) %>% 
  rast()
names(Boat_rgb)<-c("B1","B3","B5")
values(Boat_rgb)[values(Boat_rgb) == 0] = NA

mask_boat<-"Data/shp/Aveiro" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "boat")) %>% 
  pull(path) %>% 
  read_sf()

background_Boat<-"Data/shp/Aveiro" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "background_Boat")) %>% 
  pull(path) %>% 
  read_sf()

zoom_boat_high_sf<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Boat_comparison")) %>% 
  pull(path) %>% 
  read_sf()

zoom_boat_high_sf_2<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Boat_2_comparison")) %>% 
  pull(path) %>% 
  read_sf()

rgb_Boat_zoomed<-Boat_rgb %>% 
  crop(zoom_boat_high_sf)

rgb_Boat_zoomed_2<-Boat_rgb %>% 
  crop(zoom_boat_high_sf_2)

Boat_rgb_mask<-Boat_rgb %>% 
  mask(mask_boat, inverse = T)

 
rgb_Boat_zoomed_map<- ggplot()+
  geom_spatraster_rgb(data = rgb_Boat_zoomed,
                      r = 3,
                      g = 2,
                      b = 1,
                      max_col_value = 4000)+
  geom_sf(data = zoom_boat_high_sf, fill = "transparent", linetype = "dashed",colour = "black", linewidth = 1)+

  theme_void()

rgb_Boat_zoomed_map_2
ggplot()+
  geom_spatraster_rgb(data = rgb_Boat_zoomed_2,
                      r = 3,
                      g = 2,
                      b = 1,
                      interpolate = F,
                      max_col_value = 4000)+
  geom_sf(data = zoom_boat_high_sf_2, fill = "transparent", linetype = "dashed",colour = "black", linewidth = 1)+

  theme_void()

####### RGB ############

RGB_Boat_map<-
ggplot()+
  scale_fill_manual("",  
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  geom_sf(data = background_Boat,
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.93,
          colour="transparent")+
  geom_sf(data = background_Boat,
          fill = "white",
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="transparent")+
  tidyterra::geom_spatraster_rgb(data = Boat_rgb_mask,
                      r = 3,
                      g = 2,
                      b = 1,
                      # maxcell = 5000,
                      maxcell = 500832*8,
                      max_col_value = 5000)+
  geom_sf(data = zoom_boat_high_sf,
          fill = "transparent",
          colour = "black", 
          linewidth = 1)+
  geom_sf(data = zoom_boat_high_sf_2,
          fill = "transparent",
          colour = "black", 
          linewidth = 1)+
  annotation_custom(ggplotGrob(rgb_Boat_zoomed_map),
                    xmin = -8.6975,
                    xmax = -8.69,
                    ymin = 40.6666,
                    ymax = 40.6711) +
  annotation_custom(ggplotGrob(rgb_Boat_zoomed_map_2),
                    xmin = -8.6975+0.007,
                    xmax = -8.69+0.007,
                    ymin = 40.6666,
                    ymax = 40.6711) +
  annotation_custom(ggplotGrob(p1),
                    xmin = -8.6795,
                    xmax = -8.6736,
                    ymin = 40.6585,
                    ymax = 40.6625) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.69452127,-8.6965,-8.69440039,-8.69105), 
                              y=c(40.66244282,40.66673,40.66244282,40.66673),
                              grp=c(1,1,2,2)),
            linetype = "dashed", 
            linewidth = 1)+
    geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.6819877,-8.69645+0.007,-8.6818696,-8.6911+0.007), 
                              y=c(40.6652874,40.66675,40.6652874,40.66673),
                              grp=c(1,1,2,2)),
            linetype = "dashed", 
            linewidth = 1)+
  ggspatial::annotation_scale(location = "bl",
                              text_cex=2)+
  scale_x_continuous(limits = c(-8.6965,-8.675),
                     breaks =  -8.685)+
  scale_y_continuous(limits = c(40.659,40.6704),
                     breaks =  40.664)+
  theme_Bede_Map()+
  theme(axis.title = element_blank(),
        # axis.text.x = element_text(size = 20, angle = 20 , hjust = 1),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 20))+
   coord_sf(crs = 4326)


####### Pred ######## 
Boat1_pred<-imglist %>% 
  filter(str_detect(path,"AveiroBoat1_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif")) %>% 
  pull(path) %>% 
  rast()
names(Boat1_pred)<-"layer"

Boat2_pred<-imglist %>% 
  filter(str_detect(path,"AveiroBoat2_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif")) %>% 
  pull(path) %>% 
  rast()
names(Boat2_pred)<-"layer"

values(Boat1_pred)[values(Boat1_pred) == 0] = NA
values(Boat2_pred)[values(Boat2_pred) == 0] = NA


B1_overextent<-ext(Boat1_pred)
B1_overextent[2]<-ext(Boat2_pred)[2]
B1_overextent[4]<-ext(Boat2_pred)[4]
B1_overextent <- rast(B1_overextent)
res(B1_overextent)<-res(Boat1_pred)
# terra::writeRaster(B1$B1,"B1.tif")
# terra::writeRaster(B2$B2,"B2.tif")

B2_resampled <- terra::resample(Boat2_pred,B1_overextent, method = "near",threads = T)
# terra::writeRaster(B2_resampled$B1,"B2_resampled.tif", overwrite = T)

Boat_pred<-merge(Boat1_pred,B2_resampled)

Boat_pred_aggregate<-terra::aggregate(Boat_pred,fact = 6, fun ="modal") 

masked_pred<-Boat_pred_aggregate %>% 
  mask(mask_boat,inverse=TRUE)%>% 
  as.factor()

Boat_pred_zoom<-Boat1_pred %>% 
  crop(zoom_boat_high_sf) %>% 
  as.factor()

Boat_pred_zoom_2<-Boat2_pred %>% 
  crop(zoom_boat_high_sf_2) %>% 
  as.factor()

Boat_Pred_zoomed_map<- ggplot()+
  tidyterra::geom_spatraster(data = Boat_pred_zoom, 
                             mapping = aes(fill = layer), 
                             show.legend = F,
                             maxcell = 5010420)+
  scale_fill_manual(values=c("#70543e","#b3ff1a","#389318","#873e23"),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorphyceae",
                               "Magnoliopsida"))+
  geom_sf(data = zoom_boat_high_sf, 
          fill = "transparent", 
          linetype = "dashed",
          colour = "black", 
          linewidth = 1)+
  theme_void()

Boat_Pred_zoomed_map_2<- ggplot()+
  tidyterra::geom_spatraster(data = Boat_pred_zoom_2, 
                             mapping = aes(fill = layer), 
                             show.legend = F,
                             maxcell = 5010420)+
  scale_fill_manual(values=c("#70543e","#389318","#873e23","#b3002d"),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae"))+
  geom_sf(data = zoom_boat_high_sf_2, 
          fill = "transparent", 
          linetype = "dashed",
          colour = "black", 
          linewidth = 1)+
  theme_void()


Boat_pred_map<-ggplot()+
  geom_sf(data = background_Boat, 
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.93,
          colour="transparent")+
  geom_sf(data = background_Boat,
          fill = "white",
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="transparent")+
    scale_fill_manual("", 
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  ggnewscale::new_scale("fill")+
  tidyterra::geom_spatraster(data = masked_pred, 
                             mapping = aes(fill = layer),
                             # show.legend = F,
                             maxcell = 5010420,
                             )+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA,NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  ggnewscale::new_scale("fill")+
  geom_sf(data = zoom_boat_high_sf, 
               fill = "transparent", 
               colour = "black",
               linetype = "dashed", 
               linewidth = 1)+
  geom_sf(data = zoom_boat_high_sf_2, 
               fill = "transparent", 
               colour = "black",
               linetype = "dashed", 
               linewidth = 1)+
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.69452127,-8.6965,-8.69440039,-8.69105), 
                              y=c(40.66244282,40.66673,40.66244282,40.66673),
                              grp=c(1,1,2,2)),
            linetype = "dashed", 
            linewidth = 1)+
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-8.6819877,-8.69645+0.007,-8.6818696,-8.6911+0.007), 
                              y=c(40.6652874,40.66675,40.6652874,40.66673),
                              grp=c(1,1,2,2)),
            linetype = "dashed", 
            linewidth = 1)+
  annotation_custom(ggplotGrob(Boat_Pred_zoomed_map),
                    xmin = -8.6975,
                    xmax = -8.69,
                    ymin = 40.6666,
                    ymax = 40.6711) +
  annotation_custom(ggplotGrob(Boat_Pred_zoomed_map_2),
                    xmin = -8.6975+0.007,
                    xmax = -8.69+0.007,
                    ymin = 40.6666,
                    ymax = 40.6711) +
  coord_sf(crs = 4326)+
  theme_Bede_Map()+
   theme(
     # axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
     axis.text.x = element_blank(),
         axis.title = element_blank(),
        axis.text.y = element_text(size = 20),
         legend.background = element_blank(),
         legend.position = c(0.98,0.38),
         legend.text = element_text(size = 18),
         legend.key.size = unit(0.8,"cm"))+
  scale_x_continuous(limits = c(-8.6965,-8.675),
                     breaks =  -8.685)+
  scale_y_continuous(limits = c(40.659,40.6704),
                     breaks =  40.664)
################# PLOT AND SAVING ###########
plot_Boat<-RGB_Boat_map/
  Boat_pred_map

ggsave("Figures/Maps Pred/FigX-Boat_Pred.png",plot_Boat , width = 1000*4, height = 1120*4, units = "px")


```

```{r Figure 6 Boat plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: RGB orthomosaic (Top) and Prediction (Bottom) of the flight made in the inner part of Ria de Aveiro Lagoon, Portugal. The total extent of this flight was about 1.5 km² with a resolution of 80 mm per pixel. Background colors indicate intertidal area (Light Green), land area (Light Grey) and water (Light Blue). Each cover an area equivalent to a 10 m Sentinel-2 pixel size.
#| label: fig-Boat
#| fig-width: 10
#| fig-height: 4
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Maps Pred/FigX-Boat_Pred.png")

```

The flight over L'Epine in Noirmoutier Island, France (@fig-Dike) was conducted near a dike, which crossed the northern part of the site from west to east. Alongside this dike, brown algae for the order Fucales (*Fucus spp.*, *Ascophyllum nodosum*) were attached to sparse rocks and stranded green algae (*Ulva spp.*) could be observed Despite the high mixture between Chlorophyceae and Magnoliopsida these two classes were correctly discriminated by the classifier.

```{r Figure 7 North Dike}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

imglist<-
  data.frame(path = list.files(pattern = ".tif", recursive = T, full.names = T)) %>% 
  mutate(folder = case_when(str_detect(path, "Data") ~ "Input",
                            TRUE ~ "Output"),
         alt = case_when(str_detect(path, "high") ~ "high",
                         str_detect(path, "High") ~ "high",
                         TRUE ~ "low"),
         site = case_when(str_detect(path, "Gafanha") ~ "Gafanha",
                          str_detect(path, "AveiroHigh") ~ "Gafanha",
                          TRUE ~ "Duer"),
         type = case_when(str_detect(path, "pred") ~ "Pred",
                          str_detect(path, "Preds") ~ "Pred",
                          str_detect(path, "NDVI") ~ "NDVI",
                          TRUE ~ "ortho"),
         resampled = case_when(str_detect(path, "resampled") ~ "TRUE",
                          TRUE ~ "FALSE"),
         new = case_when(str_detect(path, "no_Xantho") ~ "TRUE",
                         str_detect(path, "NewPreds") ~ "TRUE",
                          TRUE ~ "FALSE"),
         col = case_when(str_detect(path, "colored") ~ "TRUE",
                          TRUE ~ "FALSE"),
         correction = case_when(str_detect(path, "corrected_per_bands") ~ "Bands",
                          str_detect(path, "corrected.tif") ~ "lm_all",
                          TRUE ~ "NA")) %>% 
  dplyr::filter(alt != "NA",
                !str_detect(path,".aux.xml"))

##### Preview #####

filelist<-list.files("Data/shp/", pattern = ".shp", recursive = T,full.names = T)
mask_BB <- filelist[str_detect(filelist,"mask_land_intertidal_BB")] %>% 
  read_sf()

Flight_BB<-data.frame(
  Name=c(
  "L'Epine"
  ) ,
  Description = c(
                  "120m Flight"),
  Long=c(
         -2.228239) ,
  Lat=c( 
        46.989515) 
  )  %>% 
  st_as_sf(coords=c("Long","Lat") )  %>% 
  st_set_crs("EPSG:4326")  %>% 
  st_transform(crs(mask_BB))  %>% 
  dplyr::mutate(lon = sf::st_coordinates(.) [,1],
                lat = sf::st_coordinates(.) [,2]) %>% 
  sf::st_set_geometry(NULL)

p1 <- ggplot() +
  scale_fill_manual("", labels = c("Intertidal area", "Land mask"),
                    values = c("#7DC27D", "#BDBDBD"))+
  geom_sf(data = mask_BB, mapping = aes(fill = Type), linewidth=0.05,alpha=0.93, show.legend = F,colour="grey30")+
      coord_sf(xlim=c(550609,579539) ,
          ylim=c(5189447,5218377) )+
  ggforce::geom_mark_ellipse(data=Flight_BB,
                 aes(x=lon,
                     y=lat,
                     label = Name,
                     group = Name),
                     # description=Description),
                 size=0.3,
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 con.size = 2,
                 label.fontsize = 10,
                 label.hjust = 0.5,
                 alpha=0.8,
  expand = unit(2, "mm") , 
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
  # theme_Bede_Map()+
  labs(x="Longitude",
       y="Latitude")+
  # geom_label(aes(x = 553460, y = 5216442, label = "B"), size = 20)+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = c(0.95,0.2),
        legend.key.size =  unit(1, "cm"),
        legend.text = element_text(size = 20),
        legend.title=element_blank(),
        legend.background = element_rect(linewidth = 0.5, 
                                         fill = "white",
                                         linetype="solid", 
                                  colour ="black"),
        # panel.background = element_rect(fill = "#FFFFFF90"),
        axis.title = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank())+
  theme_void()

##### RGB ######

Dike_rgb<-imglist %>% 
  filter(str_detect(path,"NorthDike_high_multi_4326_colored.tif")) %>% 
  pull(path) %>% 
  rast()
names(Dike_rgb)<-c("B1","B3","B5","alpha")
values(Dike_rgb)[values(Dike_rgb$alpha) == 0] = NA

mask_Dike<-"Data/shp/Bourgneuf" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "mask_NorthDike")) %>% 
  pull(path) %>% 
  read_sf()

background_Dike<-"Data/shp/Bourgneuf" %>% 
  list.files(".shp", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path, "background")) %>% 
  pull(path) %>% 
  read_sf()

zoom_Dike_high_sf<-"Data/shp" %>% 
  list.files(".shp",recursive = T,full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  dplyr::filter(str_detect(path,"zoom_extent_map_Dike_comparison")) %>% 
  pull(path) %>% 
  read_sf()

Dike_rgb_masked<-Dike_rgb %>% 
  crop(mask_Dike) %>%
  mask(mask_Dike)


zoom_rgb_dike<-Dike_rgb_masked %>% 
  crop(zoom_Dike_high_sf)

zoom_rgb_dike_map<-ggplot()+
  geom_spatraster_rgb(data = zoom_rgb_dike,
                      r = 3,
                      g = 2,
                      b = 1)+
  geom_sf(data = zoom_Dike_high_sf, fill = "transparent", linetype = "dashed",colour = "black", linewidth = 1)+
  coord_sf(crs = 32630)+
  theme_void()


RGB_Dike_map <- ggplot()+
  scale_fill_manual("",  
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  geom_sf(data = background_Dike,
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.93,
          colour="transparent")+
  geom_sf(data = background_Dike,
          fill = "white",
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="transparent")+
  tidyterra::geom_spatraster_rgb(data = Dike_rgb_masked,
                      r = 3,
                      g = 2,
                      b = 1,
                      # maxcell = 500,
                      maxcell = 500832*8
                      )+
  geom_sf(data = zoom_Dike_high_sf, 
          fill = "transparent", 
          linetype = "dashed",
          colour = "black", 
          linewidth = 1)+
  annotation_custom(ggplotGrob(zoom_rgb_dike_map), 
                    xmin = -2.226, 
                    ymin = 46.9888,
                    ymax = 46.9893) +
  annotation_custom(ggplotGrob(p1),
                    xmin = -2.226,
                    ymin = 46.9875) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-2.226834,-2.225905,-2.226834,-2.225905),
                              y=c(46.9886439,46.9892105,46.9885538,46.988805),
                              grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  ggspatial::annotation_scale(location = "tl",text_cex=2)+
  scale_x_continuous(limits = c(-2.2293,-2.2253),
                     breaks =  -2.228)+
  scale_y_continuous(limits = c(46.9882,46.98935),
                     breaks =  46.9890)+
  theme_Bede_Map()+
  theme(
    # axis.text.x =element_text(size = 20, angle = 20, hjust = 1),
    axis.text.x =element_blank(),
        axis.title = element_blank(),
        axis.text.y = element_text(size = 20))+
   coord_sf(crs = 4326)


##### Pred ######

Dike_Pred<-imglist %>% 
  filter(str_detect(path,"Noirmoutier_highPrediction_nnNewStanRawMetrics_Preds_NoXantho_7_4326.tif")) %>% 
  pull(path) %>% 
  rast()
names(Dike_Pred)<-c("layer")
values(Dike_Pred)[values(Dike_Pred) == 0] = NA

Dike_Pred_masked<-Dike_Pred %>% 
  crop(mask_Dike) %>% 
  mask(mask_Dike) %>% 
  as.factor()

zoom_Pred_dike<-Dike_Pred_masked %>% 
  crop(zoom_Dike_high_sf)

zoom_Pred_dike_map<-ggplot()+
  tidyterra::geom_spatraster(data = zoom_Pred_dike, mapping = aes(fill = layer), show.legend = F)+
  scale_fill_manual(values=c("#70543e","#b3ff1a","#389318","#873e23","#42c9bc"),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorphyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Water"))+
  geom_sf(data = zoom_Dike_high_sf, fill = "transparent", linetype = "dashed",colour = "black", linewidth = 1)+
  theme_void()


Dike_pred_map<-ggplot()+
  geom_sf(data = background_Dike, 
          mapping = aes(fill = Type),
          show.legend = F, 
          linewidth=0.05,
          alpha=0.93,
          colour="grey30")+
  geom_sf(data = background_Dike,
          fill = "white",
          show.legend = F, 
          linewidth=0.05,
          alpha=0.4,
          colour="white")+
    scale_fill_manual("",  
                    labels = c("Intertidal area", "Land area", "water"),
                    values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  ggnewscale::new_scale("fill")+
  tidyterra::geom_spatraster(data = Dike_Pred_masked, 
                             mapping = aes(fill = layer),
                             maxcell = 5010420,
                             )+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#70543e", "#b3ff1a", "#DAA520", "#389318","#873e23","#b3002d", "#42c9bc",NA,NA,NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  ggnewscale::new_scale("fill")+
  geom_sf(data = zoom_Dike_high_sf, 
          fill = "transparent", 
          colour = "black",
          linetype = "dashed", 
          linewidth = 1)+
  annotation_custom(ggplotGrob(zoom_Pred_dike_map), 
                    xmin = -2.226, 
                    ymin = 46.9888,
                    ymax = 46.9893) +
  geom_path(aes(x,y,group=grp),
            data = data.frame(x = c(-2.226834,-2.225905,-2.226834,-2.225905),
                              y=c(46.9886439,46.9892105,46.9885538,46.988805),
                              grp=c(1,1,2,2)),
            linetype = "dashed", linewidth = 1)+
  # annotation_custom(ggplotGrob(Boat_Pred_zoomed_map), xmin = -8.697, xmax = -8.692, ymin = 40.667,ymax = 40.6705) +
  coord_sf(crs = 4326)+
  theme_Bede_Map()+
   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
         axis.title = element_blank(),
        axis.text.y = element_text(size = 20),
         legend.background = element_blank(),
         legend.position = c(1,0.50),
         legend.text = element_text(size = 18),
         legend.key.size = unit(0.8,"cm"))+
  scale_x_continuous(limits = c(-2.2293,-2.2253),
                     breaks =  -2.228)+
  scale_y_continuous(limits = c(46.9882,46.98935),
                     breaks =  46.9890)

################# PLOT AND SAVING ###########

plot_Dike<-RGB_Dike_map/
  Dike_pred_map
  
ggsave("Figures/Maps Pred/FigX-Dike_Pred.png",plot_Dike , width = 1200*4, height = 900*4, units = "px")


```

```{r Figure 7 North Dike plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: RGB orthomosaic (Top) and Prediction (Bottom) of the Northern part of Noirmoutier Island, France. The total extent of this flight was about 28 000 m² with a resolution of 80 mm per pixel. Background colors indicate intertidal area (Light Green) and land area (Light Grey). The zoom covers an area equivalent to a 10-meter Sentinel-2 pixel size.
#| label: fig-Dike
#| fig-width: 10
#| fig-height: 7
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Maps Pred/FigX-Dike_Pred.png")
```

## Validation

### Reflectance comparison between the two different altitudes
```{r Reflectance_Validation 2 height}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

# high_alt<- "Data/image/micasense/Gafanha_high_multi.tif" %>% 
#   rast()
# 
# # low_alt<- "Data/image/micasense/Gafanha_Low_Multi_rsp.tif" %>% 
# #   rast() 
# 
# low_alt<- "Data/image/micasense/Gafanha_low_multi.tif" %>% 
#   rast() %>% 
#   resample(high_alt, method = "med")
# 
# 
# low_alt_pred<- "Data/image/prediction/NewPreds/Gafanha_Low_Pred_rsp.tif" %>% 
#   rast() 
# 
# mask<-"Data/shp/Mask_Alt_Compare_All.shp" %>% 
#   vect()
#   
# high_alt_masked<-crop(high_alt,mask)
# high_alt_masked<-mask(high_alt_masked,mask)
# 
# low_alt_masked<-crop(low_alt,mask)
# low_alt_masked<-mask(low_alt_masked,mask)
# 
# low_alt_pred_masked<-crop(low_alt_pred,mask)
# low_alt_pred_masked<-mask(low_alt_pred_masked,mask)
# 
# 
# stk<-rast(list(c(high_alt_masked,low_alt_masked,low_alt_pred_masked)))%>% 
#   as.data.frame()
# 
# names(stk)<-c("B1_high","B2_high","B3_high","B4_high","B5_high","B6_high","B7_high","B8_high","B9_high","B10_high",
#               "B1_low","B2_low","B3_low","B4_low","B5_low","B6_low","B7_low","B8_low","B9_low","B10_low",
#               "pred")
# 
# stk_long<-stk %>% 
#   mutate(px_ID = c(1:nrow(stk))) %>% 
#   pivot_longer(-c(px_ID,pred),values_to = "Value",names_to = "Bands") %>% 
#   mutate(alt = case_when(str_detect(Bands, "low") ~ "Low",
#                          str_detect(Bands, "high") ~ "High",
#                          TRUE ~ "NA"),
#          Bands = gsub("_high","",Bands),
#          Bands = gsub("_low","",Bands))
# 
# 
# stk_summarized<-stk_long %>% 
#   # group_by(px_ID,alt) %>% 
#   # reframe(Value = mean(Value),
#   #         pred = unique(pred)) %>% 
#   pivot_wider(names_from = "alt", values_from = "Value")
# 
# df<-stk_summarized %>% 
#   ungroup() %>% 
#   group_by(Bands) %>% 
#   filter(Low<10000,
#          High < 10000,
#          Low < quantile(Low,probs = 0.99),
#          High < quantile(High,probs = 0.99),
#          Low > quantile(Low,probs = 0.01),
#          High > quantile(High,probs = 0.01),
#          !pred %in% c(7,9,3,10)) %>%
#   ungroup()
 

RAW <- read.csv("Data/CompareReflectance/Compare_ref_raw.csv")%>%  
  mutate(Low = Low /10000,
         High = High/10000)

RMSE_raw <- sqrt(mean((RAW$Low - RAW$High)^2))
lm_raw <- lm(RAW$High ~ RAW$Low)

STD <- read.csv("Data/CompareReflectance/Compare_ref_std.csv")

RMSE_STD <- sqrt(mean((STD$Low - STD$High)^2))
lm_STD <- lm(STD$High ~ STD$Low)

plot_RAW <- RAW %>%  
  ggplot(aes(x=Low, y=High))+
  # geom_point(aes(color = as.factor(pred)))
  ggpointdensity::geom_pointdensity(adjust = .03)+
  viridis::scale_color_viridis(limits = c(0,6000),
                               breaks = c(0,2000,4000,6000),
                               labels = c("1","2000","4000","6000"))+
  # geom_smooth(method = "loess")+
  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
  # geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
  theme_Bede()+
  ylim(c(0.05,0.6))+
  xlim(c(0.05,0.6))+
  ylab("Reflectance of the 120m flight")+
  xlab("Reflectance of the 12m flight")+
  labs(color = "Pixel density")+
  theme(
    legend.position = "top",
        legend.key.width = unit(3,"line"))

plot_STD <- STD %>%  
    ggplot(aes(x=Low, y=High))+
  # geom_point(aes(color = as.factor(pred)))
  ggpointdensity::geom_pointdensity(adjust = .03)+
  viridis::scale_color_viridis(limits = c(1,2000),
                               breaks = c(1,1000,2000),
                               labels = c("1","1000","2000"))+
  # scale_color_gradient(na.value = 1)+
  # geom_smooth(method = "loess")+
  geom_abline(intercept = 0, slope = 1, linewidth = 1, linetype = "dashed", color = "black" )+
  # geom_smooth(method = "lm", color = "red", linetype = "dashed",linewidth = 1)+
  theme_Bede()+
  ylim(c(0.05,1))+
  xlim(c(0.05,1))+
  ylab("Standardised reflectance of the 120m flight")+
  xlab("Standardised reflectance of the 12m flight")+
  labs(color = "Pixel density")+
  theme(
    legend.position = "top",
        legend.key.width = unit(3,"line"))

ggsave("./Figures/High_res/Compare_reflectance.png",plot_RAW, width= 472*4, height=402*4, units = "px")
ggsave("./Figures/High_res/Compare_reflectance_std.png",plot_STD, width= 472*4, height=402*4, units = "px")
  

```

```{r ref_compare_building}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

RAW <- ggplot()+
  geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance.png"))+
  coord_equal()+
  geom_label(aes(x = 300,y= 1200, label = "A") ,size = 10)+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))

STD <- ggplot()+
  geom_spatraster_rgb(data = rast("./Figures/High_res/Compare_reflectance_std.png"))+
  coord_equal()+
  geom_label(aes(x = 300,y= 1200, label = "B") ,size = 10)+
    theme_void()+
  theme(axis.text = element_blank(), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(), 
        axis.ticks.length = unit(0, "pt"),
        panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), 
        plot.margin = margin(0, 0, 0, 0, "pt"))


plot <- RAW+STD

ggsave("./Figures/High_res/Compare_reflectance_both.png",plot,width= 1920*4, height=1129*4, units = "px")
```

```{r RefComapare}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: Comparison of reflectance retrieved from both low-altitude and high-altitude flights over a common area. The black dashed line represents a 1 to 1 relationship. Left (A) plots raw data and right (B) plots standardized data (@eq-std). 
#| label: fig-CompareRef
#| fig-width: 10
#| fig-height: 5
#| out-width: "100%"

knitr::include_graphics("./Figures/High_res/Compare_reflectance_both.png")

```


In this study, a key innovation lies in the utilization of drone flights at two different altitudes (12m and 120m) for constructing the neural network model. The lower altitude flights (8mm spatial resolution) enabled precise selection of pure pixels to train the neural network model. This methodology implies a consistency between the reflectance of both altitudes. @fig-CompareRef depicts the relationship between reflectance from a low and a high-altitude flights conducted over the same area. Overall there was a good agreement between the two altitudes. There was however a slight underestimation for raw reflectance values in the high-altitude flight, particularly for higher reflectance values (@fig-CompareRef A). Since both flights were conducted over vegetation areas, the highest reflectance values correspond to the infrared part of the spectrum. This different is not present anymore when reflectance values of both flights have been standardized (@eq-std ; @fig-CompareRef B). 

### Neural network classification validation

```{r Global Accuracy assesment}
#| cache: true
#| echo: false
#| warning: false
#| eval: true

df<-"Output/Validation_data" %>% 
  list.files("ResultsNewNN_NoXanthowithNDVIWithOldandBoat.csv",recursive = T, full.names = T) %>% 
  read.csv() %>% 
  as_tibble() %>% 
  rename(Truth_ID = "Truth") %>% 
  mutate(Truth =  case_when(Truth_ID == 1 ~ "Sediment",
                          Truth_ID == 2 ~ "Chlorophyceae",
                          Truth_ID == 3 ~ "Sediment",
                          Truth_ID == 4 ~ "Magnoliopsida",
                          Truth_ID == 5 ~ "Bacillariophyceae",
                          Truth_ID == 6 ~ "Magnoliopsida",
                          Truth_ID == 7 ~ "Phaeophyceae",
                          Truth_ID == 8 ~ "Rhodophyceae",
                          Truth_ID == 9 ~ "SunGlint",
                          Truth_ID == 10 ~ "Water",
                          Truth_ID == 11 ~ "Xanthophyceae",
                          Truth_ID == 12 ~ "Spartina",
                          Truth_ID == 41 ~ "Bleached seagrasses",
                          TRUE ~ "NA"),
         Pred_Class = case_when(Pred_Class == "Clorophyta" ~ "Chlorophyceae",
                                Pred_Class == "Phaeophyta" ~ "Phaeophyceae",
                                Pred_Class == "Rhodphyta" ~ "Rhodophyceae",
                                Pred_Class == "Deep_Sediment" ~ "Sediment",
                                Pred_Class == "MPB" ~ "Bacillariophyceae",
                                Pred_Class == "Bare_Sediment" ~ "Sediment",
                                 Pred_Class == "Magnoliosida" ~ "Magnoliopsida",
                                (Pred_Class == "Low_SPC" & NDVI > 0.2) ~ "Magnoliopsida",
                                (Pred_Class == "Low_SPC" & NDVI <= 0.2 )~ "Sediment",
                          TRUE ~ Pred_Class)) %>% 
  dplyr::filter(Truth != "Water",
                Truth  != "Spartina",
                Truth != "SunGlint",
                Truth != "Bleached seagrasses",
                Truth != "Xanthophyceae",
                # Pred_Class != "Low_SPC",
                Pred_Class != "Xanthophyceae",
                 Pred_Class != "Water",
                 Pred_Class != "SunGlint",
                !Flight == "Handfisher_1_old",
                !Flight == "Handfisher_2_old",
                !Flight == "Handfisher_2") %>%
  dplyr::select(-NDVI)


a<-as.character(unique(df$Truth))
b<-as.character(unique(df$Pred_Class))
ab<-setdiff(a,b)
ba<-setdiff(b,a)

if (!(length(ab) == 0 & length(ba) == 0)) {
  

lines_to_add<-data.frame(Pred_Class = c(ab,ba),
                         Pred_ID = NA,
                         Flight = NA,
                         Truth_ID = NA,
                         Truth = c(ab,ba))

df<-df %>% 
  rbind(lines_to_add)
  rm(lines_to_add)

  
}


  df<- df %>%
  mutate(Pred_Class = as_factor(Pred_Class),
         Truth = as_factor(Truth),
         Truth = fct_relevel(Truth, c("Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae")),
         Pred_Class = fct_relevel(Pred_Class, c("Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae")),
         Flight = case_when(str_detect(Flight, "Boat") ~ "Boat",
                            TRUE ~ Flight))
  
####### GafanahaLow #######
df_GafanhaLow<-df %>% 
  filter(Flight == "GafanhaLow")

validation_metrics_GafanhaLow<-confusionMatrix(df_GafanhaLow$Pred_Class,df_GafanhaLow$Truth)

conf_mat_GafanhaLow<-validation_metrics_GafanhaLow[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_GafanhaLow[6,]<-NA
conf_mat_GafanhaLow[,6]<-NA

for(i in 1:(nrow(conf_mat_GafanhaLow))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_GafanhaLow[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_GafanhaLow[,i],na.rm = T)
}
conf_mat_std_GafanhaLow<-conf_mat_GafanhaLow

for(row in 1:nrow(conf_mat_std_GafanhaLow)){
  for(col in 1:ncol(conf_mat_std_GafanhaLow)){
    conf_mat_std_GafanhaLow[row,col]<-conf_mat_std_GafanhaLow[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_GafanhaLow[row,col])
    }
}

confmat_rast_GafanhaLow<-conf_mat_std_GafanhaLow %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_GafanhaLow<-subst(confmat_rast_GafanhaLow, NA, -99)
names(confmat_rast_GafanhaLow)<-"layer"
ext(confmat_rast_GafanhaLow)<-c(18.1,21.9,8.2,11.8)
confmat_rast_GafanhaLow_sf<-as.polygons(confmat_rast_GafanhaLow,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_GafanhaLow_centroid<-st_centroid(confmat_rast_GafanhaLow_sf)
values(confmat_rast_GafanhaLow)[values(confmat_rast_GafanhaLow) == 0] = NA
values(confmat_rast_GafanhaLow)[values(confmat_rast_GafanhaLow) == -99] = NA

####### GafanhaHigh #######

df_GafanhaHigh<-df %>% 
  filter(Flight == "GafanhaHigh")

validation_metrics_GafanhaHigh<-confusionMatrix(df_GafanhaHigh$Pred_Class,df_GafanhaHigh$Truth)

conf_mat_GafanhaHigh<-validation_metrics_GafanhaHigh[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_GafanhaHigh[6,]<-NA
conf_mat_GafanhaHigh[,6]<-NA

for(i in 1:(nrow(conf_mat_GafanhaHigh))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_GafanhaHigh[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_GafanhaHigh[,i],na.rm = T)
}
conf_mat_std_GafanhaHigh<-conf_mat_GafanhaHigh

for(row in 1:nrow(conf_mat_std_GafanhaHigh)){
  for(col in 1:ncol(conf_mat_std_GafanhaHigh)){
    conf_mat_std_GafanhaHigh[row,col]<-conf_mat_std_GafanhaHigh[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_GafanhaHigh[row,col])
    }
}

confmat_rast_GafanhaHigh<-conf_mat_std_GafanhaHigh %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_GafanhaHigh<-subst(confmat_rast_GafanhaHigh, NA, -99)
names(confmat_rast_GafanhaHigh)<-"layer"
ext(confmat_rast_GafanhaHigh)<-c(14.1,17.9,8.2,11.8)
confmat_rast_GafanhaHigh_sf<-as.polygons(confmat_rast_GafanhaHigh,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_GafanhaHigh_centroid<-st_centroid(confmat_rast_GafanhaHigh_sf)
values(confmat_rast_GafanhaHigh)[values(confmat_rast_GafanhaHigh) == 0] = NA
values(confmat_rast_GafanhaHigh)[values(confmat_rast_GafanhaHigh) == -99] = NA


# plot_matrix_GafanhaHigh <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_GafanhaHigh),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Gafanha Low")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))
# 
# 




####### DuerLow #######

df_DuerLow<-df %>% 
  filter(Flight == "DuerLow")

validation_metrics_DuerLow<-confusionMatrix(df_DuerLow$Pred_Class,df_DuerLow$Truth)

conf_mat_DuerLow<-validation_metrics_DuerLow[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_DuerLow[5,]<-NA
conf_mat_DuerLow[,5]<-NA

for(i in 1:(nrow(conf_mat_DuerLow))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_DuerLow[i,], na.rm = T)
  df_sum[i,2] <- sum(conf_mat_DuerLow[,i], na.rm = T)
}
conf_mat_std_DuerLow<-conf_mat_DuerLow

# for(row in 1:nrow(conf_mat_std_DuerLow)){
#   for(col in 1:ncol(conf_mat_std_DuerLow)){
#     conf_mat_std_DuerLow[row,col]<-conf_mat_std_DuerLow[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_DuerLow[row,col])
#     }
# }

for(row in 1:nrow(conf_mat_std_DuerLow)){
  for(col in 1:ncol(conf_mat_std_DuerLow)){
    conf_mat_std_DuerLow[row,col]<-conf_mat_std_DuerLow[row,col]/((df_sum$col[col]))
    }
}

confmat_rast_DuerLow<-conf_mat_std_DuerLow %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_DuerLow<-subst(confmat_rast_DuerLow, NA, -99)
names(confmat_rast_DuerLow)<-"layer"
ext(confmat_rast_DuerLow)<-c(18.1,21.9,0,3.8)
confmat_rast_DuerLow_sf<-as.polygons(confmat_rast_DuerLow,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_DuerLow_centroid<-st_centroid(confmat_rast_DuerLow_sf)
values(confmat_rast_DuerLow)[values(confmat_rast_DuerLow) == 0] = NA
values(confmat_rast_DuerLow)[values(confmat_rast_DuerLow) == -99] = NA


# plot_matrix_DuerLow <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_DuerLow),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Duer Low")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))

####### Horse_rooster #######

df_Horse_rooster<-df %>% 
  filter(Flight == "Horse_rooster")

validation_metrics_Horse_rooster<-confusionMatrix(df_Horse_rooster$Pred_Class,df_Horse_rooster$Truth)

conf_mat_Horse_rooster<-validation_metrics_Horse_rooster[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_Horse_rooster[6,]<-NA
conf_mat_Horse_rooster[,6]<-NA
conf_mat_Horse_rooster[2,]<-NA
conf_mat_Horse_rooster[,2]<-NA

for(i in 1:(nrow(conf_mat_Horse_rooster))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_Horse_rooster[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_Horse_rooster[,i],na.rm = T)
}
conf_mat_std_Horse_rooster<-conf_mat_Horse_rooster

for(row in 1:nrow(conf_mat_std_Horse_rooster)){
  for(col in 1:ncol(conf_mat_std_Horse_rooster)){
    conf_mat_std_Horse_rooster[row,col]<-conf_mat_std_Horse_rooster[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Horse_rooster[row,col])
    }
}

confmat_rast_Horse_rooster<-conf_mat_std_Horse_rooster %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_Horse_rooster<-subst(confmat_rast_Horse_rooster, NA, -99)
names(confmat_rast_Horse_rooster)<-"layer"
ext(confmat_rast_Horse_rooster)<-c(14.1,17.9,4.2,7.8)
confmat_rast_Horse_rooster_sf<-as.polygons(confmat_rast_Horse_rooster,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_Horse_rooster_centroid<-st_centroid(confmat_rast_Horse_rooster_sf)
values(confmat_rast_Horse_rooster)[values(confmat_rast_Horse_rooster) == 0] = NA
values(confmat_rast_Horse_rooster)[values(confmat_rast_Horse_rooster) == -99] = NA



# plot_matrix_Horse_rooster <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_Horse_rooster),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed",
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Mataducos")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))

####### Handfisher_1 #######

df_Handfisher_1<-df %>% 
  filter(Flight == "Handfisher_1")

validation_metrics_Handfisher_1<-confusionMatrix(df_Handfisher_1$Pred_Class,df_Handfisher_1$Truth)

conf_mat_Handfisher_1<-validation_metrics_Handfisher_1[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_Handfisher_1[5,]<-NA
conf_mat_Handfisher_1[6,]<-NA
conf_mat_Handfisher_1[2,]<-NA
conf_mat_Handfisher_1[3,]<-NA
conf_mat_Handfisher_1[,5]<-NA
conf_mat_Handfisher_1[,6]<-NA
conf_mat_Handfisher_1[,2]<-NA
conf_mat_Handfisher_1[,3]<-NA

for(i in 1:(nrow(conf_mat_Handfisher_1))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_Handfisher_1[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_Handfisher_1[,i],na.rm = T)
}
conf_mat_std_Handfisher_1<-conf_mat_Handfisher_1

for(row in 1:nrow(conf_mat_std_Handfisher_1)){
  for(col in 1:ncol(conf_mat_std_Handfisher_1)){
    conf_mat_std_Handfisher_1[row,col]<-conf_mat_std_Handfisher_1[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Handfisher_1[row,col])
    }
}

confmat_rast_Handfisher_1<-conf_mat_std_Handfisher_1 %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_Handfisher_1<-subst(confmat_rast_Handfisher_1, NA, -99)
names(confmat_rast_Handfisher_1)<-"layer"
ext(confmat_rast_Handfisher_1)<-c(22.1,25.9,4.2,7.8)
confmat_rast_Handfisher_1_sf<-as.polygons(confmat_rast_Handfisher_1,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_Handfisher_1_centroid<-st_centroid(confmat_rast_Handfisher_1_sf)
values(confmat_rast_Handfisher_1)[values(confmat_rast_Handfisher_1) == 0] = NA
values(confmat_rast_Handfisher_1)[values(confmat_rast_Handfisher_1) == -99] = NA


# plot_matrix_Handfisher_1 <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_Handfisher_1),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Barbatre")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))


####### Boat #######

df_Boat<-df %>% 
  filter(Flight == "Boat")

validation_metrics_Boat<-confusionMatrix(df_Boat$Pred_Class,df_Boat$Truth)

conf_mat_Boat<-validation_metrics_Boat[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()

conf_mat_Boat[6,]<-NA
conf_mat_Boat[,6]<-NA
conf_mat_Boat[2,]<-NA
conf_mat_Boat[,2]<-NA

for(i in 1:(nrow(conf_mat_Boat))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_Boat[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_Boat[,i],na.rm = T)
}
conf_mat_std_Boat<-conf_mat_Boat

for(row in 1:nrow(conf_mat_std_Boat)){
  for(col in 1:ncol(conf_mat_std_Boat)){
    conf_mat_std_Boat[row,col]<-conf_mat_std_Boat[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Boat[row,col])
    }
}

confmat_rast_Boat<-conf_mat_std_Boat %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_Boat<-subst(confmat_rast_Boat, NA, -99)
names(confmat_rast_Boat)<-"layer"
ext(confmat_rast_Boat)<-c(22.1,25.9,8.2,11.8)
confmat_rast_Boat_sf<-as.polygons(confmat_rast_Boat,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_Boat_centroid<-st_centroid(confmat_rast_Boat_sf)
values(confmat_rast_Boat)[values(confmat_rast_Boat) == 0] = NA
values(confmat_rast_Boat)[values(confmat_rast_Boat) == -99] = NA



# plot_matrix_Boat <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_Boat),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Inner Lagoon")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))


####### Arz #######

df_Arz<-df %>% 
  filter(Flight == "Arz")

validation_metrics_Arz<-confusionMatrix(df_Arz$Pred_Class,df_Arz$Truth)

conf_mat_Arz<-validation_metrics_Arz[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_Arz[3,]<-NA
conf_mat_Arz[,3]<-NA
conf_mat_Arz[2,]<-NA
conf_mat_Arz[,2]<-NA
conf_mat_Arz[5,]<-NA
conf_mat_Arz[,5]<-NA

for(i in 1:(nrow(conf_mat_Arz))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_Arz[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_Arz[,i],na.rm = T)
}
conf_mat_std_Arz<-conf_mat_Arz

for(row in 1:nrow(conf_mat_std_Arz)){
  for(col in 1:ncol(conf_mat_std_Arz)){
    conf_mat_std_Arz[row,col]<-conf_mat_std_Arz[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Arz[row,col])
    }
}

confmat_rast_Arz<-conf_mat_std_Arz %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_Arz<-subst(confmat_rast_Arz, NA, -99)
names(confmat_rast_Arz)<-"layer"
ext(confmat_rast_Arz)<-c(14.1,17.9,0,3.8)
confmat_rast_Arz_sf<-as.polygons(confmat_rast_Arz,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_Arz_centroid<-st_centroid(confmat_rast_Arz_sf)
values(confmat_rast_Arz)[values(confmat_rast_Arz) == 0] = NA
values(confmat_rast_Arz)[values(confmat_rast_Arz) == -99] = NA



# plot_matrix_Arz <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_Arz),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("Arz Island")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))

####### NorthDike #######

df_NorthDike<-df %>% 
  filter(Flight == "NorthDike")

validation_metrics_NorthDike<-confusionMatrix(df_NorthDike$Pred_Class,df_NorthDike$Truth)

conf_mat_NorthDike<-validation_metrics_NorthDike[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_NorthDike[5,]<-NA
conf_mat_NorthDike[,5]<-NA
conf_mat_NorthDike[2,]<-NA
conf_mat_NorthDike[,2]<-NA

for(i in 1:(nrow(conf_mat_NorthDike))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_NorthDike[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_NorthDike[,i],na.rm = T)
}
conf_mat_std_NorthDike<-conf_mat_NorthDike

for(row in 1:nrow(conf_mat_std_NorthDike)){
  for(col in 1:ncol(conf_mat_std_NorthDike)){
    conf_mat_std_NorthDike[row,col]<-conf_mat_std_NorthDike[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_NorthDike[row,col])
    }
}

confmat_rast_NorthDike<-conf_mat_std_NorthDike %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_NorthDike<-subst(confmat_rast_NorthDike, NA, -99)
names(confmat_rast_NorthDike)<-"layer"
ext(confmat_rast_NorthDike)<-c(18.1,21.9,4.2,7.8)
confmat_rast_NorthDike_sf<-as.polygons(confmat_rast_NorthDike,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_NorthDike_centroid<-st_centroid(confmat_rast_NorthDike_sf)
values(confmat_rast_NorthDike)[values(confmat_rast_NorthDike) == 0] = NA
values(confmat_rast_NorthDike)[values(confmat_rast_NorthDike) == -99] = NA


# plot_matrix_NorthDike <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_NorthDike),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("L'Epine")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))

####### Kerdrean #######

df_Kerdrean<-df %>% 
  filter(Flight == "Kerdrean")

validation_metrics_Kerdrean<-confusionMatrix(df_Kerdrean$Pred_Class,df_Kerdrean$Truth)

conf_mat_Kerdrean<-validation_metrics_Kerdrean[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()
conf_mat_Kerdrean[c(2,3,4,5,6),]<-NA
conf_mat_Kerdrean[,c(2,3,4,5,6)]<-NA

for(i in 1:(nrow(conf_mat_Kerdrean))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_Kerdrean[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_Kerdrean[,i],na.rm = T)
}
conf_mat_std_Kerdrean<-conf_mat_Kerdrean

for(row in 1:nrow(conf_mat_std_Kerdrean)){
  for(col in 1:ncol(conf_mat_std_Kerdrean)){
    conf_mat_std_Kerdrean[row,col]<-conf_mat_std_Kerdrean[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_Kerdrean[row,col])
    }
}

confmat_rast_Kerdrean<-conf_mat_std_Kerdrean %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_Kerdrean<-subst(confmat_rast_Kerdrean, NA, -99)
names(confmat_rast_Kerdrean)<-"layer"
ext(confmat_rast_Kerdrean)<-c(22.1,25.9,0,3.8)
confmat_rast_Kerdrean_sf<-as.polygons(confmat_rast_Kerdrean,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_Kerdrean_centroid<-st_centroid(confmat_rast_Kerdrean_sf)

values(confmat_rast_Kerdrean)[values(confmat_rast_Kerdrean) == 0] = NA
values(confmat_rast_Kerdrean)[values(confmat_rast_Kerdrean) == -99] = NA


# plot_matrix_Kerdrean <-
# ggplot()+
#   geom_spatraster(data = (confmat_rast_Kerdrean),
#                   show.legend = F,
#                   na.rm = TRUE
#                   )+
#   scale_fill_Bede("mixed", 
#                   discrete = F,
#                   na.value = "white",
#                   trans = "sqrt",
#                   labels = c("5","25", "50", "75", "100"),
#                   breaks = c(0.05,0.25,0.50,0.75,0.9999))+
#   labs(fill = "Proportion \n of pixels (%)")+
#   scale_x_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Sediment","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#                      expand = c(0, 0),
#                      position = "top",
#                      limits = c(0,10))+
#   scale_y_continuous(breaks = seq(1,9, by = 2),
#                      labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Sediment"),
#                      expand = c(0, 0.1),
#                      limits = c(0,10))+
#   geom_path(
#     data = data.frame(
#       x = c(0,10,0,10,0,10,0,10,0,10,0,10,0,0,2,2,4,4,6,6,8,8,10,10),
#       y = c(0,0,2,2,4,4,6,6,8,8,10,10,0,10,0,10,0,10,0,10,0,10,0,10),
#       group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12)
#       ),
#     aes(x,y,group= group),
#     linewidth = 1
#     )+
#   theme_void()+
#   ggtitle("L'Epine")+
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.margin = unit(c(0,30,0,30), "pt"))
# 

confmat_rast_Arz_centroid<-confmat_rast_Arz_centroid %>% 
  mutate(site = "Arz")
confmat_rast_Boat_centroid<-confmat_rast_Boat_centroid %>% 
  mutate(site = "Boat")
confmat_rast_DuerLow_centroid<-confmat_rast_DuerLow_centroid %>% 
  mutate(site = "DuerLow")
confmat_rast_GafanhaHigh_centroid<-confmat_rast_GafanhaHigh_centroid %>% 
  mutate(site = "Gaf_High")
confmat_rast_GafanhaLow_centroid<-confmat_rast_GafanhaLow_centroid %>% 
  mutate(site = "Gaf_Low")
confmat_rast_Handfisher_1_centroid<-confmat_rast_Handfisher_1_centroid %>% 
  mutate(site = "Handfisher")
confmat_rast_Horse_rooster_centroid<-confmat_rast_Horse_rooster_centroid %>% 
  mutate(site = "Rooster")
confmat_rast_Kerdrean_centroid<-confmat_rast_Kerdrean_centroid %>% 
  mutate(site = "kerdrean")
confmat_rast_NorthDike_centroid<-confmat_rast_NorthDike_centroid %>% 
  mutate(site = "Dike")




centroid_cells<-rbind(confmat_rast_Arz_centroid,confmat_rast_Boat_centroid,confmat_rast_DuerLow_centroid,confmat_rast_GafanhaHigh_centroid,confmat_rast_GafanhaLow_centroid,confmat_rast_Handfisher_1_centroid,confmat_rast_Horse_rooster_centroid,confmat_rast_Kerdrean_centroid,confmat_rast_NorthDike_centroid) %>% 
  filter(layer == -99)


##### Global #####

validation_metrics<-confusionMatrix(df$Pred_Class,df$Truth)

metrics_by_class<-validation_metrics$byClass %>% 
    as.data.frame()

conf_mat<-validation_metrics[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 6) %>%
  as.data.frame()

for(i in 1:(nrow(conf_mat))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat[i,])
  df_sum[i,2] <- sum(conf_mat[,i])
}

conf_mat_std<-conf_mat
for(row in 1:nrow(conf_mat_std)){
  for(col in 1:ncol(conf_mat_std)){
    conf_mat_std[row,col]<-conf_mat_std[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std[row,col])
    }
  
}

confmat_rast<-conf_mat_std %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

names(confmat_rast)<-"layer"
ext(confmat_rast)<-c(0,12,0,12)
# crs(confmat_rast)<-"4326"

 values(confmat_rast)[values(confmat_rast) == 0] = NA
 
 
df_summarize<-df %>% 
  group_by(Flight) %>% 
  summarize(n = length(Flight)) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n),
         Site = case_when(Flight == "GafanhaHigh" ~ "Gafanha High",
                   Flight == "GafanhaLow" ~ "Gafanha Low",
                   Flight == "Boat" ~ "Marinha Lanzarote",
                   Flight == "Horse_rooster" ~ "Mataducos",
                   Flight == "NorthDike" ~ "L'Epine",
                   Flight == "Handfisher_1" ~ "Barbâtre",
                   Flight == "Arz" ~ "Arz Island",
                   Flight == "DuerLow" ~ "Duer",
                   TRUE ~ Flight))

df_corrected_accuracy<-data.frame(
      x = c(1,3,5,7,9,11),
      y = c(11,9,7,5,3,1),
      lab = c(metrics_by_class[1,11],metrics_by_class[2,11], metrics_by_class[3,11], metrics_by_class[4,11],metrics_by_class[5,11],metrics_by_class[6,11]))
 
df_Sens_Spec<-data.frame(
    x = c(1,3,5,7,9, 11, 12.9, 12.9, 12.9, 12.9, 12.9,12.9),
    y = c(-0.3,-0.3,-0.3,-0.3,-0.3,-0.3,11,9,7,5,3,1),
    lab = c(metrics_by_class$Recall[c(1:6)],metrics_by_class$Precision[c(1:6)])
)



df_Label_Sites<-data.frame(
    x = c(16,20,24,16,20,24,16,20,24),
    y = c(12,12,12,8,8,8,4,4,4),
    lab = c(paste0("Gafanha High, ", df_summarize %>% 
                     filter(Flight == "GafanhaHigh") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Gafanha Low, ",df_summarize %>% 
                     filter(Flight == "GafanhaLow") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Inner Lagoon, ", df_summarize %>% 
                     filter(Flight == "Boat") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Mataducos, ", df_summarize %>% 
                     filter(Flight == "Horse_rooster") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("L'Epine, ", df_summarize %>% 
                     filter(Flight == "NorthDike") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Barbâtre, ", df_summarize %>% 
                     filter(Flight == "Handfisher_1") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Arz Island, ", df_summarize %>% 
                     filter(Flight == "Arz") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Duer, ", df_summarize %>% 
                     filter(Flight == "DuerLow") %>% 
                     pull(prop) %>% 
                     round(2)),
            paste0("Kerdrean, ", df_summarize %>% 
                     filter(Flight == "Kerdrean") %>% 
                     pull(prop) %>% 
                     round(2)))
)

x_axis_text<-data.frame(
    x = c(1,3,5,7,9,11),
    y = c(12.5,12.5,12.5,12.5,12.5,12.5),
    lab = c("Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae")
)

y_axis_text<-data.frame(
    x = c(-0.4,-0.4,-0.4,-0.4,-0.4,-0.4),
    y = c(11,9,7,5,3,1),
    lab = c("Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae")
)


centroid_cells_df<-data.frame(st_coordinates(st_cast(centroid_cells$geometry,"MULTIPOINT")),centroid_cells$site)

centroid_cells_df$col <-NA
centroid_cells_df$row <-NA



for(i in 1:length(unique(centroid_cells_df$centroid_cells.site))){
  
  df_temp<-centroid_cells_df %>% 
    filter(centroid_cells_df$centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i])
  
  #### Column 
  
  for( ii in 1:length(unique(as.character(df_temp$X)))){
    if(nrow(df_temp %>% 
            filter(X == unique(as.character(df_temp$X))[ii])) == 6){
      
      centroid_cells_df<-centroid_cells_df %>% 
        mutate(col = case_when(centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i] ~
                         case_when(as.character(X) == unique(as.character(df_temp$X))[ii] ~ 
                                   paste0("col",ii),
                                   TRUE ~ col),
                         TRUE ~ col))
    }
  }
  
  #### ROW
  for( iii in 1:length(unique(as.character(df_temp$Y)))){
    if(nrow(df_temp %>% 
            filter(Y == unique(as.character(df_temp$Y))[iii])) == 6){
      
      centroid_cells_df<-centroid_cells_df %>% 
        mutate(row = case_when(centroid_cells.site == unique(centroid_cells_df$centroid_cells.site)[i] ~
                         case_when(as.character(Y) == unique(as.character(df_temp$Y))[iii] ~ 
                                   paste0("row",iii),
                                   TRUE ~ row),
                         TRUE ~ row))
    }
  }
  
}

# other_table_path<-data.frame(
#   x = c(1,25,1,25,1,25,1,25,
#         1,1,5,5,9,9,13,13,17,17,21,21,25,25
#         ),
#   y= c(-2,-2,-3,-3,-4,-4,-5,-5,
#        -2,-5,-2,-5,-2,-5,-2,-5,-2,-5,-2,-5,-2,-5
#        ),
#   group=c(1,1,9,9,10,10,11,11,
#           2,2,3,3,4,4,5,5,6,6,7,7,8,8
#           )
# )
# 
# other_table_title <- data.frame(
#   x = c(-1,3,7,11,15,19,23),
#   y = c(-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5),
#   label = c("Metrics","Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
#   group = c(1,2,3,4,5,6,7)
# )
# 
# accuracy_by_class<-validation_metrics$byClass %>% 
#   as.data.frame()
# 
# other_table_values <- data.frame(
#   x = c(3,7,11,15,19,23,
#         3,7,11,15,19,23,
#         3,7,11,15,19,23),
#   y = c(-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,
#         -3.5,-3.5,-3.5,-3.5,-3.5,-3.5,
#         -4.5,-4.5,-4.5,-4.5,-4.5,-4.5),
#   label = round(c(accuracy_by_class$Sensitivity[c(1:6)],
#             accuracy_by_class$Specificity[c(1:6)],
#             accuracy_by_class$`Balanced Accuracy`[c(1:6)]),2)
# )

other_table_path<-data.frame(
  x = c(-3,26,-3,26,-3,26,-3,26,-3,26,
        -3,-3,0,0,3.857,3.857,7.714,7.714,11.571,11.571,15.429,15.429,19.286,19.286,23.142,23.142,26,26
        ),
  y= c(-2,-2,-3,-3,-4,-4,-5,-5,-1,-1,
       -1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5,-1,-5
       ),
  group=c(1,1,9,9,10,10,11,11,12,12,13,13,14,14,
          2,2,3,3,4,4,5,5,6,6,7,7,8,8
          )
)

other_table_title <- data.frame(
  x = c(-1.529,1.929,5.786,9.643,13.5,17.359,21.215,24.571),
  y = c(-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5,-1.5),
  label = c("Metrics","Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae", "Overall")
)

other_table_y_axis<-data.frame(
  x=c(-0.4,-0.4,-0.4),
  y=c(-2.5,-3.5,-4.5),
  label = c("Sensitivity","Specificity", "Accuracy")
)

accuracy_by_class<-validation_metrics$byClass %>% 
  as.data.frame()

other_table_values <- data.frame(
  x = c(1.929,5.786,9.643,13.5,17.359,21.215,24.571,
        1.929,5.786,9.643,13.5,17.359,21.215,24.571,
        1.929,5.786,9.643,13.5,17.359,21.215),
  y = c(-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,-2.5,
        -3.5,-3.5,-3.5,-3.5,-3.5,-3.5,-3.5,
        -4.5,-4.5,-4.5,-4.5,-4.5,-4.5),
  label = round(c(accuracy_by_class$Sensitivity[c(1:6)],mean(accuracy_by_class$Sensitivity),
            accuracy_by_class$Specificity[c(1:6)],mean(accuracy_by_class$Specificity),
            accuracy_by_class$`Balanced Accuracy`[c(1:6)]),2)
)

global_accuracy_coord<-data.frame(x = 24.571,
                                  y = -4.5,
                                  label = round(as.numeric(validation_metrics$overall[1]),2))  

centroid_cells_df_rows<-centroid_cells_df %>% 
  filter(!is.na(row)) %>% 
  mutate(Row = paste0(centroid_cells.site,"_",row))

centroid_cells_df_cols<-centroid_cells_df %>% 
  filter(!is.na(col)) %>% 
  mutate(cols = paste0(centroid_cells.site,"_",col))

plot_matrix_global <-
ggplot()+
  geom_spatraster(data = (confmat_rast),
                  # show.legend = F,
                  na.rm = TRUE
                  )+
  geom_spatraster(data = confmat_rast_GafanhaLow,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_GafanhaLow_sf,
          fill = "transparent")+
  geom_spatraster(data = confmat_rast_GafanhaHigh,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_GafanhaHigh_sf,
          fill = "transparent")+
  geom_spatraster(data = confmat_rast_Boat,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_Boat_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_Horse_rooster,
                  na.rm = TRUE
                  )+
    geom_sf(data = confmat_rast_Horse_rooster_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_NorthDike,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_NorthDike_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_Handfisher_1,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_Handfisher_1_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_Arz,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_Arz_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_DuerLow,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_DuerLow_sf,
          fill = "transparent")+
    geom_spatraster(data = confmat_rast_Kerdrean,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_Kerdrean_sf,
          fill = "transparent")+
  # geom_sf(data = centroid_cells,
  #         fill = "transparent")+
  
  geom_path(data = centroid_cells_df_rows, 
            aes(x = X, y = Y, group = Row),
            linewidth = 2,
            linejoin = "round",
            lineend = "round",
            colour = "grey")+
  geom_path(data = centroid_cells_df_cols, 
            aes(x = X, y = Y, group = cols),
            linewidth = 2,
            linejoin = "round",
            lineend = "round",
            colour = "grey")+
  scale_fill_gradientn(
    # colours = c("black","firebrick4","goldenrod","yellow","chartreuse3"),
    # colours = c("khaki1","goldenrod","firebrick3","chartreuse4"),
    colours = c("khaki1","firebrick4","firebrick4","firebrick4","#3e0b0b"),
    # colours = c("#7d0000","#00b300","#00b300","#00b300","#007d00"),
    na.value = "white", 
    trans = "sqrt",
    labels = c("0.05","0.25", "0.50", "0.75", "1"),
    breaks = c(0.05,0.25,0.50,0.75,0.9999))+
  # scale_fill_Bede("mixed", 
  #                 discrete = F,
  #                 reverse = TRUE,
  #                 na.value = "white",
  #                 trans = "sqrt",
  #                 labels = c("5","25", "50", "75", "100"),
  #                 breaks = c(0.05,0.25,0.50,0.75,0.9999))+
  labs(fill = "Proportion \n of pixels")+
  scale_x_continuous(breaks = seq(1,11, by = 2),
                     labels = c("Sediment","Bacillariophyceae","Chlorophyceae","Magnoliopsida","Rhodophyceae","Phaeophyceae"),
                     expand = c(0, 0),
                     position = "top",
                     limits = c(-4.6,29))+
  scale_y_continuous(breaks = seq(1,11, by = 2),
                     labels = c("Phaeophyceae","Rhodophyceae","Magnoliopsida","Chlorophyceae","Bacillariophyceae","Sediment"),
                     expand = c(0, 0.1),
                     limits = c(-5,15.5))+
  geom_polygon(aes(x = c(-3,26,26,-3),
                   y = c(-4,-4,-5,-5)),
               fill = "lightgrey",
               color = "transparent")+
  geom_polygon(aes(x = c(23.142,26,26,23.142),
                   y = c(-1,-1,-4,-4)),
               fill = "lightgrey",
               color = "transparent")+
  geom_path(
    data = data.frame(
      x = c(0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,0,2,2,4,4,6,6,8,8,10,10,12,12),
      y = c(0,0,2,2,4,4,6,6,8,8,10,10,12,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12),
      group = c(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14)
      ),
    aes(x,y,group= group),
    linewidth = 1
    )+
  geom_path(data = other_table_path,
            aes(x = x,
                y = y,
                group = group),
            linewidth = 1)+
  geom_label(
    data = df_corrected_accuracy,
    aes(x = x, y = y, label = paste0(round(lab,3)*100,"%")),
    fill = "#ffffff99",
    size = 9
    )+
  geom_text(
    data = df_Sens_Spec,
    aes(x = x, y = y, label = paste0(round(lab,4)*100,"%")),
    # fill = "#ffffff99",
    size = 8
    )+
  geom_text(
    data = other_table_title,
    aes(x = x, y = y, label = label),
    # fill = "#ffffff99",
    size = 8
    )+
  geom_text(
    data = other_table_y_axis,
    aes(x = x, y = y, label = label),
    size = 8,
    hjust = 1,
    size = 8
  )+
  geom_text(
    data = other_table_values,
    aes(x = x, y = y, label = label),
    # fill = "#ffffff99",
    size = 8
    )+
  geom_text(
    data = global_accuracy_coord,
    aes(x = x, y = y, label = label),
    # fill = "#ffffff99",
    size = 12,
    color = "firebrick4"
    
    )+
  geom_label(
    data = df_Label_Sites,
    aes(x = x, y = y, label = lab),
    fill = "#ffffff99",
    size = 6.8
    )+
  geom_text(
    data = x_axis_text,
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    # vjust = 1,
    hjust = 0,
    size = 9,
    angle = 40
    )+
  geom_text(
    data = y_axis_text,
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    hjust = 1,
    size = 9,
    # angle = 20
    )+
  
  # geom_text(
  #   aes(x = 13.8, y = 12.72, label = "Producer's Accuracy"),
  #   # fill = "#ffffff99",
  #   size = 9,
  #   angle = 20
  #   )+
  # geom_text(
  #   aes(x = 0, y = 0, label = "User's Accuracy"),
  #   # fill = "#ffffff99",
  #   size = 9
  #   )+
  xlab("References")+
  ylab("Prediction")+
  # ggplot2::annotation_custom(ggplotGrob(small_validation_matrices), xmin = 12, ymin = 0)+
  theme_Bede()+
  theme(
  # axis.title.x = element_text(size = 35),
        # axis.title.y = element_text(size = 35),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),


        # axis.text.x = element_text(size = 30),
        axis.text.x = element_blank(),
        # axis.text.y = element_text(size = 25),
         axis.text.y = element_blank(),
        
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(), 
        panel.border = element_blank(),
        axis.line=element_blank(),
        # legend.position = "top",
        legend.position = c(0.73, 0.9),
        legend.direction="horizontal",
        legend.key.width = unit(2,"cm"),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 20, vjust = 2),
        legend.title.align = 0.5,
        legend.justification = "center")

# plot_matrix_global
############ Metrics of each sites ###################

Arz_metrics_ByClass<-validation_metrics_Arz$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Arz Island") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

Arz_metrics_overall<-validation_metrics_Arz$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Arz Island",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

Arz_metrics<-rbind(Arz_metrics_ByClass,Arz_metrics_overall)

Boat_metrics_ByClass<-validation_metrics_Boat$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Marinha Lanzarote") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

Boat_metrics_overall<-validation_metrics_Boat$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Marinha Lanzarote",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

Boat_metrics<-rbind(Boat_metrics_ByClass,Boat_metrics_overall)

DuerLow_metrics_ByClass<-validation_metrics_DuerLow$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Duer") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

DuerLow_metrics_overall<-validation_metrics_DuerLow$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Duer",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

DuerLow_metrics<-rbind(DuerLow_metrics_ByClass,DuerLow_metrics_overall)

GafanhaHigh_metrics_ByClass<-validation_metrics_GafanhaHigh$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Gafanha High") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

GafanhaHigh_metrics_overall<-validation_metrics_GafanhaHigh$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Gafanha High",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

GafanhaHigh_metrics<-rbind(GafanhaHigh_metrics_ByClass,GafanhaHigh_metrics_overall)

GafanhaLow_metrics_ByClass<-validation_metrics_GafanhaLow$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Gafanha Low") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

GafanhaLow_metrics_overall<-validation_metrics_GafanhaLow$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Gafanha Low",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

GafanhaLow_metrics<-rbind(GafanhaLow_metrics_ByClass,GafanhaLow_metrics_overall)

Handfisher_1_metrics_ByClass<-validation_metrics_Handfisher_1$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Barbâtre") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

Handfisher_1_metrics_overall<-validation_metrics_Handfisher_1$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Barbâtre",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

Handfisher_1_metrics<-rbind(Handfisher_1_metrics_ByClass,Handfisher_1_metrics_overall)

Horse_rooster_metrics_ByClass<-validation_metrics_Horse_rooster$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Mataducos") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

Horse_rooster_metrics_overall<-validation_metrics_Horse_rooster$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Mataducos",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

Horse_rooster_metrics<-rbind(Horse_rooster_metrics_ByClass,Horse_rooster_metrics_overall)


Kerdrean_metrics_ByClass<-validation_metrics_Kerdrean$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "Kerdrean") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

Kerdrean_metrics_overall<-validation_metrics_Kerdrean$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "Kerdrean",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

Kerdrean_metrics<-rbind(Kerdrean_metrics_ByClass,Kerdrean_metrics_overall)

NorthDike_metrics_ByClass<-validation_metrics_NorthDike$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.),
         Site = "L'Epine") %>% 
  pivot_longer(-c(Class,Site),names_to = "metric", values_to = "value")

NorthDike_metrics_overall<-validation_metrics_NorthDike$overall %>% 
  as.data.frame() %>% 
  rename(value = ".") %>% 
  mutate(Class = "All",
         Site = "L'Epine",
         metric = rownames(.)) %>% 
  reframe(Class,Site,metric,value)

NorthDike_metrics<-rbind(NorthDike_metrics_ByClass,NorthDike_metrics_overall)


BySite_Metrics<-rbind(NorthDike_metrics,Kerdrean_metrics,Horse_rooster_metrics,Handfisher_1_metrics,GafanhaLow_metrics,GafanhaHigh_metrics,DuerLow_metrics,Boat_metrics,Arz_metrics)


Overall_metrics_ByClass<-validation_metrics$byClass %>% 
  as.data.frame() %>% 
  mutate(Class = rownames(.) %>% 
           gsub("Class: ","",.)) %>% 
  pivot_longer(-c(Class),names_to = "metric", values_to = "value")
################

ggsave("Figures/High_res/Validation/ConfusionMatrixGlobal.png",plot_matrix_global , width = 1920*4, height = 1032*4, units = "px")

######### Focus on green macrophytes
df_green<-df %>% 
  filter(Pred_Class %in% c("Magnoliopsida", "Chlorophyceae"),
         Truth %in% c("Magnoliopsida", "Chlorophyceae")) %>% 
  mutate(Pred_Class = as.factor(as.character(Pred_Class)),
         Truth = as.factor(as.character(Truth)))
 
validation_metrics_green<-confusionMatrix(df_green$Pred_Class,df_green$Truth)


conf_mat_green<-validation_metrics_green[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 2) %>%
  as.data.frame()

for(i in 1:(nrow(conf_mat_green))){
  if(i == 1 ){
    df_sum<-data.frame(row = NA,
                       col = NA)
  }
  df_sum[i,1] <- sum(conf_mat_green[i,],na.rm = T)
  df_sum[i,2] <- sum(conf_mat_green[,i],na.rm = T)
}
conf_mat_std_green<-conf_mat_green

for(row in 1:nrow(conf_mat_std_green)){
  for(col in 1:ncol(conf_mat_std_green)){
    conf_mat_std_green[row,col]<-conf_mat_std_green[row,col]/((df_sum$row[row] + df_sum$col[col])-conf_mat_std_green[row,col])
    }
}

confmat_rast_green<-conf_mat_std_green %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

confmat_rast_green<-subst(confmat_rast_green, NA, -99)
names(confmat_rast_green)<-"layer"
ext(confmat_rast_green)<-c(0,2,0,2)
confmat_rast_green_sf<-as.polygons(confmat_rast_green,aggregate=F) %>% 
  sf::st_as_sf()
confmat_rast_green_centroid<-st_centroid(confmat_rast_green_sf)

values(confmat_rast_green)[values(confmat_rast_green) == 0] = NA
values(confmat_rast_green)[values(confmat_rast_green) == -99] = NA

labels_green<-validation_metrics_green[[2]] %>% 
  as.numeric() %>%
  base::matrix(ncol = 1) %>%
  as.data.frame() %>% 
  rename(label = "V1") %>% 
  mutate(x = c(0.5,0.5,1.5,1.5),
         y = c(1.5,0.5,1.5,0.5))

plot_green<-ggplot()+
geom_spatraster(data = confmat_rast_green,
                  na.rm = TRUE
                  )+
  geom_sf(data = confmat_rast_green_sf,
          fill = "transparent")+
  scale_fill_gradientn(
    # colours = c("black","firebrick4","goldenrod","yellow","chartreuse3"),
    # colours = c("khaki1","goldenrod","firebrick3","chartreuse4"),
    colours = c("khaki1","firebrick4","firebrick4","firebrick4","#3e0b0b"),
    # colours = c("#7d0000","#00b300","#00b300","#00b300","#007d00"),
    na.value = "white", 
    trans = "sqrt",
    limits = c(0,1),
    labels = c("0.05","0.25", "0.50", "1"),
    breaks = c(0.05,0.25,0.50,1))+
  # scale_fill_Bede("mixed", 
  #                 discrete = F,
  #                 reverse = TRUE,
  #                 na.value = "white",
  #                 trans = "sqrt",
  #                 labels = c("5","25", "50", "75", "100"),
  #                 breaks = c(0.05,0.25,0.50,0.75,0.9999))+
  labs(fill = "Proportion \n of pixels")+
  scale_x_continuous(breaks = seq(0.5,1.5, by = 1),
                     labels = c("Chlorophyceae","Magnoliopsida"),
                     expand = c(0, 0),
                     position = "top",
                     limits = c(0,2))+
  scale_y_continuous(breaks = seq(0.5,1.5, by = 1),
                     labels = c("Magnoliopsida","Chlorophyceae"),
                     expand = c(0, 0),
                     limits = c(0,2))+
  geom_label(data = labels_green,aes(x = x, y = y, label = label), size = 10)+
  xlab("References")+
  ylab("Prediction")+
  # ggplot2::annotation_custom(ggplotGrob(small_validation_matrices), xmin = 12, ymin = 0)+
  theme_Bede()+
  theme( 
        panel.border = element_blank(),
        axis.line=element_blank(),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20, angle =90, hjust = 0.5),

        # legend.position = "top",
        # legend.position = c(0.73, 0.9),
        # legend.direction="horizontal",
        # legend.key.width = unit(2,"cm"),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 20, vjust = 2),
        legend.title.align = 0.5,
        legend.justification = "center")

ggsave("./Figures/High_res/Validation/ConfusionMatrixGreen.png", plot_green, width = 671*4, height = 479*4, units = "px" )

```

```{r Global Accuracy assesment Plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: A global confusion matrix on the left is derived from validation data across each flight, while a mosaic of confusion matrices from individual flights is presented on the right. The labels inside the matrices indicate the balanced accuracy for each class. The labels at the bottom of the matrices indicate the User's accuracy for each class, and those on the right indicate the Producer's Accuracy. The values adjacent to the names of each site represent the proportion of total pixels from that site contributing to the overall matrix. Grey lines within the mosaic indicate the absence of validation data for the class at that site. The table at the bottom summarizes the Sensitivity, Specificity, and Accuracy for each class and for the overall model.
#| label: fig-Validation
#| fig-width: 10
#| fig-height: 7
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Validation/ConfusionMatrixGlobal.png")

```

A total of `r my_comma(round(count_validation_pixel,-3))` pixels were used to validate the Neural Network classifier. The sites with the lowest and highest number of validation data were `r df_summarize[which(df_summarize$n == min(df_summarize$n)),]$Site` (`r min(df_summarize$n)` pixels) and `r df_summarize[which(df_summarize$n == max(df_summarize$n)),]$Site` (`r max(df_summarize$n)` pixels), respectively. Model global accuracy was `r round(validation_metrics$overall[[1]]*100,2)`% with a Kappa coefficient of `r round(validation_metrics$overall[[2]],2)` (@fig-Validation). The lowest performing site was `r BySite_Metrics %>% filter(metric == "Accuracy") %>% filter(value == min(value)) %>% pull(Site)` (global accuracy of `r round(BySite_Metrics %>% filter(metric == "Accuracy") %>% filter(value == min(value)) %>% pull(value)*100,2)`%) whereas `r BySite_Metrics %>% filter(metric == "Accuracy") %>% filter(value == max(value)) %>% pull(Site)` was the site with the most accurate prediction (global accuracy of `r round(BySite_Metrics %>% filter(metric == "Accuracy") %>% filter(value == max(value)) %>% pull(value)*100,2)`%). Overall, the classes Phaeophyceae, Magnoliopsida, Sediment and Rhodophyceae were correctly classified with a balanced accuracy of `r round(Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(Class == "Phaeophyceae") %>% pull(value),2)`, `r round(Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(Class == "Magnoliopsida") %>% pull(value),2)`, `r round(Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(Class == "Sediment") %>% pull(value),2)` and `r round(Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(Class == "Rhodophyceae") %>% pull(value),2)` respectively. `r Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(value == min(value)) %>% pull(Class)` was the least performing class (accuracy of `r round(Overall_metrics_ByClass %>% filter(metric == "Balanced Accuracy") %>% filter(value == min(value)) %>% pull(value),2)` ) mainly due to the confusion with Magnoliopsida and Sediment.

## Variable importance

```{r VIP}
#| cache: false
#| echo: false
#| warning: false
#| eval: false

################# SPECTRA ########### 
SP1<-read.csv("Output/Spectra_VIP.csv") %>% 
  dplyr::select(-X) %>% 
  mutate(type = "Min/Max Standardised Spectra") %>% 
  dplyr::filter(Class != "Bare Sediment",
                Class != "Sun Glint",
                Class != "Water",
                Class != "Xanthophyceae",
                Class != "A - MagnoliopsidaL") %>% 
  as_tibble()%>% 
  rename(value = "STD")

SP2<-read.csv("Output/Spectra_VIP2.csv") %>% 
  dplyr::select(-X) %>% 
  mutate(type = "Raw Spectra",
         mean = mean / 10000)%>% 
  dplyr::filter(Class != "Bare Sediment",
                Class != "Sun Glint",
                Class != "Water",
                Class != "Xanthophyceae",
                Class != "A - MagnoliopsidaL") %>% 
  as_tibble() %>% 
  dplyr::reframe(Class,Wavelength, mean, type) %>% 
  rename(value = "mean")

SP<-SP1 %>% 
  rbind(SP2)


SP_plot<-ggplot(SP, aes( x = Wavelength, y = value, color = Class))+
  geom_line(linewidth = 1.5, show.legend = F)+
  facet_wrap(~ type, scale = "free",ncol =1) +
  scale_color_manual(values=c("#389318", "#873e23", "#b3002d", "#b3ff1a", "#DAA520"))+
  ylab("Reflectance")+
  xlab("Wavelength (nm)")+
  theme_Bede()+
  theme(axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.x = element_text(size = 25),
        axis.title.y = element_text(size = 25),
        strip.text = element_text(size=25),
        legend.position = c(0.2, 0.7),
        plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),
        legend.title=element_blank(),
        legend.text = element_text(size = 5),
        legend.key.size = unit(0.25, "cm"),
        legend.text.align = 0,
        panel.border = element_blank(), 
        panel.background = element_blank(),
        axis.line = element_line(color="black"))

############## VIP ##############

filelist<-"Data" %>% 
  list.files(pattern = "NN_VIP_byClass_NoXanth.csv", recursive = T,full.names = T)

VIP<-filelist[which(str_detect(filelist,"VIP"))] %>% 
  read.csv() %>% 
  mutate(Magnoliopsida = (Magnoliosida + Low_SPC)/2) %>% 
  dplyr::select(-c(Magnoliosida ,Low_SPC))

VIP1<-VIP %>%
  dplyr::select(-c(Water,
                   SunGlint,
                   Deep_Sediment,
                   Bare_Sediment)) %>%
  # dplyr::filter(!str_detect(X,"NDVI")) %>% 
  mutate(isSTD = case_when(str_detect(X,"Stan") ~ "Standardised", 
                         TRUE ~ "RAW")) %>%
  pivot_longer(-c(X,isSTD), names_to = "Class",values_to = "value") %>% 
  dplyr::filter(X != "NDVI",
                X != "NDVI_Stan") %>% 
  group_by(Class) %>%
  mutate(STD = (value-min(value))/(max(value)-min(value))) %>% 
  ungroup() %>% 
  mutate(Class = case_when(Class == "Magnoliosida" ~ "Magnoliopsida",
                           Class == "Low_SPC" ~ "Magnoliopsida",
                           Class == "Clorophyta" ~ "Chlorophyceae",
                           Class == "Rhodphyta" ~ "Rhodophyceae",
                           Class == "MPB" ~ "Bacillariophyceae",
                           Class == "Phaeophyta" ~ "Phaeophyceae",
                           TRUE ~ Class),
         Variable = str_replace_all(str_replace_all(str_replace_all(X,"Reflectance",""),"Stan",""),"_","")) %>% 
  dplyr::filter(Class != "Total") 

VIP_summarised<-VIP1 %>% 
  group_by(Variable, Class) %>% 
  dplyr::summarise(sumVIP = sum(STD)) %>% 
  ungroup() %>% 
  group_by(Class) %>% 
  mutate(STD = (sumVIP-min(sumVIP))/(max(sumVIP)-min(sumVIP)))

VIP_subPLOT<-VIP_summarised %>% 
  ggplot(aes(x = Variable, y = STD, fill = Class)) +
  geom_col(color = "black",position =  "dodge") +
  coord_polar()+
  scale_y_continuous(limits = c(0,1), breaks = c(0.25,0.5,0.75,1))+
  facet_wrap(~Class)+
  scale_fill_manual("Class", labels = c("Bacillariophyceae","Chlorophyceae", "Magnoliopsida", "Phaeophyceae","Rhodophyceae"),
                    values = c("#DAA520","#b3ff1a", "#389318","#873e23","#b3002d"))+
  theme_Bede()+
  theme(panel.grid.major.y = element_line(linetype = "dotted",color = c("grey9","grey9","grey9","grey9",NA)))+
  ylab("Importance")+
  theme(legend.position="top",
        strip.text = element_text(size = 25),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.ticks.y =element_blank(),
        axis.title.x =element_blank(),
        axis.title.y =element_text(size = 20),
        legend.key.size = unit(1, 'cm'),
        legend.title = element_text(size=20),
        legend.text = element_text(size=20))+
  guides(fill = guide_legend(nrow = 1))

VIP_PLOT<-VIP_subPLOT+
  # geom_text(aes(label = "Standardised Reflectance Spectra"), color = "black", size = 8)+
  inset_element(SP_plot,left = 0.6341, top = 0.47, bottom = -0.01, right = 0.90,  align_to = "full")
VIP_PLOT
ggsave("Figures/VIP/Fig_VIP.png", VIP_PLOT, width = 1920*4, height = 1129*4, units = "px")


################# VIP NDVI ######################

VIP_NDVI<-
  VIP %>%
  dplyr::select(-c(Water,
                   SunGlint,
                   Deep_Sediment,
                   Bare_Sediment)) %>%
  # dplyr::filter(!str_detect(X,"NDVI")) %>% 
  mutate(isSTD = case_when(str_detect(X,"Stan") ~ "Standardised", 
                         TRUE ~ "RAW")) %>%
  pivot_longer(-c(X,isSTD), names_to = "Class",values_to = "value") %>% 
  dplyr::filter(X == "NDVI") %>% 
  group_by(Class) %>%
  mutate(STD = (value-min(value))/(max(value)-min(value))) %>% 
  ungroup() %>% 
  mutate(Class = case_when(Class == "Magnoliosida" ~ "Magnoliopsida",
                           Class == "Low_SPC" ~ "Magnoliopsida",
                           Class == "Clorophyta" ~ "Chlorophyceae",
                           Class == "Rhodphyta" ~ "Rhodophyceae",
                           Class == "MPB" ~ "Bacillariophyceae",
                           Class == "Phaeophyta" ~ "Phaeophyceae",
                           TRUE ~ Class),
         Variable = str_replace_all(str_replace_all(str_replace_all(X,"Reflectance",""),"Stan",""),"_","")) %>% 
  dplyr::filter(Class != "Total") %>% 
  group_by(Class) %>% 
  summarise(sum = sum(value)) %>% 
  mutate(STD = (sum-min(sum))/(max(sum)-min(sum))) %>% 
  ggplot(aes(x = Class, y = STD, fill = Class)) +
  geom_col(color = "black",position =  "dodge") +
  # coord_polar()+
  scale_y_continuous(limits = c(0,1), breaks = c(0.25,0.5,0.75,1))+
  # facet_wrap(~Class)+
  scale_fill_manual("Class", labels = c("Bacillariophyceae","Chlorophyceae", "Magnoliopsida", "Phaeophyceae","Rhodophyceae"),
                    values = c("#DAA520","#b3ff1a", "#389318","#873e23","#b3002d"))+  theme_Bede()+
  theme(panel.grid.major.y = element_line(linetype = "dotted",color = c("grey9","grey9","grey9","grey9",NA)))+
  ylab("Importance")+
  theme(legend.position="top",
        strip.text = element_text(size = 25),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 20),
        axis.ticks.y =element_blank(),
        axis.title.x =element_blank(),
        axis.title.y =element_text(size = 20),
        legend.key.size = unit(1, 'cm'),
        legend.title = element_text(size=20),
        legend.text = element_text(size=20))+
  guides(fill = guide_legend(nrow = 1))



```

```{r VIP Plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: Variable Importance of the Neural Network Classifier for each taxonomic class. The bigger the slice, the more important the variable for prediction of each class. The right plot shows the drone raw and standardised reflectance spectra of each class. Each slice represents the VIP of both raw and standardised reflectance combined.      
#| label: fig-VIP
#| fig-width: 10
#| fig-height: 7
#| out-width: "100%"

knitr::include_graphics("Figures/Low_res/VIP/Fig_VIP.png")

```

The computation of the variable importance made it possible to identify which bands were the most useful for class prediction (@fig-VIP). The spectral bands at 444, 717 and 842 nm of the Micasense camera did not provide as important information to discriminate any of the vegetation classes. The band at 531 nm was the only important predictor for the classifier to accurately predict Chlorophyceae. In fact, at this wavelength, the Chlorophyceae spectra showed the highest reflectance among of all vegetation classes. The bands at 531 and 740 nm were the most important predictors for Phaeophyceae, corresponding to the lowest reflectance among all classes. Bands at 475 and 560 nm were the most important predictors for Bacillariophyceae and Rhodophyceae, respectively. Four predictors, ranging from the green (560 nm) to the RedEdge (705 nm) bands were important to accurately predict Magnoliopsida.

## Effect of the flight height on the prediction

```{r Upscaling}
#| cache: false
#| echo: false
#| warning: false
#| eval: false

if(length(list.files("./Output",pattern = "output_80_filtered_Upscaling.csv")) == 0 ){
 imglist<-"Output/High_Flights_correction/Low_flight_spatial_resampling/" %>%
   list.files(".tif",full.names = T) %>%
   as.data.frame() %>%
   rename(path = ".") %>%
   mutate(size = case_when(str_detect(path,"_8_7x7.tif") ~ 8,
                           str_detect(path,"16.tif") ~ 16,
                           str_detect(path,"32.tif") ~ 32,
                           str_detect(path,"48.tif") ~ 48,
                           str_detect(path,"64.tif") ~ 64,
                           str_detect(path,"80.tif") ~ 80),
          type = case_when(str_detect(path, "ortho") ~ "ortho",
                           str_detect(path, "pred") ~ "Pred",
                           TRUE ~ "Prob"))

pred_8<-imglist %>%
   filter(size == 8,
          type == "Pred") %>%
   pull(path) %>%
   terra::rast()
 names(pred_8)<-"Pred_8"

 pred_80<-imglist %>%
   filter(size == 80,
          type == "Pred") %>%
   pull(path) %>%
   terra::rast()
 names(pred_80)<-"Pred_80"
 
prob_80<-imglist %>%
   filter(size == 80,
          type == "Prob") %>%
   pull(path) %>%
   terra::rast()
 names(prob_80)<-"Prob_80"


 model_80<-imglist %>%
   filter(size == 80,
          type == "Pred") %>%
   pull(path) %>%
   terra::rast()
 values(model_80)<-c(1:ncell(model_80))
 names(model_80)<-"ID_80"


 model_80_rs_to_8<-terra::resample(model_80,pred_8,method = "near")
 names(model_80_rs_to_8)<-"ID_80"

 df_80_8<-terra::rast(list(model_80_rs_to_8,pred_8)) %>%
   as.data.frame(xy=F) %>%
   filter(!Pred_8 == 0)

 df_80<-terra::rast(list(model_80,pred_80,prob_80)) %>%
   as.data.frame(xy=F) %>%
   filter(!Pred_80 == 0)

#############
output_80<-df_80 %>% 
  left_join(df_80_8, by = "ID_80") %>% 
  filter(!is.na(Pred_8)) %>% 
  mutate(Class_80 = case_when(Pred_80 == 1 ~ "Bare Sediment",
                              Pred_80 == 2 ~ "Green Algae",
                              Pred_80 == 3 ~ "Bare Sediment",
                              Pred_80 == 4 ~ "Magnoliopsida",
                              Pred_80 == 5 ~ "Microphytobenthos",
                              Pred_80 == 6 ~ "Magnoliopsida",
                              Pred_80 == 7 ~ "Phaeophyceae",
                              Pred_80 == 8 ~ "Rhodophyceae",
                              Pred_80 == 9 ~ "Sun Glint",
                              Pred_80 == 10 ~ "Water",
                              Pred_80 == 11 ~ "Xanthophyceae",
                              TRUE ~ as.character(Pred_80)),
         Class_8 = case_when(Pred_8 == 1 ~ "Bare Sediment",
                              Pred_8 == 2 ~ "Green Algae",
                              Pred_8 == 3 ~ "Bare Sediment",
                              Pred_8 == 4 ~ "Magnoliopsida",
                              Pred_8 == 5 ~ "Microphytobenthos",
                              Pred_8 == 6 ~ "Magnoliopsida",
                              Pred_8 == 7 ~ "Phaeophyceae",
                              Pred_8 == 8 ~ "Rhodophyceae",
                              Pred_8 == 9 ~ "Sun Glint",
                              Pred_8 == 10 ~ "Water",
                              Pred_8 == 11 ~ "Xanthophyceae",
                              TRUE ~ as.character(Pred_8))
         ) %>% 
   dplyr::filter(Class_80 != "Water",
                 Class_80 != "Phaeophyceae",
                 Class_80 != "Sun Glint",
                 Class_8 != "Water",
                 Class_8 != "Phaeophyceae",
                 Class_8 != "Sun Glint") %>% 
           group_by(ID_80, Prob_80) %>% 
           summarise(prop_Sed = sum((Pred_8 == 1)|(Pred_8 == 3))/n(),
                     prop_Green = sum(Pred_8 == 2)/n(),
                     prop_Magno = sum((Pred_8 == 4)|(Pred_8 == 6))/n(),
                     prop_MPB = sum(Pred_8 == 5)/n(),
                     prop_Rodo = sum(Pred_8 == 8)/n(),
                     prop_Xantho = sum(Pred_8 == 11)/n(),
                     True = unique(Class_80)) %>%
  pivot_longer(-c(ID_80,True,Prob_80), names_to = "Class", values_to = "Proportion") %>% 
  mutate(Class = case_when(Class == "prop_Sed" ~ "Bare Sediment",
                           Class == "prop_Green" ~ "Green Algae",
                           Class == "prop_Magno" ~ "Magnoliopsida",
                           Class == "prop_MPB" ~ "Microphytobenthos",
                           Class == "prop_Pheo" ~ "Phaeophyceae",
                           Class == "prop_Rodo" ~ "Rhodophyceae",
                           Class == "prop_Glint" ~ "Sun Glint",
                           Class == "prop_Water" ~ "Water",
                           Class == "prop_Xantho" ~ "Xanthophyceae"),
         same = case_when(True == Class ~ 1,
                          TRUE ~ 0)) %>% 
  dplyr::filter(!Proportion == 0)
 
  list<-output_80 %>% 
  dplyr::filter(Proportion == 1,
                Class == True) %>% 
  pull(ID_80)

output_80_filtered<-output_80 %>% 
  dplyr::filter(!ID_80 %in% list )



output_80_filtered_same<-output_80_filtered %>% 
  dplyr::filter(same == 1)

write.csv(output_80_filtered, "./Output/output_80_filtered_Upscaling.csv")
write.csv(output_80_filtered_same, "./Output/output_80_filtered_same_Upscaling.csv")

}else{
  
  output_80_filtered<-read.csv("./Output/output_80_filtered_Upscaling.csv") %>% 
    dplyr::mutate(Proportion = Proportion *100) %>% 
    dplyr::select(-X) %>% 
    as_tibble()
  output_80_filtered_same<-read.csv("./Output/output_80_filtered_same_Upscaling.csv")%>% 
    dplyr::mutate(Proportion = Proportion *100) %>% 
    dplyr::select(-X) %>% 
    as_tibble()
}

################# LM ####################
lm_sediment<-output_80_filtered_same %>%
  dplyr::filter(Class == "Bare Sediment") 

 lm_sediment<- lm(lm_sediment$Prob_80 ~ lm_sediment$Proportion)
 
 lm_green<-output_80_filtered_same %>%
  dplyr::filter(Class == "Green Algae") 
  lm_green<- lm(lm_green$Prob_80 ~ lm_green$Proportion)
 
 lm_magno<-output_80_filtered_same %>%
  dplyr::filter(Class == "Magnoliopsida") 
   lm_magno<- lm(lm_magno$Prob_80 ~ lm_magno$Proportion)

 
 lm_MPB<-output_80_filtered_same %>%
  dplyr::filter(Class == "Microphytobenthos")
    lm_MPB<- lm(lm_MPB$Prob_80 ~ lm_MPB$Proportion)
    
lm_Rodo<-output_80_filtered_same %>%
  dplyr::filter(Class == "Rodophyceae")
    lm_Rodo<- lm(lm_Rodo$Prob_80 ~ lm_Rodo$Proportion)
 
 ########### ALPHA ###############
alpha_sed<-data.frame(prop = seq(0,1,  0.01)) %>% 
  mutate(alpha = lm_sediment$coefficients[[2]]*prop+lm_sediment$coefficients[[1]],
         ID = c(1:nrow(.)),
         xmin = seq(0,1,  0.01),
         xmax = seq(0.01,1.01,0.01),
         ymin = rep(0,nrow(.)),
         ymax = rep(1,nrow(.))) %>% 
  pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
  pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
  dplyr::select(-c(name_x,name_y)) %>% 
  mutate(alpha = case_when(alpha > 1 ~ 1,
                           TRUE ~ alpha),
         alpha = 1-alpha)%>% 
  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

alpha_green<-data.frame(prop = seq(0,1,  0.01)) %>% 
  mutate(alpha = lm_green$coefficients[[2]]*prop+lm_green$coefficients[[1]],
         ID = c(1:nrow(.)),
         xmin = seq(0,1,  0.01),
         xmax = seq(0.01,1.01,0.01),
         ymin = rep(0,nrow(.)),
         ymax = rep(1,nrow(.))) %>% 
  pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
  pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
  dplyr::select(-c(name_x,name_y)) %>% 
  mutate(alpha = case_when(alpha > 1 ~ 1,
                           TRUE ~ alpha),
         alpha = 1-alpha)%>% 
  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

alpha_magno<-data.frame(prop = seq(0,1,  0.01)) %>% 
  mutate(alpha = lm_magno$coefficients[[2]]*prop+lm_magno$coefficients[[1]],
         ID = c(1:nrow(.)),
         xmin = seq(0,1,  0.01),
         xmax = seq(0.01,1.01,0.01),
         ymin = rep(0,nrow(.)),
         ymax = rep(1,nrow(.))) %>% 
  pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
  pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
  dplyr::select(-c(name_x,name_y)) %>% 
  mutate(alpha = case_when(alpha > 1 ~ 1,
                           TRUE ~ alpha),
         alpha = 1-alpha)%>% 
  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

alpha_MPB<-data.frame(prop = seq(0,1,  0.01)) %>% 
  mutate(alpha = lm_MPB$coefficients[[2]]*prop+lm_MPB$coefficients[[1]],
         ID = c(1:nrow(.)),
         xmin = seq(0,1,  0.01),
         xmax = seq(0.01,1.01,0.01),
         ymin = rep(0,nrow(.)),
         ymax = rep(1,nrow(.))) %>% 
  pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
  pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
  dplyr::select(-c(name_x,name_y)) %>% 
  mutate(alpha = case_when(alpha > 1 ~ 1,
                           TRUE ~ alpha),
         alpha = 1-alpha)%>% 
  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

alpha_Rodo<-data.frame(prop = seq(0,1,  0.01)) %>% 
  mutate(alpha = lm_Rodo$coefficients[[2]]*prop+lm_Rodo$coefficients[[1]],
         ID = c(1:nrow(.)),
         xmin = seq(0,1,  0.01),
         xmax = seq(0.01,1.01,0.01),
         ymin = rep(0,nrow(.)),
         ymax = rep(1,nrow(.))) %>% 
  pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
  pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
  mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
  dplyr::select(-c(name_x,name_y)) %>% 
  mutate(alpha = case_when(alpha > 1 ~ 1,
                           TRUE ~ alpha),
         alpha = 1-alpha)%>% 
  mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

# alpha_xantho<-data.frame(prop = seq(0,1,  0.01)) %>% 
#   mutate(alpha = lm_xantho$coefficients[[2]]*prop+lm_xantho$coefficients[[1]],
#          ID = c(1:nrow(.)),
#          xmin = seq(0,1,  0.01),
#          xmax = seq(0.01,1.01,0.01),
#          ymin = rep(0,nrow(.)),
#          ymax = rep(1,nrow(.))) %>% 
#   pivot_longer(c(xmin,xmax),names_to = "name_x", values_to = "x") %>% 
#   pivot_longer(c(ymax,ymin), names_to = "name_y",values_to = "y") %>% 
#   mutate(y = rep(c(0,1,1,0),nrow(.)/4)) %>% 
#   dplyr::select(-c(name_x,name_y)) %>% 
#   mutate(alpha = case_when(alpha > 1 ~ 1,
#                            TRUE ~ alpha),
#          alpha = 1-alpha) %>% 
#   mutate(alpha = (alpha - min(alpha))/ (max(alpha) - min(alpha)))

#################

sediment<-output_80_filtered %>% 
  dplyr::filter(True == "Bare Sediment") %>% 
  mutate(Class = case_when(Class != True ~ "Other",
                            TRUE ~ Class)) %>% 
  group_by(ID_80,Class) %>% 
  reframe(Prob_80 = unique(Prob_80),
          True = unique(True),
          Class = unique(Class),
          Proportion = sum(Proportion)) %>% 
  mutate(Class = as.factor(Class),
         Class = forcats::fct_relevel(Class,"Bare Sediment", after = Inf)) %>% 
  ggplot()+
  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = "fill",adjust = 3)+
  # facet_wrap(~ True)+
  scale_fill_manual(values=c("gray85","#70543e"))+
  # scale_alpha_manual(values = c(0.5,1))+
  theme_Bede()+
  # geom_polygon(data = alpha_sed, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_sed$alpha,color=NA, fill = "white")+
  geom_vline(xintercept = (lm_sediment$coefficients[[2]]*85+lm_sediment$coefficients[[1]])*100, linetype = "dashed",linewidth = 2)+
  ggtitle("Bare Sediment")+
  # annotate(geom="text",x = lm_sediment$coefficients[[2]]*0.85+lm_sediment$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15)
        # axis.title.y = element_blank(),
        # axis.title.x = element_text(size = 20)
        )

green<-output_80_filtered %>% 
  dplyr::filter(True == "Green Algae") %>% 
  mutate(Class = case_when(Class != True ~ "Other",
                            TRUE ~ Class)) %>% 
  group_by(ID_80,Class) %>% 
  reframe(Prob_80 = unique(Prob_80),
          True = unique(True),
          Class = unique(Class),
          Proportion = sum(Proportion)) %>%
  mutate(Class = as.factor(Class),
         Class = forcats::fct_relevel(Class,"Green Algae", after = Inf)) %>% 
  ggplot()+
  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = "fill",adjust = 3)+
  # facet_wrap(~ True)+
  scale_fill_manual(values=c("gray85", "#b3ff1a"))+
  # scale_alpha_manual(values = c(0.5,1))+
  theme_Bede()+
  # geom_polygon(data = alpha_green, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_green$alpha,color=NA, fill = "white")+
  geom_vline(xintercept = (lm_green$coefficients[[2]]*85+lm_green$coefficients[[1]])*100, linetype = "dashed",linewidth = 2)+
  ggtitle("Green Algae")+
  # annotate(geom="text",x = lm_green$coefficients[[2]]*0.85+lm_green$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15)
        # axis.title.y = element_blank(),
        # axis.title.x = element_text(size = 20)
        )

magno<-output_80_filtered %>% 
  dplyr::filter(True == "Magnoliopsida") %>% 
  mutate(Class = case_when(Class != True ~ "Other",
                            TRUE ~ Class)) %>% 
  group_by(ID_80,Class) %>% 
  reframe(Prob_80 = unique(Prob_80),
          True = unique(True),
          Class = unique(Class),
          Proportion = sum(Proportion)) %>%
  mutate(Class = as.factor(Class),
         Class = forcats::fct_relevel(Class,"Magnoliopsida", after = Inf)) %>%
  ggplot()+
  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F, position = "fill",adjust = 3)+
  # facet_wrap(~ True)+
  scale_fill_manual(values=c("gray85","#389350"))+
  # scale_alpha_manual(values = c(0.5,1))+
  theme_Bede()+
  # geom_polygon(data = alpha_magno, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_magno$alpha,color=NA, fill = "white")+
  geom_vline(xintercept = (lm_magno$coefficients[[2]]*85+lm_magno$coefficients[[1]])*100, linetype = "dashed",linewidth = 2)+
  ggtitle("Magnoliopsida")+
  # annotate(geom="text",x = lm_magno$coefficients[[2]]*0.85+lm_magno$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15)
        # axis.title.y = element_blank(),
        # axis.title.x = element_text(size = 20)
        )


MPB<-output_80_filtered %>% 
  dplyr::filter(True == "Microphytobenthos") %>% 
  mutate(Class = case_when(Class != True ~ "Other",
                            TRUE ~ Class)) %>% 
  group_by(ID_80,Class) %>% 
  reframe(Prob_80 = unique(Prob_80),
          True = unique(True),
          Class = unique(Class),
          Proportion = sum(Proportion)) %>%
  mutate(Class = as.factor(Class),
         Class = forcats::fct_relevel(Class,"Microphytobenthos", after = Inf)) %>%
  ggplot()+
  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,show.legend = F,position = "fill",adjust = 3)+
  # facet_wrap(~ True)+
  scale_fill_manual(values=c("gray85","#DAA520"))+
  # scale_alpha_manual(values = c(0.5,1))+
  theme_Bede()+
  # geom_polygon(data = alpha_MPB, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_MPB$alpha,color=NA, fill = "white")+
  geom_vline(xintercept = (lm_MPB$coefficients[[2]]*85+lm_MPB$coefficients[[1]])*100, linetype = "dashed",linewidth = 2)+
  ggtitle("Microphytobenthos")+
  # annotate(geom="text",x = lm_MPB$coefficients[[2]]*0.85+lm_MPB$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15)
        # axis.title.y = element_blank(),
        # axis.title.x = element_text(size = 20)
        )

rodo<-output_80_filtered %>% 
  dplyr::filter(True == "Rodophyceae") %>% 
  mutate(Class = case_when(Class != True ~ "Others Classes",
                           Class == "Rodophyceae" ~ "Rhodophyceae",
                            TRUE ~ Class),
         True = case_when(True == "Rodophyceae" ~ "Rhodophyceae",
                          TRUE ~ True)) %>% 
  group_by(ID_80,Class) %>% 
  reframe(Prob_80 = unique(Prob_80),
          True = unique(True),
          Class = unique(Class),
          Proportion = sum(Proportion)) %>%
  mutate(Class = factor(Class, c("Others Classes","Rhodophyceae","Bacillariophyceae", "Magnoliopsida","Chlorophyceae","Phaeophyceae"))) %>% 
         # Class = forcats::fct_relevel(Class,"Rodophyceae", after = Inf)) %>%
  ggplot()+
  geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),alpha = 0.8,position = "fill",adjust = 3)+
  # facet_wrap(~ True)+
  scale_fill_manual("Class",
                    labels = c("Others Classes","Rhodophyceae","Bacillariophyceae", "Magnoliopsida","Chlorophyceae","Phaeophyceae"),
                    values=c("gray85","#b3002d","#DAA520","#389350","#b3ff1a","#70543e"),
                    drop = F)+
  # scale_alpha_manual(values = c(0.5,1))+
  theme_Bede()+
  # geom_polygon(data = alpha_Rodo, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_Rodo$alpha,color=NA, fill = "white")+
  geom_vline(xintercept = (lm_Rodo$coefficients[[2]]*85+lm_Rodo$coefficients[[1]])*100, linetype = "dashed",linewidth = 2)+
  ggtitle("Rhodophyceae")+
  # annotate(geom="text",x = lm_Rodo$coefficients[[2]]*0.85+lm_Rodo$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        # axis.title.y = element_blank(),
        # axis.title.x = element_text(size = 20),
        legend.text = element_text(size = 15),
        legend.key.size = unit(1,"cm"),
        legend.title = element_blank())

# xantho<-output_80_filtered %>% 
#   dplyr::filter(True == "Xanthophyceae") %>% 
#   ggplot()+
#   geom_density(mapping = aes(x = Proportion , y = after_stat(ndensity) , fill = Class),position = "fill",adjust = 3)+
#   # facet_wrap(~ True)+
#   scale_fill_manual(values=c("#70543e", "#b3ff1a", "#389350", "#DAA520","#b3002d", "#cccc00"))+
#   # scale_alpha_manual(values = c(0.5,1))+
#   theme_Bede()+
#   geom_polygon(data = alpha_xantho, mapping = aes(x=x, y = y, alpha = alpha, group = ID),alpha = alpha_xantho$alpha,color=NA, fill = "white")+
#   geom_vline(xintercept = lm_xantho$coefficients[[2]]*0.85+lm_xantho$coefficients[[1]])+
#   ggtitle("Xanthophyceae")+
#   annotate(geom="text",x = lm_xantho$coefficients[[2]]*0.85+lm_xantho$coefficients[[1]]+0.05, y = 0.85, label = "p = 0.85", angle = - 90, size = 7)+
#   theme(axis.text.x = element_text(size = 15, angle = 45, hjust = 0.7),
#         axis.text.y = element_text(size = 15),
#         axis.title.y = element_blank(),
#         axis.title.x = element_text(size = 20))

plot<-(sediment + green) /
(MPB + rodo)+
magno+
  patchwork::plot_layout(guides = "collect") &
  theme(legend.position = "bottom",
        plot.title = element_text(size=25, hjust = 0.55),
        axis.text.x = element_text(size = 15, hjust = 0.8),
        axis.title = element_text(size=20),
        axis.text.y = element_text(size = 15),
        panel.grid=element_blank())&
  scale_x_continuous(breaks = c(25,50,75,100),limits= c(0,100.01),expand = c(0, 0)) &
  scale_y_continuous(expand = c(0, 0)) &
  xlab("Percent Cover (%)") & 
  ylab("Density")
  
ggsave("Figures/Upscaling/density_vs_Proportion.png",plot , width = 833*4, height = 1118*4, units = "px")

```

```{r Upscaling prob}
#| cache: false
#| echo: false
#| warning: false
#| eval: true

output_80_filtered_same<-read.csv("./Output/output_80_filtered_same_Upscaling.csv")%>% 
    dplyr::mutate(Proportion = Proportion *100) %>% 
    dplyr::select(-X) %>% 
    as_tibble()

################# LM ####################
lm_sediment<-output_80_filtered_same %>%
  dplyr::filter(Class == "Bare Sediment") 

 lm_sediment<- lm(lm_sediment$Prob_80 ~ lm_sediment$Proportion)
 
 lm_green<-output_80_filtered_same %>%
  dplyr::filter(Class == "Green Algae") 
  lm_green<- lm(lm_green$Prob_80 ~ lm_green$Proportion)
 
 lm_magno<-output_80_filtered_same %>%
  dplyr::filter(Class == "Magnoliopsida") 
   lm_magno<- lm(lm_magno$Prob_80 ~ lm_magno$Proportion)

 
 lm_MPB<-output_80_filtered_same %>%
  dplyr::filter(Class == "Microphytobenthos")
    lm_MPB<- lm(lm_MPB$Prob_80 ~ lm_MPB$Proportion)
    
lm_Rodo<-output_80_filtered_same %>%
  dplyr::filter(Class == "Rodophyceae")
    lm_Rodo<- lm(lm_Rodo$Prob_80 ~ lm_Rodo$Proportion)

```

```{r Upscaling Plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: Kernel density plot showing the proportion of pixel well classified based on the percent cover of the class in high altitude flight pixels of Gafanha, Portugal. Each subplot shows all the pixels of the same classes on the high altitude flight. Percent cover of classes was retrieved using the result of the classification of the low altitude flight of Gafanha, Portugal. The vertical dashed line shows the 0.85 probability of the model. Everything on the right of this line has a probability higher then 0.85 and everything on the left of this line has a lower probability.
#| label: fig-upscaling
#| fig-width: 10
#| fig-height: 7
#| out-width: "90%"

knitr::include_graphics("Figures/Low_res/Upscaling/density_vs_Proportion.png")

```

Using the very high resolution low altitude flight (8 mm pixels), we determined the minimal percent cover required to correctly classify a given class within the corresponding high altitude flight (@fig-upscaling). When the percent cover of a given class was 100 %, coarser high-flight pixels are well classified for all the classes except for Bare Sediment, which was only well classified 80% of the time. This phenomenon is likely attributed to the time gap between the two flights, allowing for microphytobenthos migration to surface during low tide, consequently altering the model's classification from bare sediment to Bacillariophyceae. A percent cover of at least 80% was sufficient to have all the pixels of high altitude flights correctly classified, with the exception of Magnoliopsida that required a higher percent cover (\>90 %) to be well classified. Concerning the probability of each class, the highest percent cover was needed to confidently predict Bacillariophyceae. To predict Chlorophyceae with a confidence of 0.85, a percent cover of `r round((lm_green$coefficients[[2]]*85+lm_green$coefficients[[1]])*100,0)` % was needed, `r round((lm_magno$coefficients[[2]]*85+lm_magno$coefficients[[1]])*100,0)` % for Magnoliopsida, `r round((lm_Rodo$coefficients[[2]]*85+lm_Rodo$coefficients[[1]])*100,0)` % for Rhodophyceae and `r round((lm_MPB$coefficients[[2]]*85+lm_MPB$coefficients[[1]])*100,0)` % for Bacillariophyceae.

# Discussion

## Vegetation Discrimination

```{r Table Pigment}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

df_pigment<-
  data.frame(
    Classes=c("Magnoliopsida",
           "Chlorophyceae",
           "Bacillariophyceae",
           "Phaeophyceae",
           "Rhodophyceae"),
    chlb=c(1,1,0,0,0),
    chlc=c(0,0,1,1,0),
    fuco=c(0,0,1,1,0),
    zea=c(1,1,0,1,0),
    diad=c(0,0,1,0,0),
    lutein=c(1,1,0,0,0),
    Neox=c(1,1,0,0,0),
    PE=c(0,0,0,0,1),
    PC=c(0,0,0,0,1))%>%
  select(-Classes) %>% 
  as.matrix() %>% 
  as.array() %>% 
  rast()

ext(df_pigment)<-c(0,9,0,5)


y_axis_text_pigment<-data.frame(x = rep(-0.05,5),
                                y = c(0.5,1.5,2.5,3.5,4.5), 
                                lab = c("Rhodophyceae",
                                    "Phaeophyceae",
                                    "Bacillariophy.",
                                    "Chlorophyceae",
                                    "Magnoliopsida")
                                )
x_axis_text_pigment<-data.frame(y = rep(5.5,9),
                                x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),
                                lab = c("Chlb","Chlc","Fuco","Zea","Diad","Lut","Neo","PE","PC")
                                )




min_x_line = -1.5
max_y_line = 6

line_grid<-data.frame(xmin=NA,
                      xmax=NA,
                      ymin=NA,
                      ymax=NA,
                      group=NA)

for(i in 0:max_y_line){
  line_grid[i+1,1]=min_x_line
  line_grid[i+1,2]=9
  line_grid[i+1,3]=i
  line_grid[i+1,4]=i
  line_grid[i+1,5]=i+1
}
nrowgrid=nrow(line_grid)
for(i in 0:9){
  line_grid[i+1+nrowgrid,1]=i
  line_grid[i+1+nrowgrid,2]=i
  line_grid[i+1+nrowgrid,3]=0
  line_grid[i+1+nrowgrid,4]=max_y_line
  line_grid[i+1+nrowgrid,5]=i+1+nrowgrid
  
}

 line_grid[nrow(line_grid)+1,1] = min_x_line
 line_grid[nrow(line_grid),2] = min_x_line
 line_grid[nrow(line_grid),3] = 0
 line_grid[nrow(line_grid),4] = max_y_line
 line_grid[nrow(line_grid),5] = nrow(line_grid)

 
 line_grid<- line_grid %>% 
   rbind(c(-1.5,9,-0.6,-0.6,19))%>% 
   rbind(c(-1.5,-1.5,-0.6,0,20))%>% 
   rbind(c(0,0,-0.6,0,21))%>% 
   rbind(c(1,1,-0.6,0,22))%>% 
   rbind(c(2,2,-0.6,0,23))%>% 
   rbind(c(3,3,-0.6,0,24))%>% 
   rbind(c(4,4,-0.6,0,25))%>% 
   rbind(c(5,5,-0.6,0,26))%>% 
   rbind(c(6,6,-0.6,0,27))%>% 
   rbind(c(7,7,-0.6,0,28))%>% 
   rbind(c(8,8,-0.6,0,29))%>% 
   rbind(c(9,9,-0.6,0,30))
 
 
 Absorption_wv<- data.frame(x = c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),
                            y = rep(-0.3,9),
                            lab = c("650","636","550","489","496","490","450","566","615"))
 
 
rast_pigment<-ggplot()+
  geom_spatraster(data = (df_pigment),
                  # show.legend = F,
                  na.rm = TRUE
                  )+
  coord_fixed(ratio = 0.7)+
  scale_fill_gradientn(
    # colours = c("black","firebrick4","goldenrod","yellow","chartreuse3"),
    # colours = c("khaki1","goldenrod","firebrick3","chartreuse4"),
    colours = c("firebrick4","orange","#007d00"),
    # colours = c("#7d0000","#00b300","#00b300","#00b300","#007d00"),
    na.value = "white",
    labels = c("Absence","no se","Presence"),
    breaks = c(0,0.5,1))+
  geom_text(
    data = y_axis_text_pigment,
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    hjust = 1,
    size = 6,
    # angle = 20
    )+
  geom_text(
    data = data.frame(x = -0.05, y = -0.3, lab = "Absorption (nm)"),
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    hjust = 1,
    size = 5,
    # angle = 20
    )+
  geom_text(
    data = Absorption_wv,
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    hjust = 0.5,
    size = 6,
    # angle = 20
    )+
  geom_text(
    data = x_axis_text_pigment,
    aes(x = x, y = y, label = lab),
    # fill = "#ffffff99",
    hjust = 0.5,
    size = 7,
    # angle = 20
    )+
  geom_segment(data = line_grid, 
               aes(x = xmin, xend = xmax, y = ymin, yend = ymax, group = group),
               linewidth = 1)+
  xlim(c(-2,9))+
  ylim(c(-1,6.1))+
  theme_Bede()+
  theme(
  # axis.title.x = element_text(size = 35),
        # axis.title.y = element_text(size = 35),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),


        # axis.text.x = element_text(size = 30),
        axis.text.x = element_blank(),
        # axis.text.y = element_text(size = 25),
         axis.text.y = element_blank(),

        axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        axis.line=element_blank(),
        # legend.position = "top",
        legend.position = "none",
        legend.direction="horizontal",
        legend.key.width = unit(2,"cm"),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 20, vjust = 2),
        legend.title.align = 0.5,
        legend.justification = "center")

# rast_pigment

ggsave("./Figures/Disc_Pigment_Table.png",rast_pigment, width= 1066*4, height=516*4, units = "px")


```

```{r Plot Table Pigment}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: !expr "paste0('Photosynthetic and carotenoid pigments present (Green) or absent (Red) in each taxonomic class present in the Neural Network Classifier, along with their absorption wavelength measured with spectroradiometer. Chl b: chlorophyll b, Chl c: chlorophyll c, Fuco: fucoxanthin, Zea: zeaxanthin, Diad: diadinoxanthin, Lut: lutein, Neo: neoxanthin, PE: phycoerythrin, PC: phycocyanin.')"
#| label: fig-Pigm
#| fig-width: 10
#| fig-height: 5
#| out-width: "100%"


knitr::include_graphics("./Figures/Low_res/Disc_Pigment_Table.png")
```

The primary objective of this study was to develop a method for the accurate classification of macrophytes on intertidal mudflats, specifically focusing on distinguishing between Chlorophyceae (green macroalgae) and marine Magnoliopsida (seagrasses) using multispectral drone data. The ability to differentiate between various types of vegetation, as demonstrated in this study, plays a critical role in ecological monitoring and coastal management. By distinguishing between seagrasses and macroalgae, our approach facilitates targeted conservation strategies, enabling more effective preservation and restoration efforts in coastal ecosystems. The discrimination of seagrasses from green macroalgae presents significant challenges [@oiry2021using ; @bannari2022 ; @veettil2020opportunities], primarily due to the similarities on their spectal signatures in the visible region of the eletromagnetic spectra due to shared pigment [@mckenzie2020global ; @fig-Pigm], but also by the frequent spatial mixing of these macrophytes. Besides chlorophyll-a that is common to all vegetation types, these two green macrophytes have in common other photosynthetic pigments such as chlorophyll-b, and accessory carotenoid pigments such as zeaxantin, lutein and neoxanthin (@fig-Pigm). This spectral overlap is further complicated by the intermingling of seagrasses and green macroalgae in the same spatial locations, posing a significant challenge for remote sensing aimed at accurately mapping and monitoring coastal ecosystems. Our study addresses these complexities by using high-resolution drone imagery with 10 spectral bands. @Davies2023 have shown that having at least eight spectral bands ranging between 500 nm to 850 nm including a green band at 530 nm and another one in the RedEdge region at 730 nm was crucial to accurately discriminate amoung green macrophytes.

::: columns
::: column
```{r Global Accuracy assesment Plot}
#| cache: false
#| echo: false
#| warning: false
#| fig-cap: Sample of @fig-Validation focusing on green macrophytes. The labels inside the matrix indicate the number of pixels.
#| label: fig-ValidationGreen
#| fig-width: 10
#| fig-height: 10
#| out-width: "100%"

knitr::include_graphics("./Figures/Low_res/Validation/ConfusionMatrixGreen.png")

```
:::

::: column
Meeting these two criteria, the Micasense RedEdge-MX DUAL camera used in this study, enabled the classifier to achieve `r round(validation_metrics_green$overall[[1]],2)*100`% of accuracy between these two classes (@fig-ValidationGreen). Even if the pigment composition of green macrophytes is similar, differences in the spectral shape can still be observed (@fig-vegetation). Several factors can explain these differences such has different concentration and/or pigment ratios [@bargain2013seasonal], different cellular organisation and the disposition of the plant over the sediment surface [@beach1997vivo ; @kirk1994light ; @hedley2018influence].
:::
:::

The VIP analysis of the Neural Network model (@fig-VIP) identified that the band at 531 nm was the most important one for accurately identifying Chlorophyceae. In fact, at this wavelength, Chlorophyceae exhibited the highest reflectance (raw and standardised) among all other classes, highlighting the difference in accessory pigments (i.e. carotenoid) between seagrasses and green macroalgae [@repolho2017seagrass].

Concerning Phaeophyceae, the thick cell walls of these macroalgae [@charrier2021growth] make it more reflective in the infrared part of the spectra [@Slaton2001] whereas the presence of Fucoxanthin and Zeaxanthin result in a low reflectance in the visible region (@fig-Pigm ; @fig-VIP). These two key features have been identified by the Neural Network as the two principal predictors to accurately identify brown algae (@fig-VIP). Similarly, the presence of phycoerythrin and phycocyanin in Rhodophyceae contributes to the lowest reflectance among all classes in the spectral range of 560 to 615 nm (@fig-VIP). Indeed the band at 560 nm has been identified as important for identifying this class likely due to phycoerythrin absorption at this wavelength (**REF**). Regarding Bacillariophyceae, the VIP analysis (@fig-VIP) indicated that 475 nm was the most important predictor for this class. This is not a usual diagnostic wavelength for Bacillariophyceae which is mainly identified by the presence of fucoxanthin and chlorophyll c (@fig-Pigm), but it correspond to the absorption of diadinoxanthin an accessory pigment characteristic of this class [@meleder2003spectrometric]. Furthermore, it is the vegetation with the lowest concentration of chlorphyll-a, pigment absorbing light both in the blue and the red. The transparency of Bacillariophyceae makes the reflectance of the sediment part of the overall reflectance of Bacillariophyceae, further explaining the high reflectance in the blue.

## Spectral Spatial Temporal Resolution impact on the prediction

While comparing the reflectance of both altitudes (12 m and 120 m), it was observed @fig-CompareRef that there is an underestimation of the infrared part of the spectra in the high-altitude dataset. Such disparity in infrared reflectance may stem from temporal differences between the flights, possibly resulting in a slightly drier intertidal area and consequently higher infrared reflectance. This disparity poses an issue for the methodology followed in the present study, relying solely on one flight height for training. To address this issue, we employed min/max standardized reflectance spectra as predictors for the model (@eq-std ; [@Cao2017]). This approach allowed us to eliminate the slight reflectance difference between the flights (@fig-CompareRef B) and to focus on the shape of the spectra in the visible part of the electromagnetic spectra, where different pigmentation are associated to taxonomic dignostic features. This was a key feature in building a model that could reliably predict vegetation across geographical sites and seasons. It enabled consistent prediction of vegetation classes across variations in biomass and variability in light conditions [@fyfe2003spatial ; @COSTA2021107018 ; @piaser2023impact].

The @fig-upscaling demonstrates that at least `r round((lm_magno$coefficients[[2]]*85+lm_magno$coefficients[[1]])*100,0)` % of seagrass cover is necessary for confident prediction of its presence. This highlights a limitation of the methodology used to construct the training dataset for the model. The dataset used to train our algorithm was composed exclusively of pure pixels, which has resulted in the model's reduced confidence when faced with lower percentages of seagrass cover. Also, intertidal seagrasses exhibit marked phenology, with varying pigment composition throughout the year[@bargain2013seasonal ; @legare2022remote]. Since the training dataset has been made using well developed seagrass meadows, this model may be less accurate outside of the seasonal seagrass peak of biomass. Further investigation is required to evaluate the accuracy of the method along different periods of the year.

## Application of the model

Climate change, global warming, alien and invasive species development, coastal erosion, and sealevel rise are expected to continue impacting coastal ecosystems in the future [@SCHIBALSKI2022101414; @holon2018predictive ; @marquet2024global]. Therefore the demand for meaningful and efficient monitoring methods for these habitats has never been greater [@muller2018satellite ; @villalobos2023remote ; @oiry2021using]. Our findings, particularly the improved discrimination of seagrass from other intertidal vegetation classes, underscore the potential of drone-based remote sensing to support diverse applications, from biodiversity conservation to climate change adaptation strategies. 

With the increase in nutrient concentrations in coastal waters, macroalgal blooms are becoming increasingly common in many regions around the world  [@sutton2011european ; @ye2011green]. These blooms can have negative impacts on local economic activities, including human health, fishing and aquaculture, tourism, and recreational activities [@villares1999nitrogen ; @ye2011green]. The first green tide events (i.e. bloom of green macroalgae of the genus *Ulva*) were reported in Brittany, France, back in the 1970s and have since been a concern for local policies and economic activities [@menesguen2018marees]. Some regions of the world have louime2017sargassumrecently witnessed an increase in brown macroalgae blooms, predominantly involving algae of the genus *Sargassum* [@louime2017sargassum]. Satellite remote sensing has proven to be a valuable tool for mapping the spatial and temporal extent of macroalgal blooms worldwide. However, due to its limitations in spatial resolution, it can only effectively map well-developed blooms [@rs13081408 ; @klemas2012remote]. High spatial resolution drone imagery, coupled with an accurate classification algorithm, could be utilized to map the early stages of macroalgal blooms in areas known to have regular blooms or in new sites. Indeed, this approach could provide early warning alerts to local policymakers.

Employing traditional sampling methods to monitor these ecosystems is time and resource-intensive, and the findings are often difficult to up-scale. Earth observation methods can bridge this gap and meet the needs for monitoring coastal ecosystems. [@papathanasopoulou2019satellite]. The retrieval of Essential Biodiversity Variables (EBVs) and Essential Ocean Variables (EOVs) through satellite observations is increasingly common, enabling comprehensive monitoring of entire ecosystems over extended time periods [@ratnarajah2023monitoring ; @ZOFFOLI2020112020]. The significance of monitoring the coastal environment, particularly in light of the Water Framework Directive (WFD ; [@WFD2000]), cannot be overstated in environmental management and conservation efforts. The WFD mandates the achievement and maintenance of "good ecological status" for all European waters, which necessitates a comprehensive understanding and monitoring of aquatic ecosystems, including coastal habitats like seagrass beds [@foden2007angiosperms ; @nordlund2024one ; @Zoffoli2021].

Effective and efficient monitoring tools are essential for identifying the impacts of human activities and natural changes on these ecosystems. Drones, with their capability for high-resolution, multispectral imagery and, flight on-demand, provide a novel and powerful means to rapidly and accurately acquire ground truth data (i.e. output of the model used in the present study). These data are critical for calibrating and validating satellite remote sensing applications, thereby enhancing our capacity to monitor vast coastal areas systematically under the WFD. A perspective of this work could be applying this algorithm to satellite imagery (e.g. Sentinel-2) to evaluate if the discrimination between seagrass and green macroalgae is still operational at a coarser spatial resolution. The integration of drone technology facilitates a scalable approach to environmental surveillance, offering significant advancements in the spatial and temporal resolution of data collection. This, in turn, supports the directive's objectives by enabling more informed and timely management decisions for the conservation and restoration of aquatic ecosystems.

# Conclusion

The utilization of very high-resolution drone-based remote sensing coupled with machine learning techniques has proven to be an effective method for the discrimination of seagrasses from green macroalgae with a multispectral resolution sensor. Standardized reflectance was incorporated in the Neural Network model allowing for a better discrimination of spectral features related to pigment absorption in the visible. There was a striking difference for the variable of importance to discriminate Magnoliopsida from Chlorophyceae. The latter was essentially identified with the 451 nm spectral band while more spectral bands were needed to identify the former, notably 650, 560, 668, and 705 nm. As the spectral bands of the Micasense RedEdge Dual MX are very similar to those of Sentinel-2, we suggest that multispectral satellite data have the potential to perform this discrimination between green macrophytes. A sentinel-2 algorithm could be developed, using the output of this current workflow as training and validation data. The findings underscore the importance of adopting advanced remote sensing tools in ecological studies and environmental monitoring, providing a foundation for future research and policy implementation aimed at ecosystem conservation and restoration.
